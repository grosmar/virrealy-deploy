(function (console) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.exists = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(f(x)) return true;
	}
	return false;
};
Lambda.filter = function(it,f) {
	var l = new List();
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(f(x)) l.add(x);
	}
	return l;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var $it0 = $iterator(it)();
		while( $it0.hasNext() ) {
			var _ = $it0.next();
			n++;
		}
	} else {
		var $it1 = $iterator(it)();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			if(pred(x)) n++;
		}
	}
	return n;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListIterator = function(head) {
	this.head = head;
	this.val = null;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,val: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		this.val = this.head[0];
		this.head = this.head[1];
		return this.val;
	}
	,__class__: _$List_ListIterator
};
var MachinaSuite = function() {
	this.list = [hex_HexUnitSuite,hex_HexCoreSuite,hex_HexInjectSuite,hex_HexServiceSuite,hex_HexMVCSuite,hex_HexIoCSuite,hex_state_HexStateSuite];
};
$hxClasses["MachinaSuite"] = MachinaSuite;
MachinaSuite.__name__ = ["MachinaSuite"];
MachinaSuite.prototype = {
	list: null
	,__class__: MachinaSuite
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) return s.split("\"").join("&quot;").split("'").join("&#039;"); else return s;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null; else return js_Boot.getClass(o);
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) return null;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a > b;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get_nodeValue: function() {
		if(this.nodeType == Xml.Document || this.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + this.nodeType);
		return this.nodeValue;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		this.attributeMap.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.exists(att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element && (function($this) {
				var $r;
				if(child.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				$r = child.nodeName;
				return $r;
			}(this)) == name) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) return child;
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(x.parent != null) x.parent.removeChild(x);
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
	,__properties__: {get_nodeValue:"get_nodeValue"}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_Http = function(url) {
	this.url = url;
	this.headers = new List();
	this.params = new List();
	this.async = true;
};
$hxClasses["haxe.Http"] = haxe_Http;
haxe_Http.__name__ = ["haxe","Http"];
haxe_Http.prototype = {
	url: null
	,responseData: null
	,async: null
	,postData: null
	,headers: null
	,params: null
	,addHeader: function(header,value) {
		this.headers.push({ header : header, value : value});
		return this;
	}
	,setParameter: function(param,value) {
		this.params = Lambda.filter(this.params,function(p) {
			return p.param != param;
		});
		this.params.push({ param : param, value : value});
		return this;
	}
	,addParameter: function(param,value) {
		this.params.push({ param : param, value : value});
		return this;
	}
	,req: null
	,cancel: function() {
		if(this.req == null) return;
		this.req.abort();
		this.req = null;
	}
	,request: function(post) {
		var me = this;
		me.responseData = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) return;
			var s;
			try {
				s = r.status;
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s != null) {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) if(r.responseText != null) s = 200; else s = 404;
			}
			if(s == undefined) s = null;
			if(s != null) me.onStatus(s);
			if(s != null && s >= 200 && s < 400) {
				me.req = null;
				me.onData(me.responseData = r.responseText);
			} else if(s == null) {
				me.req = null;
				me.onError("Failed to connect or resolve host");
			} else switch(s) {
			case 12029:
				me.req = null;
				me.onError("Failed to connect to host");
				break;
			case 12007:
				me.req = null;
				me.onError("Unknown host");
				break;
			default:
				me.req = null;
				me.responseData = r.responseText;
				me.onError("Http Error #" + r.status);
			}
		};
		if(this.async) r.onreadystatechange = onreadystatechange;
		var uri = this.postData;
		if(uri != null) post = true; else {
			var _g_head = this.params.h;
			var _g_val = null;
			while(_g_head != null) {
				var p;
				p = (function($this) {
					var $r;
					_g_val = _g_head[0];
					_g_head = _g_head[1];
					$r = _g_val;
					return $r;
				}(this));
				if(uri == null) uri = ""; else uri += "&";
				uri += encodeURIComponent(p.param) + "=" + encodeURIComponent(p.value);
			}
		}
		try {
			if(post) r.open("POST",this.url,this.async); else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question?"?":"&") + uri,this.async);
				uri = null;
			} else r.open("GET",this.url,this.async);
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			me.req = null;
			this.onError(e1.toString());
			return;
		}
		if(!Lambda.exists(this.headers,function(h) {
			return h.header == "Content-Type";
		}) && post && this.postData == null) r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		var _g_head1 = this.headers.h;
		var _g_val1 = null;
		while(_g_head1 != null) {
			var h1;
			h1 = (function($this) {
				var $r;
				_g_val1 = _g_head1[0];
				_g_head1 = _g_head1[1];
				$r = _g_val1;
				return $r;
			}(this));
			r.setRequestHeader(h1.header,h1.value);
		}
		r.send(uri);
		if(!this.async) onreadystatechange(null);
	}
	,onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,__class__: haxe_Http
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe_io_Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = ["haxe","ds","ArraySort"];
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) return;
		var _g = from + 1;
		while(_g < to) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) haxe_ds_ArraySort.swap(a,j - 1,j); else break;
				j--;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	var new_mid;
	if(len1 == 0 || len2 == 0) return;
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) haxe_ds_ArraySort.swap(a,pivot,from);
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	var n;
	if(from == mid || mid == to) return;
	n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) p2 += shift; else p2 = from + (shift - (to - p2));
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) len = half; else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else len = half;
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = ["haxe","ds","GenericCell"];
haxe_ds_GenericCell.prototype = {
	elt: null
	,next: null
	,__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = ["haxe","ds","GenericStack"];
haxe_ds_GenericStack.prototype = {
	head: null
	,add: function(item) {
		this.head = new haxe_ds_GenericCell(item,this.head);
	}
	,first: function() {
		if(this.head == null) return null; else return this.head.elt;
	}
	,pop: function() {
		var k = this.head;
		if(k == null) return null; else {
			this.head = k.next;
			return k.elt;
		}
	}
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) return { }; else return meta.obj;
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getStatics = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.statics == null) return { }; else return meta.statics;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) return { }; else return meta.fields;
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) strict = false;
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				buf.addSub(str,start,p - start);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw new js__$Boot_HaxeError("Expected <![CDATA[");
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw new js__$Boot_HaxeError("Expected <!DOCTYPE");
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw new js__$Boot_HaxeError("Expected <!--"); else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw new js__$Boot_HaxeError("Expected node name");
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw new js__$Boot_HaxeError("Expected node name");
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				nsubs++;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw new js__$Boot_HaxeError("Expected attribute name");
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw new js__$Boot_HaxeError("Duplicate attribute");
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected =");
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected \"");
			}
			break;
		case 8:
			switch(c) {
			case 38:
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 62:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			case 60:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val2 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val2);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw new js__$Boot_HaxeError("Expected node name");
				var v = HxOverrides.substr(str,start,p - start);
				if(v != (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					$r = parent.nodeName;
					return $r;
				}(this))) throw new js__$Boot_HaxeError("Expected </" + (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + parent.nodeType;
					$r = parent.nodeName;
					return $r;
				}(this)) + ">");
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				var xml1 = Xml.createComment(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				var xml2 = Xml.createDocType(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml2);
				nsubs++;
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				var xml3 = Xml.createProcessingInstruction(str1);
				parent.addChild(xml3);
				nsubs++;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1;
					if(s.charCodeAt(1) == 120) c1 = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else c1 = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else if(!haxe_xml_Parser.escapes.exists(s)) {
					if(strict) throw new js__$Boot_HaxeError("Undefined entity: " + s);
					buf.b += Std.string("&" + s + ";");
				} else buf.add(haxe_xml_Parser.escapes.get(s));
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) throw new js__$Boot_HaxeError("Invalid character in entity: " + String.fromCharCode(c));
				buf.b += "&";
				buf.addSub(str,start,p - start);
				p--;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			buf.addSub(str,start,p - start);
			var xml4 = Xml.createPCData(buf.b);
			parent.addChild(xml4);
			nsubs++;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		buf.addSub(str,start,p - start);
		var xml5 = Xml.createPCData(buf.b);
		parent.addChild(xml5);
		nsubs++;
		return p;
	}
	throw new js__$Boot_HaxeError("Unexpected end");
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = ["haxe","xml","Printer"];
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) pretty = false;
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		var _g = value.nodeType;
		switch(_g) {
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			this.write(StringTools.trim((function($this) {
				var $r;
				if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
				$r = value.nodeValue;
				return $r;
			}(this))));
			this.output.b += "]]>";
			if(this.pretty) this.output.b += "";
			break;
		case 3:
			var commentContent;
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			commentContent = value.nodeValue;
			commentContent = new EReg("[\n\r\t]+","g").replace(commentContent,"");
			commentContent = "<!--" + commentContent + "-->";
			if(tabs == null) this.output.b += "null"; else this.output.b += "" + tabs;
			this.write(StringTools.trim(commentContent));
			if(this.pretty) this.output.b += "";
			break;
		case 6:
			var $it0 = (function($this) {
				var $r;
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				$r = HxOverrides.iter(value.children);
				return $r;
			}(this));
			while( $it0.hasNext() ) {
				var child = $it0.next();
				this.writeNode(child,tabs);
			}
			break;
		case 0:
			this.output.b += Std.string(tabs + "<");
			this.write((function($this) {
				var $r;
				if(value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
				$r = value.nodeName;
				return $r;
			}(this)));
			var $it1 = value.attributes();
			while( $it1.hasNext() ) {
				var attribute = $it1.next();
				this.output.b += Std.string(" " + attribute + "=\"");
				this.write(StringTools.htmlEscape(value.get(attribute),true));
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) this.output.b += "";
				var $it2 = (function($this) {
					var $r;
					if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
					$r = HxOverrides.iter(value.children);
					return $r;
				}(this));
				while( $it2.hasNext() ) {
					var child1 = $it2.next();
					this.writeNode(child1,this.pretty?tabs + "\t":tabs);
				}
				this.output.b += Std.string(tabs + "</");
				this.write((function($this) {
					var $r;
					if(value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
					$r = value.nodeName;
					return $r;
				}(this)));
				this.output.b += ">";
				if(this.pretty) this.output.b += "";
			} else {
				this.output.b += "/>";
				if(this.pretty) this.output.b += "";
			}
			break;
		case 1:
			var nodeValue;
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				this.write(tabs + StringTools.htmlEscape(nodeValue));
				if(this.pretty) this.output.b += "";
			}
			break;
		case 5:
			this.write("<?" + (function($this) {
				var $r;
				if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
				$r = value.nodeValue;
				return $r;
			}(this)) + "?>");
			break;
		case 4:
			this.write("<!DOCTYPE " + (function($this) {
				var $r;
				if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
				$r = value.nodeValue;
				return $r;
			}(this)) + ">");
			break;
		}
	}
	,write: function(input) {
		if(input == null) this.output.b += "null"; else this.output.b += "" + input;
	}
	,hasChildren: function(value) {
		var $it0 = (function($this) {
			var $r;
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
			$r = HxOverrides.iter(value.children);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var child = $it0.next();
			var _g = child.nodeType;
			switch(_g) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(StringTools.ltrim((function($this) {
					var $r;
					if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + child.nodeType);
					$r = child.nodeValue;
					return $r;
				}(this))).length != 0) return true;
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var hex_HexCoreSuite = function() {
	this.list = [hex_event_CoreEventSuite,hex_collection_CoreCollectionSuite,hex_core_CoreCoreSuite,hex_di_CoreDiSuite,hex_domain_CoreDomainSuite];
};
$hxClasses["hex.HexCoreSuite"] = hex_HexCoreSuite;
hex_HexCoreSuite.__name__ = ["hex","HexCoreSuite"];
hex_HexCoreSuite.prototype = {
	list: null
	,__class__: hex_HexCoreSuite
};
var hex_HexInjectSuite = function() {
	this.list = [hex_di_annotation_AnnotationSuite,hex_di_DISuite];
};
$hxClasses["hex.HexInjectSuite"] = hex_HexInjectSuite;
hex_HexInjectSuite.__name__ = ["hex","HexInjectSuite"];
hex_HexInjectSuite.prototype = {
	list: null
	,__class__: hex_HexInjectSuite
};
var hex_HexIoCSuite = function() {
	this.list = [hex_ioc_IOCSuite];
};
$hxClasses["hex.HexIoCSuite"] = hex_HexIoCSuite;
hex_HexIoCSuite.__name__ = ["hex","HexIoCSuite"];
hex_HexIoCSuite.prototype = {
	list: null
	,__class__: hex_HexIoCSuite
};
var hex_HexMVCSuite = function() {
	this.list = [hex_config_MVCConfigSuite,hex_control_MVCControlSuite,hex_event_MVCEventSuite,hex_metadata_MVCMetadataSuite,hex_module_MVCModuleSuite,hex_viewhelper_MVCViewHelperSuite];
};
$hxClasses["hex.HexMVCSuite"] = hex_HexMVCSuite;
hex_HexMVCSuite.__name__ = ["hex","HexMVCSuite"];
hex_HexMVCSuite.prototype = {
	list: null
	,__class__: hex_HexMVCSuite
};
var hex_HexServiceSuite = function() {
	this.list = [hex_config_stateful_ServiceLocatorTest,hex_service_ServiceServiceSuite];
};
$hxClasses["hex.HexServiceSuite"] = hex_HexServiceSuite;
hex_HexServiceSuite.__name__ = ["hex","HexServiceSuite"];
hex_HexServiceSuite.prototype = {
	list: null
	,__class__: hex_HexServiceSuite
};
var hex_HexUnitSuite = function() {
	this.list = [hex_event_EventSuite];
};
$hxClasses["hex.HexUnitSuite"] = hex_HexUnitSuite;
hex_HexUnitSuite.__name__ = ["hex","HexUnitSuite"];
hex_HexUnitSuite.prototype = {
	list: null
	,__class__: hex_HexUnitSuite
};
var hex_di_IBasicInjector = function() { };
$hxClasses["hex.di.IBasicInjector"] = hex_di_IBasicInjector;
hex_di_IBasicInjector.__name__ = ["hex","di","IBasicInjector"];
hex_di_IBasicInjector.prototype = {
	mapToValue: null
	,mapToType: null
	,mapToSingleton: null
	,getInstance: null
	,instantiateUnmapped: null
	,getOrCreateNewInstance: null
	,hasMapping: null
	,unmap: null
	,__class__: hex_di_IBasicInjector
};
var hex_di_IDependencyInjector = function() { };
$hxClasses["hex.di.IDependencyInjector"] = hex_di_IDependencyInjector;
hex_di_IDependencyInjector.__name__ = ["hex","di","IDependencyInjector"];
hex_di_IDependencyInjector.__interfaces__ = [hex_di_IBasicInjector];
hex_di_IDependencyInjector.prototype = {
	hasDirectMapping: null
	,satisfies: null
	,injectInto: null
	,destroyInstance: null
	,addEventListener: null
	,removeEventListener: null
	,__class__: hex_di_IDependencyInjector
};
var hex_MockDependencyInjector = function() {
};
$hxClasses["hex.MockDependencyInjector"] = hex_MockDependencyInjector;
hex_MockDependencyInjector.__name__ = ["hex","MockDependencyInjector"];
hex_MockDependencyInjector.__interfaces__ = [hex_di_IDependencyInjector];
hex_MockDependencyInjector.prototype = {
	hasMapping: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,hasDirectMapping: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,satisfies: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,injectInto: function(target) {
	}
	,getInstance: function(type,name,targetType) {
		if(name == null) name = "";
		return null;
	}
	,getOrCreateNewInstance: function(type) {
		return Type.createInstance(type,[]);
	}
	,instantiateUnmapped: function(type) {
		return Type.createInstance(type,[]);
	}
	,destroyInstance: function(instance) {
	}
	,mapToValue: function(clazz,value,name) {
		if(name == null) name = "";
	}
	,mapToType: function(clazz,type,name) {
		if(name == null) name = "";
	}
	,mapToSingleton: function(clazz,type,name) {
		if(name == null) name = "";
	}
	,unmap: function(type,name) {
		if(name == null) name = "";
	}
	,addEventListener: function(eventType,callback) {
		return false;
	}
	,removeEventListener: function(eventType,callback) {
		return false;
	}
	,__class__: hex_MockDependencyInjector
};
var hex_collection_CoreCollectionSuite = function() {
	this.list = [hex_collection_HashMapTest,hex_collection_LocatorTest];
};
$hxClasses["hex.collection.CoreCollectionSuite"] = hex_collection_CoreCollectionSuite;
hex_collection_CoreCollectionSuite.__name__ = ["hex","collection","CoreCollectionSuite"];
hex_collection_CoreCollectionSuite.prototype = {
	list: null
	,__class__: hex_collection_CoreCollectionSuite
};
var hex_collection_IHashMap = function() { };
$hxClasses["hex.collection.IHashMap"] = hex_collection_IHashMap;
hex_collection_IHashMap.__name__ = ["hex","collection","IHashMap"];
hex_collection_IHashMap.prototype = {
	clear: null
	,containsKey: null
	,containsValue: null
	,get: null
	,isEmpty: null
	,put: null
	,remove: null
	,size: null
	,getKeys: null
	,getValues: null
	,__class__: hex_collection_IHashMap
};
var hex_collection_HashMap = function() {
	this._init();
};
$hxClasses["hex.collection.HashMap"] = hex_collection_HashMap;
hex_collection_HashMap.__name__ = ["hex","collection","HashMap"];
hex_collection_HashMap.__interfaces__ = [hex_collection_IHashMap];
hex_collection_HashMap.prototype = {
	_keys: null
	,_values: null
	,_size: null
	,_init: function() {
		this._keys = new haxe_ds_StringMap();
		this._values = new haxe_ds_StringMap();
		this._size = 0;
	}
	,clear: function() {
		this._init();
	}
	,containsKey: function(key) {
		if(key != null) {
			var key1 = this._getName(key);
			return this._keys.exists(key1);
		} else throw new js__$Boot_HaxeError(new hex_error_NullPointerException(Std.string(this) + ".containsKey() failed. key can't be null",{ fileName : "HashMap.hx", lineNumber : 57, className : "hex.collection.HashMap", methodName : "containsKey"}));
	}
	,containsValue: function(value) {
		if(value != null) {
			var key = this._getName(value);
			return this._values.exists(key);
		} else throw new js__$Boot_HaxeError(new hex_error_NullPointerException(Std.string(this) + ".containsValue() failed. value can't be null",{ fileName : "HashMap.hx", lineNumber : 80, className : "hex.collection.HashMap", methodName : "containsValue"}));
	}
	,get: function(key) {
		if(key != null) {
			var key1 = this._getName(key);
			return this._keys.get(key1);
		} else throw new js__$Boot_HaxeError(new hex_error_NullPointerException(Std.string(this) + ".get() failed. key can't be null",{ fileName : "HashMap.hx", lineNumber : 112, className : "hex.collection.HashMap", methodName : "get"}));
	}
	,isEmpty: function() {
		return this._size == 0;
	}
	,put: function(key,value) {
		var oldValue = null;
		if(key == null) throw new js__$Boot_HaxeError(new hex_error_NullPointerException(Std.string(this) + ".put() failed. key can't be null",{ fileName : "HashMap.hx", lineNumber : 147, className : "hex.collection.HashMap", methodName : "put"})); else if(value == null) throw new js__$Boot_HaxeError(new hex_error_NullPointerException(Std.string(this) + ".put() failed. value can't be null",{ fileName : "HashMap.hx", lineNumber : 151, className : "hex.collection.HashMap", methodName : "put"})); else {
			if(this.containsKey(key)) oldValue = this.remove(key);
			this._size++;
			var key1 = this._getName(key);
			this._keys.set(key1,value);
			var key2 = this._getName(value);
			this._values.set(key2,key);
			return oldValue;
		}
	}
	,_getName: function(o) {
		var s;
		if(typeof(o) == "string") s = "_S" + Std.string(o); else if(typeof(o) == "boolean") s = "_B" + Std.string(o); else if(typeof(o) == "number" || ((o | 0) === o)) s = "_N" + Std.string(o); else s = "_O" + hex_core_HashCodeFactory.getKey(o);
		return s;
	}
	,remove: function(key) {
		if(key != null) {
			var sKID = this._getName(key);
			if(this._keys.exists(sKID)) {
				var sVID = this._getName(this._keys.get(sKID));
				var value = this._keys.get(sKID);
				this._values.remove(sVID);
				this._keys.remove(sKID);
				this._size--;
				return value;
			} else return null;
		} else throw new js__$Boot_HaxeError(new hex_error_NullPointerException(Std.string(this) + ".remove() failed. key can't be null",{ fileName : "HashMap.hx", lineNumber : 236, className : "hex.collection.HashMap", methodName : "remove"}));
	}
	,size: function() {
		return this._size;
	}
	,getKeys: function() {
		var a = [];
		var it = this._values.iterator();
		while(it.hasNext()) a.push(it.next());
		return a;
	}
	,getValues: function() {
		var a = [];
		var it = this._keys.iterator();
		while(it.hasNext()) a.push(it.next());
		return a;
	}
	,__class__: hex_collection_HashMap
};
var hex_collection_HashMapTest = function() { };
$hxClasses["hex.collection.HashMapTest"] = hex_collection_HashMapTest;
hex_collection_HashMapTest.__name__ = ["hex","collection","HashMapTest"];
hex_collection_HashMapTest.prototype = {
	_map: null
	,setUp: function() {
		this._map = new hex_collection_HashMap();
	}
	,tearDown: function() {
		this._map.clear();
		this._map = null;
	}
	,testIsEmpty: function() {
		var mockKey = new hex_collection__$HashMapTest_MockKeyClass();
		var mockValue = new hex_collection__$HashMapTest_MockValueClass();
		hex_unittest_assertion_Assert.isTrue(this._map.isEmpty(),"'isEmpty' should return true",{ fileName : "HashMapTest.hx", lineNumber : 33, className : "hex.collection.HashMapTest", methodName : "testIsEmpty"});
		this._map.put(mockKey,mockValue);
		hex_unittest_assertion_Assert.isFalse(this._map.isEmpty(),"'isEmpty' should return false",{ fileName : "HashMapTest.hx", lineNumber : 35, className : "hex.collection.HashMapTest", methodName : "testIsEmpty"});
	}
	,testClear: function() {
		var mockKey = new hex_collection__$HashMapTest_MockKeyClass();
		var mockValue = new hex_collection__$HashMapTest_MockValueClass();
		this._map.put(mockKey,mockValue);
		this._map.clear();
		hex_unittest_assertion_Assert.isTrue(this._map.isEmpty(),"'isEmpty' should return true",{ fileName : "HashMapTest.hx", lineNumber : 47, className : "hex.collection.HashMapTest", methodName : "testClear"});
		hex_unittest_assertion_Assert.isNull(this._map.get(mockKey),"'get' should return null",{ fileName : "HashMapTest.hx", lineNumber : 48, className : "hex.collection.HashMapTest", methodName : "testClear"});
	}
	,testPutAndGet: function() {
		var mockKey = new hex_collection__$HashMapTest_MockKeyClass();
		var mockValue = new hex_collection__$HashMapTest_MockValueClass();
		var value = this._map.put(mockKey,mockValue);
		hex_unittest_assertion_Assert.isNull(value,"'put' should return null when key was never registered",{ fileName : "HashMapTest.hx", lineNumber : 58, className : "hex.collection.HashMapTest", methodName : "testPutAndGet"});
		hex_unittest_assertion_Assert.equals(mockValue,this._map.get(mockKey),"'get' should return value argument",{ fileName : "HashMapTest.hx", lineNumber : 59, className : "hex.collection.HashMapTest", methodName : "testPutAndGet"});
		var anotherMockValue = new hex_collection__$HashMapTest_MockValueClass();
		value = this._map.put(mockKey,anotherMockValue);
		hex_unittest_assertion_Assert.equals(mockValue,value,"'put' should return previous value registered with key argument",{ fileName : "HashMapTest.hx", lineNumber : 63, className : "hex.collection.HashMapTest", methodName : "testPutAndGet"});
		hex_unittest_assertion_Assert.equals(anotherMockValue,this._map.get(mockKey),"'get' should return new value argument",{ fileName : "HashMapTest.hx", lineNumber : 64, className : "hex.collection.HashMapTest", methodName : "testPutAndGet"});
		hex_unittest_assertion_Assert.notEquals(mockValue,this._map.get(mockKey),"'get' should not return previous value argument",{ fileName : "HashMapTest.hx", lineNumber : 65, className : "hex.collection.HashMapTest", methodName : "testPutAndGet"});
		var emptyKey = null;
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this._map,($_=this._map,$bind($_,$_.get)),[emptyKey],"'get' should throw NullPointerException",{ fileName : "HashMapTest.hx", lineNumber : 68, className : "hex.collection.HashMapTest", methodName : "testPutAndGet"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this._map,($_=this._map,$bind($_,$_.get)),[null],"'get' should throw NullPointerException",{ fileName : "HashMapTest.hx", lineNumber : 69, className : "hex.collection.HashMapTest", methodName : "testPutAndGet"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this._map,($_=this._map,$bind($_,$_.put)),[emptyKey,mockValue],"'put' should throw NullPointerException",{ fileName : "HashMapTest.hx", lineNumber : 71, className : "hex.collection.HashMapTest", methodName : "testPutAndGet"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this._map,($_=this._map,$bind($_,$_.put)),[null,mockValue],"'put' should throw NullPointerException",{ fileName : "HashMapTest.hx", lineNumber : 72, className : "hex.collection.HashMapTest", methodName : "testPutAndGet"});
		var emptyValue = null;
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this._map,($_=this._map,$bind($_,$_.put)),[mockKey,emptyValue],"'put' should throw NullPointerException",{ fileName : "HashMapTest.hx", lineNumber : 75, className : "hex.collection.HashMapTest", methodName : "testPutAndGet"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this._map,($_=this._map,$bind($_,$_.put)),[mockKey,null],"'put' should throw NullPointerException",{ fileName : "HashMapTest.hx", lineNumber : 76, className : "hex.collection.HashMapTest", methodName : "testPutAndGet"});
	}
	,testRemove: function() {
		var mockKey = new hex_collection__$HashMapTest_MockKeyClass();
		var mockValue = new hex_collection__$HashMapTest_MockValueClass();
		this._map.put(mockKey,mockValue);
		var value = this._map.remove(mockKey);
		hex_unittest_assertion_Assert.equals(mockValue,value,"'remove' should return previous value registered with key argument",{ fileName : "HashMapTest.hx", lineNumber : 87, className : "hex.collection.HashMapTest", methodName : "testRemove"});
		hex_unittest_assertion_Assert.isTrue(this._map.isEmpty(),"'isEmpty' should return true",{ fileName : "HashMapTest.hx", lineNumber : 88, className : "hex.collection.HashMapTest", methodName : "testRemove"});
		hex_unittest_assertion_Assert.isNull(this._map.remove(mockKey),"'remove' should return null when the key is not associtaed to nay value",{ fileName : "HashMapTest.hx", lineNumber : 90, className : "hex.collection.HashMapTest", methodName : "testRemove"});
		var emptyKey = null;
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this._map,($_=this._map,$bind($_,$_.remove)),[emptyKey],"'remove' should throw NullPointerException",{ fileName : "HashMapTest.hx", lineNumber : 93, className : "hex.collection.HashMapTest", methodName : "testRemove"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this._map,($_=this._map,$bind($_,$_.remove)),[null],"'remove' should throw NullPointerException",{ fileName : "HashMapTest.hx", lineNumber : 94, className : "hex.collection.HashMapTest", methodName : "testRemove"});
	}
	,testSize: function() {
		var mockKey = new hex_collection__$HashMapTest_MockKeyClass();
		var mockValue = new hex_collection__$HashMapTest_MockValueClass();
		hex_unittest_assertion_Assert.equals(0,this._map.size(),"'size' should return 0 when the map is empty",{ fileName : "HashMapTest.hx", lineNumber : 103, className : "hex.collection.HashMapTest", methodName : "testSize"});
		this._map.put(mockKey,mockValue);
		hex_unittest_assertion_Assert.equals(1,this._map.size(),"'size' should return 1 when one element is added",{ fileName : "HashMapTest.hx", lineNumber : 106, className : "hex.collection.HashMapTest", methodName : "testSize"});
		this._map.put(new hex_collection__$HashMapTest_MockKeyClass(),new hex_collection__$HashMapTest_MockValueClass());
		hex_unittest_assertion_Assert.equals(2,this._map.size(),"'size' should return 2 when another element is added",{ fileName : "HashMapTest.hx", lineNumber : 109, className : "hex.collection.HashMapTest", methodName : "testSize"});
		this._map.put(mockKey,new hex_collection__$HashMapTest_MockValueClass());
		hex_unittest_assertion_Assert.equals(2,this._map.size(),"'size' should return 1 when a new element is added with a previous key",{ fileName : "HashMapTest.hx", lineNumber : 112, className : "hex.collection.HashMapTest", methodName : "testSize"});
		this._map.remove(mockKey);
		hex_unittest_assertion_Assert.equals(1,this._map.size(),"'size' should return 1 when an element is removed",{ fileName : "HashMapTest.hx", lineNumber : 115, className : "hex.collection.HashMapTest", methodName : "testSize"});
		this._map.clear();
		hex_unittest_assertion_Assert.equals(0,this._map.size(),"'size' should return 0 when the map is cleared",{ fileName : "HashMapTest.hx", lineNumber : 118, className : "hex.collection.HashMapTest", methodName : "testSize"});
	}
	,testContainsKey: function() {
		var mockKey = new hex_collection__$HashMapTest_MockKeyClass();
		var mockValue = new hex_collection__$HashMapTest_MockValueClass();
		hex_unittest_assertion_Assert.isFalse(this._map.containsKey(mockKey),"'containsKey' should return false when the key was never added",{ fileName : "HashMapTest.hx", lineNumber : 127, className : "hex.collection.HashMapTest", methodName : "testContainsKey"});
		this._map.put(mockKey,mockValue);
		hex_unittest_assertion_Assert.isTrue(this._map.containsKey(mockKey),"'containsKey' should return true when the key was added",{ fileName : "HashMapTest.hx", lineNumber : 130, className : "hex.collection.HashMapTest", methodName : "testContainsKey"});
		this._map.remove(mockKey);
		hex_unittest_assertion_Assert.isFalse(this._map.containsKey(mockKey),"'containsKey' should return false when the key was removed",{ fileName : "HashMapTest.hx", lineNumber : 133, className : "hex.collection.HashMapTest", methodName : "testContainsKey"});
		var emptyKey = null;
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this._map,($_=this._map,$bind($_,$_.containsKey)),[emptyKey],"'containsKey' should throw NullPointerException",{ fileName : "HashMapTest.hx", lineNumber : 136, className : "hex.collection.HashMapTest", methodName : "testContainsKey"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this._map,($_=this._map,$bind($_,$_.containsKey)),[null],"'containsKey' should throw NullPointerException",{ fileName : "HashMapTest.hx", lineNumber : 137, className : "hex.collection.HashMapTest", methodName : "testContainsKey"});
	}
	,testContainsValue: function() {
		var mockKey = new hex_collection__$HashMapTest_MockKeyClass();
		var mockValue = new hex_collection__$HashMapTest_MockValueClass();
		hex_unittest_assertion_Assert.isFalse(this._map.containsValue(mockValue),"'containsValue' should return false when the value was never added",{ fileName : "HashMapTest.hx", lineNumber : 146, className : "hex.collection.HashMapTest", methodName : "testContainsValue"});
		this._map.put(mockKey,mockValue);
		hex_unittest_assertion_Assert.isTrue(this._map.containsValue(mockValue),"'containsValue' should return true when the value was added",{ fileName : "HashMapTest.hx", lineNumber : 149, className : "hex.collection.HashMapTest", methodName : "testContainsValue"});
		this._map.remove(mockKey);
		hex_unittest_assertion_Assert.isFalse(this._map.containsValue(mockValue),"'containsValue' should return false when the value was removed",{ fileName : "HashMapTest.hx", lineNumber : 152, className : "hex.collection.HashMapTest", methodName : "testContainsValue"});
		var emptyValue = null;
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this._map,($_=this._map,$bind($_,$_.containsValue)),[emptyValue],"'containsValue' should throw NullPointerException",{ fileName : "HashMapTest.hx", lineNumber : 155, className : "hex.collection.HashMapTest", methodName : "testContainsValue"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this._map,($_=this._map,$bind($_,$_.containsValue)),[null],"'containsValue' should throw NullPointerException",{ fileName : "HashMapTest.hx", lineNumber : 156, className : "hex.collection.HashMapTest", methodName : "testContainsValue"});
	}
	,testGetKeysAndGetValues: function() {
		var mockKey = new hex_collection__$HashMapTest_MockKeyClass();
		var mockValue = new hex_collection__$HashMapTest_MockValueClass();
		var keyList = [mockKey,new hex_collection__$HashMapTest_MockKeyClass(),new hex_collection__$HashMapTest_MockKeyClass()];
		var valueList = [mockValue,new hex_collection__$HashMapTest_MockValueClass(),new hex_collection__$HashMapTest_MockValueClass()];
		var len = keyList.length;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this._map.put(keyList[i],valueList[i]);
		}
		var getKeysList = this._map.getKeys();
		hex_unittest_assertion_Assert.deepEquals(keyList,getKeysList,"'getKeys' doesn't return all the values added to the map",{ fileName : "HashMapTest.hx", lineNumber : 175, className : "hex.collection.HashMapTest", methodName : "testGetKeysAndGetValues"});
		var getValuesList = this._map.getValues();
		hex_unittest_assertion_Assert.deepEquals(valueList,getValuesList,"'getValues' doesn't return all the values added to the map",{ fileName : "HashMapTest.hx", lineNumber : 178, className : "hex.collection.HashMapTest", methodName : "testGetKeysAndGetValues"});
		this._map.remove(mockKey);
		keyList.splice(HxOverrides.indexOf(keyList,mockKey,0),1);
		valueList.splice(HxOverrides.indexOf(valueList,mockValue,0),1);
		getKeysList = this._map.getKeys();
		hex_unittest_assertion_Assert.deepEquals(keyList,getKeysList,"'getKeys' doesn't return all the values added to the map after removal",{ fileName : "HashMapTest.hx", lineNumber : 185, className : "hex.collection.HashMapTest", methodName : "testGetKeysAndGetValues"});
		getValuesList = this._map.getValues();
		hex_unittest_assertion_Assert.deepEquals(valueList,getValuesList,"'getValues' doesn't return all the values added to the map after removal",{ fileName : "HashMapTest.hx", lineNumber : 188, className : "hex.collection.HashMapTest", methodName : "testGetKeysAndGetValues"});
		this._map.clear();
		getKeysList = this._map.getKeys();
		hex_unittest_assertion_Assert.equals(0,getKeysList.length,"'getKeys' should return an empty 'Array' after 'clear' call",{ fileName : "HashMapTest.hx", lineNumber : 192, className : "hex.collection.HashMapTest", methodName : "testGetKeysAndGetValues"});
		getValuesList = this._map.getValues();
		hex_unittest_assertion_Assert.equals(0,getValuesList.length,"'getValues' should return an empty 'Array' after 'clear' call",{ fileName : "HashMapTest.hx", lineNumber : 194, className : "hex.collection.HashMapTest", methodName : "testGetKeysAndGetValues"});
	}
	,testClassKey: function() {
		var m = new hex_collection_HashMap();
		m.put(String,"String");
		hex_unittest_assertion_Assert.equals("String",m.get(String),"'get' should return expected value with 'String' class key",{ fileName : "HashMapTest.hx", lineNumber : 203, className : "hex.collection.HashMapTest", methodName : "testClassKey"});
		m.put(Bool,"Bool");
		hex_unittest_assertion_Assert.equals("Bool",m.get(Bool),"'get' should return expected value with 'Bool' class key",{ fileName : "HashMapTest.hx", lineNumber : 206, className : "hex.collection.HashMapTest", methodName : "testClassKey"});
		m.put(Int,"Int");
		hex_unittest_assertion_Assert.equals("Int",m.get(Int),"'get' should return expected value with 'Int' class key",{ fileName : "HashMapTest.hx", lineNumber : 209, className : "hex.collection.HashMapTest", methodName : "testClassKey"});
		m.put(Float,"Float");
		hex_unittest_assertion_Assert.equals("Float",m.get(Float),"'get' should return expected value with 'Float' class key",{ fileName : "HashMapTest.hx", lineNumber : 212, className : "hex.collection.HashMapTest", methodName : "testClassKey"});
		m.put(hex_collection__$HashMapTest_CustomClass,"CustomClass");
		hex_unittest_assertion_Assert.equals("CustomClass",m.get(hex_collection__$HashMapTest_CustomClass),"'get' should return expected value with 'CustomClass' class key",{ fileName : "HashMapTest.hx", lineNumber : 215, className : "hex.collection.HashMapTest", methodName : "testClassKey"});
	}
	,__class__: hex_collection_HashMapTest
};
var hex_collection__$HashMapTest_CustomClass = function() { };
$hxClasses["hex.collection._HashMapTest.CustomClass"] = hex_collection__$HashMapTest_CustomClass;
hex_collection__$HashMapTest_CustomClass.__name__ = ["hex","collection","_HashMapTest","CustomClass"];
var hex_collection__$HashMapTest_MockKeyClass = function() {
};
$hxClasses["hex.collection._HashMapTest.MockKeyClass"] = hex_collection__$HashMapTest_MockKeyClass;
hex_collection__$HashMapTest_MockKeyClass.__name__ = ["hex","collection","_HashMapTest","MockKeyClass"];
hex_collection__$HashMapTest_MockKeyClass.prototype = {
	name: null
	,__class__: hex_collection__$HashMapTest_MockKeyClass
};
var hex_collection__$HashMapTest_MockValueClass = function() {
};
$hxClasses["hex.collection._HashMapTest.MockValueClass"] = hex_collection__$HashMapTest_MockValueClass;
hex_collection__$HashMapTest_MockValueClass.__name__ = ["hex","collection","_HashMapTest","MockValueClass"];
hex_collection__$HashMapTest_MockValueClass.prototype = {
	name: null
	,__class__: hex_collection__$HashMapTest_MockValueClass
};
var hex_collection_ILocator = function() { };
$hxClasses["hex.collection.ILocator"] = hex_collection_ILocator;
hex_collection_ILocator.__name__ = ["hex","collection","ILocator"];
hex_collection_ILocator.prototype = {
	keys: null
	,values: null
	,isRegisteredWithKey: null
	,locate: null
	,register: null
	,unregister: null
	,add: null
	,addListener: null
	,removeListener: null
	,__class__: hex_collection_ILocator
};
var hex_collection_ILocatorListener = function() { };
$hxClasses["hex.collection.ILocatorListener"] = hex_collection_ILocatorListener;
hex_collection_ILocatorListener.__name__ = ["hex","collection","ILocatorListener"];
hex_collection_ILocatorListener.prototype = {
	onRegister: null
	,onUnregister: null
	,__class__: hex_collection_ILocatorListener
};
var hex_collection_Locator = function() {
	this._map = new hex_collection_HashMap();
	this._dispatcher = new hex_event_Dispatcher();
};
$hxClasses["hex.collection.Locator"] = hex_collection_Locator;
hex_collection_Locator.__name__ = ["hex","collection","Locator"];
hex_collection_Locator.__interfaces__ = [hex_collection_ILocator];
hex_collection_Locator.prototype = {
	_dispatcher: null
	,_map: null
	,clear: function() {
		this._map.clear();
	}
	,release: function() {
		this.clear();
		this._map = null;
		if(this._dispatcher != null) {
			this._dispatcher.removeAllListeners();
			this._dispatcher = null;
		}
	}
	,isEmpty: function() {
		return this._map.size() == 0;
	}
	,keys: function() {
		return this._map.getKeys();
	}
	,values: function() {
		return this._map.getValues();
	}
	,isRegisteredWithKey: function(key) {
		return this._map.containsKey(key);
	}
	,locate: function(key) {
		if(this.isRegisteredWithKey(key)) return this._map.get(key); else throw new js__$Boot_HaxeError(new hex_error_NoSuchElementException("Can't find item with '" + Std.string(key) + "' key in " + this.toString(),{ fileName : "Locator.hx", lineNumber : 69, className : "hex.collection.Locator", methodName : "locate"}));
	}
	,add: function(m) {
		var iterator = m.keys();
		while(iterator.hasNext()) {
			var key = iterator.next();
			this.register(key,m.h[key]);
		}
	}
	,register: function(key,element) {
		if(this._map.containsKey(key)) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("item is already registered with '" + Std.string(key) + "' key in " + this.toString(),{ fileName : "Locator.hx", lineNumber : 88, className : "hex.collection.Locator", methodName : "register"})); else {
			this._map.put(key,element);
			this._dispatchRegisterEvent(key,element);
			return true;
		}
	}
	,unregister: function(key) {
		if(this.isRegisteredWithKey(key)) {
			this._map.remove(key);
			this._dispatchUnregisterEvent(key);
			return true;
		} else return false;
	}
	,addListener: function(listener) {
		return this._dispatcher.addListener(listener);
	}
	,removeListener: function(listener) {
		return this._dispatcher.removeListener(listener);
	}
	,toString: function() {
		return hex_log_Stringifier.stringify(this);
	}
	,_dispatchRegisterEvent: function(key,element) {
	}
	,_dispatchUnregisterEvent: function(key) {
	}
	,__class__: hex_collection_Locator
};
var hex_event_MessageType = function(messageName) {
	if(messageName == null) messageName = "handleMessage";
	this.name = messageName;
};
$hxClasses["hex.event.MessageType"] = hex_event_MessageType;
hex_event_MessageType.__name__ = ["hex","event","MessageType"];
hex_event_MessageType.prototype = {
	name: null
	,__class__: hex_event_MessageType
};
var hex_collection_LocatorMessage = function() {
};
$hxClasses["hex.collection.LocatorMessage"] = hex_collection_LocatorMessage;
hex_collection_LocatorMessage.__name__ = ["hex","collection","LocatorMessage"];
hex_collection_LocatorMessage.prototype = {
	__class__: hex_collection_LocatorMessage
};
var hex_collection_LocatorTest = function() { };
$hxClasses["hex.collection.LocatorTest"] = hex_collection_LocatorTest;
hex_collection_LocatorTest.__name__ = ["hex","collection","LocatorTest"];
hex_collection_LocatorTest.prototype = {
	_locator: null
	,setUp: function() {
		this._locator = new hex_collection_Locator();
	}
	,tearDown: function() {
		this._locator.clear();
		this._locator = null;
	}
	,testRegisterKeyString: function() {
		var locator = new hex_collection_Locator();
		hex_unittest_assertion_Assert.isTrue(locator.register("hello","world"),"'register' call should return true",{ fileName : "LocatorTest.hx", lineNumber : 31, className : "hex.collection.LocatorTest", methodName : "testRegisterKeyString"});
		hex_unittest_assertion_Assert.isTrue(locator.register("hola","mundo"),"'register' call should return true",{ fileName : "LocatorTest.hx", lineNumber : 32, className : "hex.collection.LocatorTest", methodName : "testRegisterKeyString"});
		hex_unittest_assertion_Assert.equals("world",locator.locate("hello"),"'locate' should return registered value",{ fileName : "LocatorTest.hx", lineNumber : 33, className : "hex.collection.LocatorTest", methodName : "testRegisterKeyString"});
	}
	,testIsEmpty: function() {
		var mockKey = new hex_collection__$LocatorTest_MockKeyClass();
		var mockValue = new hex_collection__$LocatorTest_MockValueClass();
		hex_unittest_assertion_Assert.isTrue(this._locator.isEmpty(),"'isEmpty' should return true",{ fileName : "LocatorTest.hx", lineNumber : 42, className : "hex.collection.LocatorTest", methodName : "testIsEmpty"});
		this._locator.register(mockKey,mockValue);
		hex_unittest_assertion_Assert.isFalse(this._locator.isEmpty(),"'isEmpty' should return false",{ fileName : "LocatorTest.hx", lineNumber : 44, className : "hex.collection.LocatorTest", methodName : "testIsEmpty"});
	}
	,__class__: hex_collection_LocatorTest
};
var hex_collection__$LocatorTest_MockKeyClass = function() {
};
$hxClasses["hex.collection._LocatorTest.MockKeyClass"] = hex_collection__$LocatorTest_MockKeyClass;
hex_collection__$LocatorTest_MockKeyClass.__name__ = ["hex","collection","_LocatorTest","MockKeyClass"];
hex_collection__$LocatorTest_MockKeyClass.prototype = {
	name: null
	,__class__: hex_collection__$LocatorTest_MockKeyClass
};
var hex_collection__$LocatorTest_MockValueClass = function() {
};
$hxClasses["hex.collection._LocatorTest.MockValueClass"] = hex_collection__$LocatorTest_MockValueClass;
hex_collection__$LocatorTest_MockValueClass.__name__ = ["hex","collection","_LocatorTest","MockValueClass"];
hex_collection__$LocatorTest_MockValueClass.prototype = {
	name: null
	,__class__: hex_collection__$LocatorTest_MockValueClass
};
var hex_config_MVCConfigSuite = function() {
	this.list = [hex_config_stateful_MVCStatefulConfigSuite];
};
$hxClasses["hex.config.MVCConfigSuite"] = hex_config_MVCConfigSuite;
hex_config_MVCConfigSuite.__name__ = ["hex","config","MVCConfigSuite"];
hex_config_MVCConfigSuite.prototype = {
	list: null
	,__class__: hex_config_MVCConfigSuite
};
var hex_config_stateful_IStatefulConfig = function() { };
$hxClasses["hex.config.stateful.IStatefulConfig"] = hex_config_stateful_IStatefulConfig;
hex_config_stateful_IStatefulConfig.__name__ = ["hex","config","stateful","IStatefulConfig"];
hex_config_stateful_IStatefulConfig.prototype = {
	configure: null
	,__class__: hex_config_stateful_IStatefulConfig
};
var hex_config_stateful_MVCStatefulConfigSuite = function() {
	this.list = [hex_config_stateful_StatefulCommandConfigTest];
};
$hxClasses["hex.config.stateful.MVCStatefulConfigSuite"] = hex_config_stateful_MVCStatefulConfigSuite;
hex_config_stateful_MVCStatefulConfigSuite.__name__ = ["hex","config","stateful","MVCStatefulConfigSuite"];
hex_config_stateful_MVCStatefulConfigSuite.prototype = {
	list: null
	,__class__: hex_config_stateful_MVCStatefulConfigSuite
};
var hex_config_stateful_ServiceLocator = function() {
	this._mapping = new hex_collection_HashMap();
	hex_collection_Locator.call(this);
};
$hxClasses["hex.config.stateful.ServiceLocator"] = hex_config_stateful_ServiceLocator;
hex_config_stateful_ServiceLocator.__name__ = ["hex","config","stateful","ServiceLocator"];
hex_config_stateful_ServiceLocator.__interfaces__ = [hex_config_stateful_IStatefulConfig];
hex_config_stateful_ServiceLocator.__super__ = hex_collection_Locator;
hex_config_stateful_ServiceLocator.prototype = $extend(hex_collection_Locator.prototype,{
	_mapping: null
	,getService: function(type,name) {
		if(name == null) name = "";
		var helper;
		if(name.length > 0) helper = this.locate(name + "#" + Type.getClassName(type)); else helper = this.locate(Type.getClassName(type));
		var service = helper.value;
		if(js_Boot.__instanceof(service,Class)) service = Type.createInstance(service,[]);
		if(js_Boot.__instanceof(service,hex_service_IService)) return service; else throw new js__$Boot_HaxeError(new hex_error_NoSuchElementException(Std.string(this) + ".getService failed to retrieve service with key '" + Std.string(type) + "'",{ fileName : "ServiceLocator.hx", lineNumber : 56, className : "hex.config.stateful.ServiceLocator", methodName : "getService"}));
	}
	,configure: function(injector,dispatcher,module) {
		var keys = this.keys();
		var _g = 0;
		while(_g < keys.length) {
			var className = keys[_g];
			++_g;
			var separatorIndex = className.indexOf("#");
			var serviceClassKey;
			if(separatorIndex != -1) serviceClassKey = Type.resolveClass(HxOverrides.substr(className,separatorIndex + 1,null)); else serviceClassKey = Type.resolveClass(className);
			var helper = this.locate(className);
			var service = helper.value;
			if(js_Boot.__instanceof(service,Class)) {
				if(helper.mapName.length > 0) injector.mapToType(serviceClassKey,service,helper.mapName); else injector.mapToType(serviceClassKey,service);
			} else if(js_Boot.__instanceof(service,hex_service_stateful_IStatefulService)) {
				var serviceDispatcher = service.getDispatcher();
				if(serviceDispatcher != null) serviceDispatcher.add(dispatcher);
				if(helper.mapName.length > 0) injector.mapToValue(serviceClassKey,service,helper.mapName); else injector.mapToValue(serviceClassKey,service);
			} else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("Mapping failed on '" + Std.string(service) + "' This instance is not a stateful service nor a service class.",{ fileName : "ServiceLocator.hx", lineNumber : 110, className : "hex.config.stateful.ServiceLocator", methodName : "configure"}));
			this._mapping.put(serviceClassKey,service);
		}
	}
	,addService: function(service,value,mapName) {
		if(mapName == null) mapName = "";
		return this._registerService(service,new hex_config_stateful__$ServiceLocator_ServiceLocatorHelper(value,mapName),mapName);
	}
	,getMapping: function() {
		return this._mapping;
	}
	,_registerService: function(type,service,mapName) {
		if(mapName == null) mapName = "";
		var className;
		className = (mapName != ""?mapName + "#":"") + Type.getClassName(type);
		return this.register(className,service);
	}
	,_dispatchRegisterEvent: function(key,element) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.REGISTER,[key,element]);
	}
	,_dispatchUnregisterEvent: function(key) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.UNREGISTER,[key]);
	}
	,__class__: hex_config_stateful_ServiceLocator
});
var hex_config_stateful__$ServiceLocator_ServiceLocatorHelper = function(value,mapName) {
	this.value = value;
	this.mapName = mapName;
};
$hxClasses["hex.config.stateful._ServiceLocator.ServiceLocatorHelper"] = hex_config_stateful__$ServiceLocator_ServiceLocatorHelper;
hex_config_stateful__$ServiceLocator_ServiceLocatorHelper.__name__ = ["hex","config","stateful","_ServiceLocator","ServiceLocatorHelper"];
hex_config_stateful__$ServiceLocator_ServiceLocatorHelper.prototype = {
	value: null
	,mapName: null
	,toString: function() {
		return "ServiceLocatorHelper( value:" + Std.string(this.value) + ", mapName:" + this.mapName + " )";
	}
	,__class__: hex_config_stateful__$ServiceLocator_ServiceLocatorHelper
};
var hex_config_stateful_ServiceLocatorTest = function() { };
$hxClasses["hex.config.stateful.ServiceLocatorTest"] = hex_config_stateful_ServiceLocatorTest;
hex_config_stateful_ServiceLocatorTest.__name__ = ["hex","config","stateful","ServiceLocatorTest"];
hex_config_stateful_ServiceLocatorTest.prototype = {
	_serviceLocator: null
	,setUp: function() {
		this._serviceLocator = new hex_config_stateful_ServiceLocator();
	}
	,tearDown: function() {
		this._serviceLocator = null;
	}
	,testConfigureWithInstanceOfNotAStatefulService: function() {
		this._serviceLocator.addService(hex_service_stateless_IStatelessService,new hex_service_stateless_MockStatelessService(),"myServiceName");
		var injector = new hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToTypeTest();
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,this._serviceLocator,($_=this._serviceLocator,$bind($_,$_.configure)),[injector,null,null],"'getService' should throw IllegalArgumentException",{ fileName : "ServiceLocatorTest.hx", lineNumber : 41, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithInstanceOfNotAStatefulService"});
	}
	,testGetServiceWithStatelessServiceUnnamed: function() {
		this._serviceLocator.addService(hex_service_stateless_IStatelessService,hex_service_stateless_MockStatelessService);
		hex_unittest_assertion_Assert.isInstanceOf(this._serviceLocator.getService(hex_service_stateless_IStatelessService),hex_service_stateless_MockStatelessService,"'getService' should return an instance of 'MockStatelessService'",{ fileName : "ServiceLocatorTest.hx", lineNumber : 48, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testGetServiceWithStatelessServiceUnnamed"});
	}
	,testGetServiceWithStatelessServiceNamed: function() {
		this._serviceLocator.addService(hex_service_stateless_IStatelessService,hex_service_stateless_MockStatelessService,"myServiceName");
		hex_unittest_assertion_Assert.isInstanceOf(this._serviceLocator.getService(hex_service_stateless_IStatelessService,"myServiceName"),hex_service_stateless_MockStatelessService,"'getService' should return instance of 'MockStatelessService'",{ fileName : "ServiceLocatorTest.hx", lineNumber : 55, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testGetServiceWithStatelessServiceNamed"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NoSuchElementException,this._serviceLocator,($_=this._serviceLocator,$bind($_,$_.getService)),[hex_service_stateless_IStatelessService],"'getService' without service name should throw NoSuchElementException",{ fileName : "ServiceLocatorTest.hx", lineNumber : 56, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testGetServiceWithStatelessServiceNamed"});
	}
	,testConfigureWithStatelessServiceUnnamed: function() {
		this._serviceLocator.addService(hex_service_stateless_IStatelessService,hex_service_stateless_MockStatelessService);
		var injector = new hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToTypeTest();
		this._serviceLocator.configure(injector,null,null);
		hex_unittest_assertion_Assert.equals(hex_service_stateless_IStatelessService,injector.clazz,"injector should map the class",{ fileName : "ServiceLocatorTest.hx", lineNumber : 66, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatelessServiceUnnamed"});
		hex_unittest_assertion_Assert.equals(injector.type,hex_service_stateless_MockStatelessService,"injector should map the service instance",{ fileName : "ServiceLocatorTest.hx", lineNumber : 67, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatelessServiceUnnamed"});
		hex_unittest_assertion_Assert.equals("",injector.name,"injector should map the service name",{ fileName : "ServiceLocatorTest.hx", lineNumber : 68, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatelessServiceUnnamed"});
	}
	,testConfigureWithStatelessServiceNamed: function() {
		this._serviceLocator.addService(hex_service_stateless_IStatelessService,hex_service_stateless_MockStatelessService,"myServiceName");
		var injector = new hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToTypeTest();
		this._serviceLocator.configure(injector,null,null);
		hex_unittest_assertion_Assert.equals(hex_service_stateless_IStatelessService,injector.clazz,"injector should map the service class",{ fileName : "ServiceLocatorTest.hx", lineNumber : 78, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatelessServiceNamed"});
		hex_unittest_assertion_Assert.equals(injector.type,hex_service_stateless_MockStatelessService,"injector should map the service type",{ fileName : "ServiceLocatorTest.hx", lineNumber : 79, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatelessServiceNamed"});
		hex_unittest_assertion_Assert.equals("myServiceName",injector.name,"injector should map the service name",{ fileName : "ServiceLocatorTest.hx", lineNumber : 80, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatelessServiceNamed"});
	}
	,testGetServiceWithStatefulServiceUnnamed: function() {
		var statefulService = new hex_config_stateful__$ServiceLocatorTest_MockStatefulService();
		this._serviceLocator.addService(hex_service_stateful_IStatefulService,statefulService);
		hex_unittest_assertion_Assert.equals(statefulService,this._serviceLocator.getService(hex_service_stateful_IStatefulService),"'getService' should return service added previously",{ fileName : "ServiceLocatorTest.hx", lineNumber : 88, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testGetServiceWithStatefulServiceUnnamed"});
	}
	,testGetServiceWithStatefulServiceNamed: function() {
		var statefulService = new hex_config_stateful__$ServiceLocatorTest_MockStatefulService();
		this._serviceLocator.addService(hex_service_stateful_IStatefulService,statefulService,"myServiceName");
		hex_unittest_assertion_Assert.equals(statefulService,this._serviceLocator.getService(hex_service_stateful_IStatefulService,"myServiceName"),"'getService' should return service added previously",{ fileName : "ServiceLocatorTest.hx", lineNumber : 96, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testGetServiceWithStatefulServiceNamed"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NoSuchElementException,this._serviceLocator,($_=this._serviceLocator,$bind($_,$_.getService)),[hex_service_stateful_IStatefulService],"'getService' without service name should throw NoSuchElementException",{ fileName : "ServiceLocatorTest.hx", lineNumber : 97, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testGetServiceWithStatefulServiceNamed"});
	}
	,testConfigureWithStatefulServiceUnnamed: function() {
		var dispatcher = new hex_event_Dispatcher();
		var statefulService = new hex_config_stateful__$ServiceLocatorTest_MockStatefulService();
		this._serviceLocator.addService(hex_service_stateful_IStatefulService,statefulService);
		var injector = new hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToValueTest();
		this._serviceLocator.configure(injector,dispatcher,null);
		hex_unittest_assertion_Assert.equals(hex_service_stateful_IStatefulService,injector.clazz,"injector should map the class",{ fileName : "ServiceLocatorTest.hx", lineNumber : 110, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatefulServiceUnnamed"});
		hex_unittest_assertion_Assert.equals(statefulService,injector.value,"injector should map the service instance",{ fileName : "ServiceLocatorTest.hx", lineNumber : 111, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatefulServiceUnnamed"});
		hex_unittest_assertion_Assert.equals("",injector.name,"injector should map the service name",{ fileName : "ServiceLocatorTest.hx", lineNumber : 112, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatefulServiceUnnamed"});
		var mt = new hex_event_MessageType("test");
		var listener = new hex_config_stateful__$ServiceLocatorTest_MockServiceListener();
		dispatcher.addHandler(mt,listener,$bind(listener,listener.onTest));
		statefulService.dispatch(mt,[statefulService]);
		hex_unittest_assertion_Assert.equals(statefulService,listener.lastDataReceived,"event should be received by sub-dispatcher listener",{ fileName : "ServiceLocatorTest.hx", lineNumber : 120, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatefulServiceUnnamed"});
		hex_unittest_assertion_Assert.equals(1,listener.eventReceivedCount,"event should be received by sub-dispatcher listener once",{ fileName : "ServiceLocatorTest.hx", lineNumber : 121, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatefulServiceUnnamed"});
	}
	,testConfigureWithStatefulServiceNamed: function() {
		var dispatcher = new hex_event_Dispatcher();
		var statefulService = new hex_config_stateful__$ServiceLocatorTest_MockStatefulService();
		this._serviceLocator.addService(hex_service_stateful_IStatefulService,statefulService,"myServiceName");
		var injector = new hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToValueTest();
		this._serviceLocator.configure(injector,dispatcher,null);
		hex_unittest_assertion_Assert.equals(hex_service_stateful_IStatefulService,injector.clazz,"injector should map the class",{ fileName : "ServiceLocatorTest.hx", lineNumber : 134, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatefulServiceNamed"});
		hex_unittest_assertion_Assert.equals(statefulService,injector.value,"injector should map the service instance",{ fileName : "ServiceLocatorTest.hx", lineNumber : 135, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatefulServiceNamed"});
		hex_unittest_assertion_Assert.equals("myServiceName",injector.name,"injector should map the service name",{ fileName : "ServiceLocatorTest.hx", lineNumber : 136, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatefulServiceNamed"});
		var mt = new hex_event_MessageType("test");
		var listener = new hex_config_stateful__$ServiceLocatorTest_MockServiceListener();
		dispatcher.addHandler(mt,listener,$bind(listener,listener.onTest));
		statefulService.dispatch(mt,[statefulService]);
		hex_unittest_assertion_Assert.equals(statefulService,listener.lastDataReceived,"event should be received by sub-dispatcher listener",{ fileName : "ServiceLocatorTest.hx", lineNumber : 144, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatefulServiceNamed"});
		hex_unittest_assertion_Assert.equals(1,listener.eventReceivedCount,"event should be received by sub-dispatcher listener once",{ fileName : "ServiceLocatorTest.hx", lineNumber : 145, className : "hex.config.stateful.ServiceLocatorTest", methodName : "testConfigureWithStatefulServiceNamed"});
	}
	,__class__: hex_config_stateful_ServiceLocatorTest
};
var hex_di_IInjectorContainer = function() { };
$hxClasses["hex.di.IInjectorContainer"] = hex_di_IInjectorContainer;
hex_di_IInjectorContainer.__name__ = ["hex","di","IInjectorContainer"];
var hex_service_IService = function() { };
$hxClasses["hex.service.IService"] = hex_service_IService;
hex_service_IService.__name__ = ["hex","service","IService"];
hex_service_IService.prototype = {
	createConfiguration: null
	,addHandler: null
	,removeHandler: null
	,getConfiguration: null
	,setConfiguration: null
	,removeAllListeners: null
	,__class__: hex_service_IService
};
var hex_service_AbstractService = function() {
};
$hxClasses["hex.service.AbstractService"] = hex_service_AbstractService;
hex_service_AbstractService.__name__ = ["hex","service","AbstractService"];
hex_service_AbstractService.__interfaces__ = [hex_service_IService];
hex_service_AbstractService.prototype = {
	_configuration: null
	,getConfiguration: function() {
		return this._configuration;
	}
	,createConfiguration: function() {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".createConfiguration must be overridden",{ fileName : "AbstractService.hx", lineNumber : 30, className : "hex.service.AbstractService", methodName : "createConfiguration"}));
	}
	,setConfiguration: function(configuration) {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".setConfiguration must be overridden",{ fileName : "AbstractService.hx", lineNumber : 35, className : "hex.service.AbstractService", methodName : "setConfiguration"}));
	}
	,addHandler: function(messageType,scope,callback) {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".addHandler must be overridden",{ fileName : "AbstractService.hx", lineNumber : 40, className : "hex.service.AbstractService", methodName : "addHandler"}));
	}
	,removeHandler: function(messageType,scope,callback) {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".removeHandler must be overridden",{ fileName : "AbstractService.hx", lineNumber : 45, className : "hex.service.AbstractService", methodName : "removeHandler"}));
	}
	,removeAllListeners: function() {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".removeAllListeners must be overridden",{ fileName : "AbstractService.hx", lineNumber : 50, className : "hex.service.AbstractService", methodName : "removeAllListeners"}));
	}
	,release: function() {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".release must be overridden",{ fileName : "AbstractService.hx", lineNumber : 55, className : "hex.service.AbstractService", methodName : "release"}));
	}
	,__class__: hex_service_AbstractService
};
var hex_service_stateful_IStatefulService = function() { };
$hxClasses["hex.service.stateful.IStatefulService"] = hex_service_stateful_IStatefulService;
hex_service_stateful_IStatefulService.__name__ = ["hex","service","stateful","IStatefulService"];
hex_service_stateful_IStatefulService.__interfaces__ = [hex_service_IService];
hex_service_stateful_IStatefulService.prototype = {
	inUse: null
	,getDispatcher: null
	,__class__: hex_service_stateful_IStatefulService
};
var hex_service_stateful_StatefulService = function() {
	this._inUse = false;
	hex_service_AbstractService.call(this);
	this._compositeDispatcher = new hex_event_CompositeDispatcher();
	this._dispatcher = new hex_event_Dispatcher();
	this._compositeDispatcher.add(this._dispatcher);
};
$hxClasses["hex.service.stateful.StatefulService"] = hex_service_stateful_StatefulService;
hex_service_stateful_StatefulService.__name__ = ["hex","service","stateful","StatefulService"];
hex_service_stateful_StatefulService.__interfaces__ = [hex_service_stateful_IStatefulService];
hex_service_stateful_StatefulService.__super__ = hex_service_AbstractService;
hex_service_stateful_StatefulService.prototype = $extend(hex_service_AbstractService.prototype,{
	_dispatcher: null
	,_compositeDispatcher: null
	,_inUse: null
	,getDispatcher: function() {
		return this._compositeDispatcher;
	}
	,setConfiguration: function(configuration) {
		this._inUse && this._throwExecutionIllegalStateError("setConfiguration");
		this._configuration = configuration;
	}
	,_lock: function() {
		this._inUse = true;
	}
	,_release: function() {
		this._inUse = false;
	}
	,inUse: function() {
		return this._inUse;
	}
	,addHandler: function(messageType,scope,callback) {
		this._dispatcher.addHandler(messageType,scope,callback);
	}
	,removeHandler: function(messageType,scope,callback) {
		this._dispatcher.removeHandler(messageType,scope,callback);
	}
	,removeAllListeners: function() {
		this._dispatcher.removeAllListeners();
	}
	,_throwExecutionIllegalStateError: function(methodName) {
		return this._throwIllegalStateError(methodName + "() failed. This service is already in use.");
	}
	,_throwIllegalStateError: function(msg) {
		throw new js__$Boot_HaxeError(new hex_error_IllegalStateException(msg,{ fileName : "StatefulService.hx", lineNumber : 80, className : "hex.service.stateful.StatefulService", methodName : "_throwIllegalStateError"}));
	}
	,__class__: hex_service_stateful_StatefulService
});
var hex_config_stateful__$ServiceLocatorTest_MockStatefulService = function() {
	hex_service_stateful_StatefulService.call(this);
};
$hxClasses["hex.config.stateful._ServiceLocatorTest.MockStatefulService"] = hex_config_stateful__$ServiceLocatorTest_MockStatefulService;
hex_config_stateful__$ServiceLocatorTest_MockStatefulService.__name__ = ["hex","config","stateful","_ServiceLocatorTest","MockStatefulService"];
hex_config_stateful__$ServiceLocatorTest_MockStatefulService.__super__ = hex_service_stateful_StatefulService;
hex_config_stateful__$ServiceLocatorTest_MockStatefulService.prototype = $extend(hex_service_stateful_StatefulService.prototype,{
	dispatch: function(messageType,data) {
		this._compositeDispatcher.dispatch(messageType,data);
	}
	,__class__: hex_config_stateful__$ServiceLocatorTest_MockStatefulService
});
var hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToTypeTest = function() {
	hex_MockDependencyInjector.call(this);
};
$hxClasses["hex.config.stateful._ServiceLocatorTest.MockInjectorForMapToTypeTest"] = hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToTypeTest;
hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToTypeTest.__name__ = ["hex","config","stateful","_ServiceLocatorTest","MockInjectorForMapToTypeTest"];
hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToTypeTest.__super__ = hex_MockDependencyInjector;
hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToTypeTest.prototype = $extend(hex_MockDependencyInjector.prototype,{
	clazz: null
	,type: null
	,name: null
	,mapToType: function(clazz,type,name) {
		if(name == null) name = "";
		this.clazz = clazz;
		this.type = type;
		this.name = name;
	}
	,__class__: hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToTypeTest
});
var hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToValueTest = function() {
	hex_MockDependencyInjector.call(this);
};
$hxClasses["hex.config.stateful._ServiceLocatorTest.MockInjectorForMapToValueTest"] = hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToValueTest;
hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToValueTest.__name__ = ["hex","config","stateful","_ServiceLocatorTest","MockInjectorForMapToValueTest"];
hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToValueTest.__super__ = hex_MockDependencyInjector;
hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToValueTest.prototype = $extend(hex_MockDependencyInjector.prototype,{
	clazz: null
	,value: null
	,name: null
	,mapToValue: function(clazz,value,name) {
		if(name == null) name = "";
		this.clazz = clazz;
		this.value = value;
		this.name = name;
	}
	,__class__: hex_config_stateful__$ServiceLocatorTest_MockInjectorForMapToValueTest
});
var hex_config_stateful__$ServiceLocatorTest_MockServiceListener = function() {
	this.eventReceivedCount = 0;
};
$hxClasses["hex.config.stateful._ServiceLocatorTest.MockServiceListener"] = hex_config_stateful__$ServiceLocatorTest_MockServiceListener;
hex_config_stateful__$ServiceLocatorTest_MockServiceListener.__name__ = ["hex","config","stateful","_ServiceLocatorTest","MockServiceListener"];
hex_config_stateful__$ServiceLocatorTest_MockServiceListener.prototype = {
	lastDataReceived: null
	,eventReceivedCount: null
	,onTest: function(service) {
		this.lastDataReceived = service;
		this.eventReceivedCount++;
	}
	,__class__: hex_config_stateful__$ServiceLocatorTest_MockServiceListener
};
var hex_config_stateful_StatefulCommandConfig = function() {
};
$hxClasses["hex.config.stateful.StatefulCommandConfig"] = hex_config_stateful_StatefulCommandConfig;
hex_config_stateful_StatefulCommandConfig.__name__ = ["hex","config","stateful","StatefulCommandConfig"];
hex_config_stateful_StatefulCommandConfig.__interfaces__ = [hex_config_stateful_IStatefulConfig];
hex_config_stateful_StatefulCommandConfig.prototype = {
	_frontController: null
	,configure: function(injector,dispatcher,module) {
		this._frontController = injector.getInstance(hex_control_IFrontController);
		if(this._frontController == null) throw new js__$Boot_HaxeError(new hex_di_error_MissingMappingException("configure failed to retrieve IFrontController mapping",{ fileName : "StatefulCommandConfig.hx", lineNumber : 36, className : "hex.config.stateful.StatefulCommandConfig", methodName : "configure"}));
	}
	,map: function(messageType,commandClass) {
		return this._frontController.map(messageType,commandClass);
	}
	,__class__: hex_config_stateful_StatefulCommandConfig
};
var hex_config_stateful_StatefulCommandConfigTest = function() { };
$hxClasses["hex.config.stateful.StatefulCommandConfigTest"] = hex_config_stateful_StatefulCommandConfigTest;
hex_config_stateful_StatefulCommandConfigTest.__name__ = ["hex","config","stateful","StatefulCommandConfigTest"];
hex_config_stateful_StatefulCommandConfigTest.prototype = {
	testConfigureThrowsInjectorMissingMappingError: function() {
		var config = new hex_config_stateful_StatefulCommandConfig();
		hex_unittest_assertion_Assert.methodCallThrows(hex_di_error_MissingMappingException,config,$bind(config,config.configure),[new hex_MockDependencyInjector(),new hex_event_Dispatcher(),new hex_module_MockModule()],"constructor should throw IllegalArgumentException",{ fileName : "StatefulCommandConfigTest.hx", lineNumber : 26, className : "hex.config.stateful.StatefulCommandConfigTest", methodName : "testConfigureThrowsInjectorMissingMappingError"});
	}
	,testMapBehavior: function() {
		var controller = new hex_config_stateful__$StatefulCommandConfigTest_MockFrontController();
		var injector = new hex_config_stateful__$StatefulCommandConfigTest_MockInjectorWithFrontController(controller);
		var config = new hex_config_stateful_StatefulCommandConfig();
		config.configure(injector,new hex_event_Dispatcher(),new hex_module_MockModule());
		var messageType = new hex_event_MessageType("test");
		config.map(messageType,hex_control_command_BasicCommand);
		hex_unittest_assertion_Assert.deepEquals([messageType,hex_control_command_BasicCommand],controller.mapParameters,"parameters should be the same",{ fileName : "StatefulCommandConfigTest.hx", lineNumber : 40, className : "hex.config.stateful.StatefulCommandConfigTest", methodName : "testMapBehavior"});
	}
	,__class__: hex_config_stateful_StatefulCommandConfigTest
};
var hex_control_IFrontController = function() { };
$hxClasses["hex.control.IFrontController"] = hex_control_IFrontController;
hex_control_IFrontController.__name__ = ["hex","control","IFrontController"];
hex_control_IFrontController.prototype = {
	map: null
	,unmap: null
	,__class__: hex_control_IFrontController
};
var hex_config_stateful__$StatefulCommandConfigTest_MockFrontController = function() {
};
$hxClasses["hex.config.stateful._StatefulCommandConfigTest.MockFrontController"] = hex_config_stateful__$StatefulCommandConfigTest_MockFrontController;
hex_config_stateful__$StatefulCommandConfigTest_MockFrontController.__name__ = ["hex","config","stateful","_StatefulCommandConfigTest","MockFrontController"];
hex_config_stateful__$StatefulCommandConfigTest_MockFrontController.__interfaces__ = [hex_control_IFrontController];
hex_config_stateful__$StatefulCommandConfigTest_MockFrontController.prototype = {
	mapParameters: null
	,map: function(messageType,commandClass) {
		this.mapParameters = [messageType,commandClass];
		return null;
	}
	,unmap: function(messageType) {
		return null;
	}
	,__class__: hex_config_stateful__$StatefulCommandConfigTest_MockFrontController
};
var hex_config_stateful__$StatefulCommandConfigTest_MockInjectorWithFrontController = function(frontcontroller) {
	this._frontcontroller = frontcontroller;
};
$hxClasses["hex.config.stateful._StatefulCommandConfigTest.MockInjectorWithFrontController"] = hex_config_stateful__$StatefulCommandConfigTest_MockInjectorWithFrontController;
hex_config_stateful__$StatefulCommandConfigTest_MockInjectorWithFrontController.__name__ = ["hex","config","stateful","_StatefulCommandConfigTest","MockInjectorWithFrontController"];
hex_config_stateful__$StatefulCommandConfigTest_MockInjectorWithFrontController.__interfaces__ = [hex_di_IDependencyInjector];
hex_config_stateful__$StatefulCommandConfigTest_MockInjectorWithFrontController.prototype = {
	_frontcontroller: null
	,hasMapping: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,hasDirectMapping: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,satisfies: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,injectInto: function(target) {
	}
	,getInstance: function(type,name,targetType) {
		if(name == null) name = "";
		return this._frontcontroller;
	}
	,getOrCreateNewInstance: function(type) {
		return Type.createInstance(type,[]);
	}
	,instantiateUnmapped: function(type) {
		return Type.createInstance(type,[]);
	}
	,destroyInstance: function(instance) {
	}
	,mapToValue: function(clazz,value,name) {
		if(name == null) name = "";
	}
	,mapToType: function(clazz,type,name) {
		if(name == null) name = "";
	}
	,mapToSingleton: function(clazz,type,name) {
		if(name == null) name = "";
	}
	,unmap: function(type,name) {
		if(name == null) name = "";
	}
	,addEventListener: function(eventType,callback) {
		return false;
	}
	,removeEventListener: function(eventType,callback) {
		return false;
	}
	,__class__: hex_config_stateful__$StatefulCommandConfigTest_MockInjectorWithFrontController
};
var hex_config_stateless_IStatelessConfig = function() { };
$hxClasses["hex.config.stateless.IStatelessConfig"] = hex_config_stateless_IStatelessConfig;
hex_config_stateless_IStatelessConfig.__name__ = ["hex","config","stateless","IStatelessConfig"];
hex_config_stateless_IStatelessConfig.prototype = {
	configure: null
	,__class__: hex_config_stateless_IStatelessConfig
};
var hex_control_FrontController = function(facadeDispatcher,injector,module) {
	hex_collection_Locator.call(this);
	this._facadeDispatcher = facadeDispatcher;
	this._injector = injector;
	this._module = module;
	this._facadeDispatcher.addListener(this);
};
$hxClasses["hex.control.FrontController"] = hex_control_FrontController;
hex_control_FrontController.__name__ = ["hex","control","FrontController"];
hex_control_FrontController.__interfaces__ = [hex_control_IFrontController];
hex_control_FrontController.__super__ = hex_collection_Locator;
hex_control_FrontController.prototype = $extend(hex_collection_Locator.prototype,{
	_module: null
	,_injector: null
	,_facadeDispatcher: null
	,map: function(messageType,commandClass) {
		var commandMapping = new hex_control_command_CommandMapping(commandClass);
		this.register(messageType,commandMapping);
		return commandMapping;
	}
	,unmap: function(messageType) {
		var commandMapping = this.locate(messageType);
		this.unregister(messageType);
		return commandMapping;
	}
	,handleMessage: function(messageType,request) {
		if(this.isRegisteredWithKey(messageType)) {
			var commandMapping = this.locate(messageType);
			var commandExecutor = new hex_control_command_CommandExecutor(this._injector,this._module);
			var mappingRemoval = null;
			if(commandMapping.get_isFiredOnce()) mappingRemoval = (function(f,a1) {
				return function() {
					return f(a1);
				};
			})($bind(this,this.unmap),messageType);
			commandExecutor.executeCommand(commandMapping,request,mappingRemoval);
		}
	}
	,_dispatchRegisterEvent: function(key,element) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.REGISTER,[key,element]);
	}
	,_dispatchUnregisterEvent: function(key) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.UNREGISTER,[key]);
	}
	,__class__: hex_control_FrontController
});
var hex_control_FrontControllerTest = function() { };
$hxClasses["hex.control.FrontControllerTest"] = hex_control_FrontControllerTest;
hex_control_FrontControllerTest.__name__ = ["hex","control","FrontControllerTest"];
hex_control_FrontControllerTest.prototype = {
	_dispatcher: null
	,_injector: null
	,_module: null
	,_frontcontroller: null
	,setUp: function() {
		this._dispatcher = new hex_event_Dispatcher();
		this._injector = new hex_control__$FrontControllerTest_MockDependencyInjector();
		this._module = new hex_control__$FrontControllerTest_MockModule();
		this._frontcontroller = new hex_control_FrontController(this._dispatcher,this._injector,this._module);
	}
	,tearDown: function() {
		this._frontcontroller = null;
	}
	,testMap: function() {
		var messageType = new hex_event_MessageType("messageType");
		var commandMapping = this._frontcontroller.map(messageType,hex_control__$FrontControllerTest_MockCommand);
		hex_unittest_assertion_Assert.equals(hex_control__$FrontControllerTest_MockCommand,commandMapping.getCommandClass(),"Command class should be the same",{ fileName : "FrontControllerTest.hx", lineNumber : 50, className : "hex.control.FrontControllerTest", methodName : "testMap"});
		hex_unittest_assertion_Assert.isTrue(this._frontcontroller.isRegisteredWithKey(messageType),"messageType should be registered",{ fileName : "FrontControllerTest.hx", lineNumber : 51, className : "hex.control.FrontControllerTest", methodName : "testMap"});
		hex_unittest_assertion_Assert.equals(commandMapping,this._frontcontroller.locate(messageType),"command mapping should be associated to messageType",{ fileName : "FrontControllerTest.hx", lineNumber : 52, className : "hex.control.FrontControllerTest", methodName : "testMap"});
	}
	,testUnmap: function() {
		var messageType = new hex_event_MessageType("messageType");
		var commandMapping0 = this._frontcontroller.map(messageType,hex_control__$FrontControllerTest_MockCommand);
		var commandMapping1 = this._frontcontroller.unmap(messageType);
		hex_unittest_assertion_Assert.equals(commandMapping0,commandMapping1,"Command mappings should be the same",{ fileName : "FrontControllerTest.hx", lineNumber : 62, className : "hex.control.FrontControllerTest", methodName : "testUnmap"});
		hex_unittest_assertion_Assert.isFalse(this._frontcontroller.isRegisteredWithKey(messageType),"messageType should not be registered anymore",{ fileName : "FrontControllerTest.hx", lineNumber : 63, className : "hex.control.FrontControllerTest", methodName : "testUnmap"});
	}
	,testRequestHandling: function() {
		var messageType = new hex_event_MessageType("messageType");
		var request = new hex_control_Request();
		this._frontcontroller.map(messageType,hex_control__$FrontControllerTest_MockCommand);
		this._dispatcher.dispatch(messageType,[request]);
		hex_unittest_assertion_Assert.equals(1,hex_control__$FrontControllerTest_MockCommand.executeCallCount,"Command execution should happenned once",{ fileName : "FrontControllerTest.hx", lineNumber : 75, className : "hex.control.FrontControllerTest", methodName : "testRequestHandling"});
		hex_unittest_assertion_Assert.equals(request,hex_control__$FrontControllerTest_MockCommand.requestParameter,"request received by the command should be the same that was dispatched",{ fileName : "FrontControllerTest.hx", lineNumber : 76, className : "hex.control.FrontControllerTest", methodName : "testRequestHandling"});
		var anotherMessageType = new hex_event_MessageType("anotherMessageType");
		var anotherRequest = new hex_control_Request();
		this._dispatcher.dispatch(anotherMessageType,[anotherRequest]);
		hex_unittest_assertion_Assert.equals(1,hex_control__$FrontControllerTest_MockCommand.executeCallCount,"Command execution should happenned once",{ fileName : "FrontControllerTest.hx", lineNumber : 82, className : "hex.control.FrontControllerTest", methodName : "testRequestHandling"});
		hex_unittest_assertion_Assert.equals(request,hex_control__$FrontControllerTest_MockCommand.requestParameter,"request received by the command should be the same that was dispatched",{ fileName : "FrontControllerTest.hx", lineNumber : 83, className : "hex.control.FrontControllerTest", methodName : "testRequestHandling"});
		this._frontcontroller.map(anotherMessageType,hex_control__$FrontControllerTest_MockCommand);
		this._dispatcher.dispatch(anotherMessageType,[anotherRequest]);
		hex_unittest_assertion_Assert.equals(2,hex_control__$FrontControllerTest_MockCommand.executeCallCount,"Command execution should happenned twice",{ fileName : "FrontControllerTest.hx", lineNumber : 88, className : "hex.control.FrontControllerTest", methodName : "testRequestHandling"});
		hex_unittest_assertion_Assert.equals(anotherRequest,hex_control__$FrontControllerTest_MockCommand.requestParameter,"request received by the command should be the same that was dispatched",{ fileName : "FrontControllerTest.hx", lineNumber : 89, className : "hex.control.FrontControllerTest", methodName : "testRequestHandling"});
	}
	,__class__: hex_control_FrontControllerTest
};
var hex_control_command_ICommand = function() { };
$hxClasses["hex.control.command.ICommand"] = hex_control_command_ICommand;
hex_control_command_ICommand.__name__ = ["hex","control","command","ICommand"];
hex_control_command_ICommand.prototype = {
	getExecuteMethod: null
	,getResult: null
	,getReturnedExecutionPayload: null
	,getOwner: null
	,setOwner: null
	,__class__: hex_control_command_ICommand
};
var hex_control__$FrontControllerTest_MockCommand = function() {
};
$hxClasses["hex.control._FrontControllerTest.MockCommand"] = hex_control__$FrontControllerTest_MockCommand;
hex_control__$FrontControllerTest_MockCommand.__name__ = ["hex","control","_FrontControllerTest","MockCommand"];
hex_control__$FrontControllerTest_MockCommand.__interfaces__ = [hex_control_command_ICommand];
hex_control__$FrontControllerTest_MockCommand.prototype = {
	execute: function(request) {
		hex_control__$FrontControllerTest_MockCommand.executeCallCount++;
		hex_control__$FrontControllerTest_MockCommand.requestParameter = request;
	}
	,getResult: function() {
		return null;
	}
	,getReturnedExecutionPayload: function() {
		return null;
	}
	,getOwner: function() {
		return null;
	}
	,setOwner: function(owner) {
	}
	,getExecuteMethod: function() {
		return $bind(this,this.execute);
	}
	,__class__: hex_control__$FrontControllerTest_MockCommand
};
var hex_di_IContextOwner = function() { };
$hxClasses["hex.di.IContextOwner"] = hex_di_IContextOwner;
hex_di_IContextOwner.__name__ = ["hex","di","IContextOwner"];
hex_di_IContextOwner.prototype = {
	getBasicInjector: null
	,__class__: hex_di_IContextOwner
};
var hex_module_IModule = function() { };
$hxClasses["hex.module.IModule"] = hex_module_IModule;
hex_module_IModule.__name__ = ["hex","module","IModule"];
hex_module_IModule.__interfaces__ = [hex_di_IContextOwner];
hex_module_IModule.prototype = {
	get_isInitialized: null
	,get_isReleased: null
	,initialize: null
	,isInitialized: null
	,release: null
	,isReleased: null
	,dispatchPublicMessage: null
	,addHandler: null
	,removeHandler: null
	,getDomain: null
	,getLogger: null
	,__class__: hex_module_IModule
	,__properties__: {get_isReleased:"get_isReleased",get_isInitialized:"get_isInitialized"}
};
var hex_control__$FrontControllerTest_MockModule = function() {
};
$hxClasses["hex.control._FrontControllerTest.MockModule"] = hex_control__$FrontControllerTest_MockModule;
hex_control__$FrontControllerTest_MockModule.__name__ = ["hex","control","_FrontControllerTest","MockModule"];
hex_control__$FrontControllerTest_MockModule.__interfaces__ = [hex_module_IModule];
hex_control__$FrontControllerTest_MockModule.prototype = {
	initialize: function() {
	}
	,isInitialized: null
	,get_isInitialized: function() {
		return false;
	}
	,release: function() {
	}
	,isReleased: null
	,get_isReleased: function() {
		return false;
	}
	,dispatchPublicMessage: function(messageType,data) {
	}
	,addHandler: function(messageType,scope,callback) {
	}
	,removeHandler: function(messageType,scope,callback) {
	}
	,getDomain: function() {
		return null;
	}
	,getBasicInjector: function() {
		return null;
	}
	,getLogger: function() {
		return null;
	}
	,__class__: hex_control__$FrontControllerTest_MockModule
	,__properties__: {get_isReleased:"get_isReleased",get_isInitialized:"get_isInitialized"}
};
var hex_control__$FrontControllerTest_MockDependencyInjector = function() {
};
$hxClasses["hex.control._FrontControllerTest.MockDependencyInjector"] = hex_control__$FrontControllerTest_MockDependencyInjector;
hex_control__$FrontControllerTest_MockDependencyInjector.__name__ = ["hex","control","_FrontControllerTest","MockDependencyInjector"];
hex_control__$FrontControllerTest_MockDependencyInjector.__interfaces__ = [hex_di_IDependencyInjector];
hex_control__$FrontControllerTest_MockDependencyInjector.prototype = {
	hasMapping: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,hasDirectMapping: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,satisfies: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,injectInto: function(target) {
	}
	,getInstance: function(type,name,targetType) {
		if(name == null) name = "";
		return null;
	}
	,getOrCreateNewInstance: function(type) {
		return Type.createInstance(hex_control__$FrontControllerTest_MockCommand,[]);
	}
	,instantiateUnmapped: function(type) {
		return null;
	}
	,destroyInstance: function(instance) {
	}
	,mapToValue: function(clazz,value,name) {
		if(name == null) name = "";
	}
	,mapToType: function(clazz,type,name) {
		if(name == null) name = "";
	}
	,mapToSingleton: function(clazz,type,name) {
		if(name == null) name = "";
	}
	,unmap: function(type,name) {
		if(name == null) name = "";
	}
	,addEventListener: function(eventType,callback) {
		return false;
	}
	,removeEventListener: function(eventType,callback) {
		return false;
	}
	,__class__: hex_control__$FrontControllerTest_MockDependencyInjector
};
var hex_control_ICallable = function() { };
$hxClasses["hex.control.ICallable"] = hex_control_ICallable;
hex_control_ICallable.__name__ = ["hex","control","ICallable"];
hex_control_ICallable.prototype = {
	call: null
	,__class__: hex_control_ICallable
};
var hex_control_ICancellable = function() { };
$hxClasses["hex.control.ICancellable"] = hex_control_ICancellable;
hex_control_ICancellable.__name__ = ["hex","control","ICancellable"];
hex_control_ICancellable.__interfaces__ = [hex_control_ICallable];
hex_control_ICancellable.prototype = {
	cancel: null
	,__class__: hex_control_ICancellable
};
var hex_control_MVCControlSuite = function() {
	this.list = [hex_control_async_MVCAsyncSuite,hex_control_command_MVCCommandSuite,hex_control_guard_GuardUtilTest,hex_control_FrontControllerTest,hex_control_macro_MVCMacroSuite,hex_control_payload_MVCPayloadSuite];
};
$hxClasses["hex.control.MVCControlSuite"] = hex_control_MVCControlSuite;
hex_control_MVCControlSuite.__name__ = ["hex","control","MVCControlSuite"];
hex_control_MVCControlSuite.prototype = {
	list: null
	,__class__: hex_control_MVCControlSuite
};
var hex_control_Request = function(executionPayloads) {
	this._executionPayloads = executionPayloads;
};
$hxClasses["hex.control.Request"] = hex_control_Request;
hex_control_Request.__name__ = ["hex","control","Request"];
hex_control_Request.prototype = {
	_executionPayloads: null
	,getExecutionPayloads: function() {
		return this._executionPayloads;
	}
	,clone: function() {
		return new hex_control_Request(this._executionPayloads);
	}
	,__class__: hex_control_Request
};
var hex_control_async_IAsyncCommand = function() { };
$hxClasses["hex.control.async.IAsyncCommand"] = hex_control_async_IAsyncCommand;
hex_control_async_IAsyncCommand.__name__ = ["hex","control","async","IAsyncCommand"];
hex_control_async_IAsyncCommand.__interfaces__ = [hex_control_command_ICommand];
hex_control_async_IAsyncCommand.prototype = {
	get_wasUsed: null
	,get_isRunning: null
	,get_hasCompleted: null
	,get_hasFailed: null
	,get_isCancelled: null
	,preExecute: null
	,cancel: null
	,addAsyncCommandListener: null
	,removeAsyncCommandListener: null
	,addCompleteHandler: null
	,removeCompleteHandler: null
	,addFailHandler: null
	,removeFailHandler: null
	,addCancelHandler: null
	,removeCancelHandler: null
	,wasUsed: null
	,isRunning: null
	,hasCompleted: null
	,hasFailed: null
	,isCancelled: null
	,__class__: hex_control_async_IAsyncCommand
	,__properties__: {get_isCancelled:"get_isCancelled",get_hasFailed:"get_hasFailed",get_hasCompleted:"get_hasCompleted",get_isRunning:"get_isRunning",get_wasUsed:"get_wasUsed"}
};
var hex_control_async_AsyncCommand = function() {
	this._status = "WAS_NEVER_USED";
	this._dispatcher = new hex_event_Dispatcher();
};
$hxClasses["hex.control.async.AsyncCommand"] = hex_control_async_AsyncCommand;
hex_control_async_AsyncCommand.__name__ = ["hex","control","async","AsyncCommand"];
hex_control_async_AsyncCommand.__interfaces__ = [hex_control_async_IAsyncCommand];
hex_control_async_AsyncCommand.isDetained = function(aSynCommand) {
	return hex_control_async_AsyncCommand._POOL.h.__keys__[aSynCommand.__id__] != null;
};
hex_control_async_AsyncCommand.detain = function(aSynCommand) {
	hex_control_async_AsyncCommand._POOL.set(aSynCommand,true);
};
hex_control_async_AsyncCommand.release = function(aSynCommand) {
	if(hex_control_async_AsyncCommand._POOL.h.__keys__[aSynCommand.__id__] != null) hex_control_async_AsyncCommand._POOL.remove(aSynCommand);
};
hex_control_async_AsyncCommand.prototype = {
	_status: null
	,_dispatcher: null
	,_owner: null
	,preExecute: function() {
		this.get_wasUsed() && this._throwExecutionIllegalStateError();
		this._status = "IS_RUNNING";
		hex_control_async_AsyncCommand.detain(this);
	}
	,cancel: function() {
		this._handleCancel();
	}
	,addAsyncCommandListener: function(listener) {
		this.addCompleteHandler(listener,$bind(listener,listener.onAsyncCommandComplete));
		this.addFailHandler(listener,$bind(listener,listener.onAsyncCommandFail));
		this.addCancelHandler(listener,$bind(listener,listener.onAsyncCommandCancel));
	}
	,removeAsyncCommandListener: function(listener) {
		this.removeCompleteHandler(listener,$bind(listener,listener.onAsyncCommandComplete));
		this.removeFailHandler(listener,$bind(listener,listener.onAsyncCommandFail));
		this.removeCancelHandler(listener,$bind(listener,listener.onAsyncCommandCancel));
	}
	,addCompleteHandler: function(scope,callback) {
		if(this.get_hasCompleted()) callback(this); else this._dispatcher.addHandler(hex_control_async_AsyncCommandMessage.COMPLETE,scope,callback);
	}
	,removeCompleteHandler: function(scope,callback) {
		this._dispatcher.removeHandler(hex_control_async_AsyncCommandMessage.COMPLETE,scope,callback);
	}
	,addFailHandler: function(scope,callback) {
		if(this.get_hasFailed()) callback(this); else this._dispatcher.addHandler(hex_control_async_AsyncCommandMessage.FAIL,scope,callback);
	}
	,removeFailHandler: function(scope,callback) {
		this._dispatcher.removeHandler(hex_control_async_AsyncCommandMessage.FAIL,scope,callback);
	}
	,addCancelHandler: function(scope,callback) {
		if(this.get_isCancelled()) callback(this); else this._dispatcher.addHandler(hex_control_async_AsyncCommandMessage.CANCEL,scope,callback);
	}
	,removeCancelHandler: function(scope,callback) {
		this._dispatcher.removeHandler(hex_control_async_AsyncCommandMessage.CANCEL,scope,callback);
	}
	,_handleComplete: function() {
		this.get_wasUsed() && this._status != "IS_RUNNING" && this._throwIllegalStateError("_handleComplete");
		this._status = "IS_COMPLETED";
		this._dispatcher.dispatch(hex_control_async_AsyncCommandMessage.COMPLETE,[this]);
		this._release();
	}
	,_handleFail: function() {
		this.get_wasUsed() && this._status != "IS_RUNNING" && this._throwIllegalStateError("_handleFail");
		this._status = "IS_FAILED";
		this._dispatcher.dispatch(hex_control_async_AsyncCommandMessage.FAIL,[this]);
		this._release();
	}
	,_handleCancel: function() {
		this.get_wasUsed() && this._status != "IS_RUNNING" && this._throwIllegalStateError("_handleCancel");
		this._status = "IS_CANCELLED";
		this._dispatcher.dispatch(hex_control_async_AsyncCommandMessage.CANCEL,[this]);
		this._release();
	}
	,wasUsed: null
	,get_wasUsed: function() {
		return this._status != "WAS_NEVER_USED";
	}
	,isRunning: null
	,get_isRunning: function() {
		return this._status == "IS_RUNNING";
	}
	,hasCompleted: null
	,get_hasCompleted: function() {
		return this._status == "IS_COMPLETED";
	}
	,hasFailed: null
	,get_hasFailed: function() {
		return this._status == "IS_FAILED";
	}
	,isCancelled: null
	,get_isCancelled: function() {
		return this._status == "IS_CANCELLED";
	}
	,execute: function(request) {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".execute must be overridden",{ fileName : "AsyncCommand.hx", lineNumber : 176, className : "hex.control.async.AsyncCommand", methodName : "execute"}));
	}
	,getResult: function() {
		return null;
	}
	,getReturnedExecutionPayload: function() {
		return null;
	}
	,getOwner: function() {
		return this._owner;
	}
	,setOwner: function(owner) {
		if(this._owner == null) this._owner = owner;
	}
	,getExecuteMethod: function() {
		return $bind(this,this.execute);
	}
	,_removeAllListeners: function() {
		this._dispatcher.removeAllListeners();
	}
	,_throwExecutionIllegalStateError: function() {
		var msg = "";
		if(this.get_isRunning()) msg = "'execute' call failed. This command is already processing."; else if(this.get_isCancelled()) msg = "'execute' call failed. This command is cancelled."; else if(this.get_hasCompleted()) msg = "'execute' call failed. This command is completed and can't be executed twice."; else if(this.get_hasFailed()) msg = "'execute' call failed. This command has failed and can't be executed twice."; else if(!this.get_wasUsed()) msg = "'execute' call failed. 'preExecute' should be called before.";
		this._release();
		throw new js__$Boot_HaxeError(new hex_error_IllegalStateException(msg,{ fileName : "AsyncCommand.hx", lineNumber : 240, className : "hex.control.async.AsyncCommand", methodName : "_throwExecutionIllegalStateError"}));
	}
	,_throwIllegalStateError: function(process) {
		var msg = "";
		if(this.get_isCancelled()) msg = "'" + process + "' call failed in '" + hex_log_Stringifier.stringify(this) + "'. This command was already cancelled."; else if(this.get_hasCompleted()) msg = "'" + process + "' call failed in '" + hex_log_Stringifier.stringify(this) + "'. This command was already completed."; else if(this.get_hasFailed()) msg = "'" + process + "' call failed in '" + hex_log_Stringifier.stringify(this) + "'. This command has already failed.";
		this._release();
		throw new js__$Boot_HaxeError(new hex_error_IllegalStateException(msg,{ fileName : "AsyncCommand.hx", lineNumber : 261, className : "hex.control.async.AsyncCommand", methodName : "_throwIllegalStateError"}));
	}
	,_release: function() {
		this._removeAllListeners();
		hex_control_async_AsyncCommand.release(this);
	}
	,__class__: hex_control_async_AsyncCommand
	,__properties__: {get_isCancelled:"get_isCancelled",get_hasFailed:"get_hasFailed",get_hasCompleted:"get_hasCompleted",get_isRunning:"get_isRunning",get_wasUsed:"get_wasUsed"}
};
var hex_control_async_AsyncCommandMessage = function() {
};
$hxClasses["hex.control.async.AsyncCommandMessage"] = hex_control_async_AsyncCommandMessage;
hex_control_async_AsyncCommandMessage.__name__ = ["hex","control","async","AsyncCommandMessage"];
hex_control_async_AsyncCommandMessage.prototype = {
	__class__: hex_control_async_AsyncCommandMessage
};
var hex_control_async_AsyncCommandTest = function() { };
$hxClasses["hex.control.async.AsyncCommandTest"] = hex_control_async_AsyncCommandTest;
hex_control_async_AsyncCommandTest.__name__ = ["hex","control","async","AsyncCommandTest"];
hex_control_async_AsyncCommandTest.prototype = {
	_asyncCommand: null
	,setUp: function() {
		this._asyncCommand = new hex_control_async__$AsyncCommandTest_MockAsyncCommand();
	}
	,tearDown: function() {
		this._asyncCommand = null;
	}
	,testCallPreExecuteTwice: function() {
		hex_unittest_assertion_Assert.isFalse(this._asyncCommand.get_wasUsed(),"'wasUsed' property should return false",{ fileName : "AsyncCommandTest.hx", lineNumber : 38, className : "hex.control.async.AsyncCommandTest", methodName : "testCallPreExecuteTwice"});
		hex_unittest_assertion_Assert.isFalse(this._asyncCommand.get_isRunning(),"'isRunning' property should return false",{ fileName : "AsyncCommandTest.hx", lineNumber : 39, className : "hex.control.async.AsyncCommandTest", methodName : "testCallPreExecuteTwice"});
		this._asyncCommand.preExecute();
		hex_unittest_assertion_Assert.isTrue(this._asyncCommand.get_wasUsed(),"'wasUsed' property should return true",{ fileName : "AsyncCommandTest.hx", lineNumber : 42, className : "hex.control.async.AsyncCommandTest", methodName : "testCallPreExecuteTwice"});
		hex_unittest_assertion_Assert.isTrue(this._asyncCommand.get_isRunning(),"'isRunning' property should return true",{ fileName : "AsyncCommandTest.hx", lineNumber : 43, className : "hex.control.async.AsyncCommandTest", methodName : "testCallPreExecuteTwice"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this._asyncCommand,($_=this._asyncCommand,$bind($_,$_.preExecute)),[],"AsyncCommand should throw IllegalStateException when calling preExecute method twice",{ fileName : "AsyncCommandTest.hx", lineNumber : 44, className : "hex.control.async.AsyncCommandTest", methodName : "testCallPreExecuteTwice"});
	}
	,testGetResult: function() {
		hex_unittest_assertion_Assert.isNull(this._asyncCommand.getResult(),"'getResult' should return null",{ fileName : "AsyncCommandTest.hx", lineNumber : 50, className : "hex.control.async.AsyncCommandTest", methodName : "testGetResult"});
	}
	,testGetOwner: function() {
		hex_unittest_assertion_Assert.isNull(this._asyncCommand.getOwner(),"'getOwner' should return null",{ fileName : "AsyncCommandTest.hx", lineNumber : 56, className : "hex.control.async.AsyncCommandTest", methodName : "testGetOwner"});
		var module = new hex_control_async__$AsyncCommandTest_MockModule();
		this._asyncCommand.setOwner(module);
		hex_unittest_assertion_Assert.equals(module,this._asyncCommand.getOwner(),"'getOwner' should return defined owner",{ fileName : "AsyncCommandTest.hx", lineNumber : 60, className : "hex.control.async.AsyncCommandTest", methodName : "testGetOwner"});
	}
	,testExecute: function() {
		var asyncCommand = new hex_control_async_AsyncCommand();
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_VirtualMethodException,asyncCommand,$bind(asyncCommand,asyncCommand.execute),[],"'execute' should throw VirtualMethodException",{ fileName : "AsyncCommandTest.hx", lineNumber : 67, className : "hex.control.async.AsyncCommandTest", methodName : "testExecute"});
	}
	,testCancel: function() {
		var listener = new hex_control_async__$AsyncCommandTest_MockAsyncCommandListener();
		var handler = new hex_control_async__$AsyncCommandTest_MockAsyncCommandListener();
		var anotherHandler = new hex_control_async__$AsyncCommandTest_MockAsyncCommandListener();
		this._asyncCommand.addAsyncCommandListener(listener);
		this._asyncCommand.addCancelHandler(handler,$bind(handler,handler.onAsyncCommandCancel));
		hex_unittest_assertion_Assert.isFalse(this._asyncCommand.get_isCancelled(),"'isCancelled' property should return false",{ fileName : "AsyncCommandTest.hx", lineNumber : 80, className : "hex.control.async.AsyncCommandTest", methodName : "testCancel"});
		this._asyncCommand.cancel();
		hex_unittest_assertion_Assert.isTrue(this._asyncCommand.get_isCancelled(),"'isCancelled' property should return true",{ fileName : "AsyncCommandTest.hx", lineNumber : 82, className : "hex.control.async.AsyncCommandTest", methodName : "testCancel"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this._asyncCommand,($_=this._asyncCommand,$bind($_,$_.cancel)),[],"AsyncCommand should throw IllegalStateException when calling cancel twice",{ fileName : "AsyncCommandTest.hx", lineNumber : 83, className : "hex.control.async.AsyncCommandTest", methodName : "testCancel"});
		hex_unittest_assertion_Assert.equals(1,listener.cancelCallbackCount,"'listener' callback should be triggered once",{ fileName : "AsyncCommandTest.hx", lineNumber : 85, className : "hex.control.async.AsyncCommandTest", methodName : "testCancel"});
		hex_unittest_assertion_Assert.equals(1,handler.cancelCallbackCount,"'handler' callback should be triggered once",{ fileName : "AsyncCommandTest.hx", lineNumber : 86, className : "hex.control.async.AsyncCommandTest", methodName : "testCancel"});
		hex_unittest_assertion_Assert.equals(this._asyncCommand,listener.lastCommandReceived,"command received by listener should be asyncCommand instance",{ fileName : "AsyncCommandTest.hx", lineNumber : 88, className : "hex.control.async.AsyncCommandTest", methodName : "testCancel"});
		hex_unittest_assertion_Assert.equals(this._asyncCommand,handler.lastCommandReceived,"command received by handler should be asyncCommand instance",{ fileName : "AsyncCommandTest.hx", lineNumber : 89, className : "hex.control.async.AsyncCommandTest", methodName : "testCancel"});
		this._asyncCommand.addCancelHandler(anotherHandler,$bind(anotherHandler,anotherHandler.onAsyncCommandCancel));
		hex_unittest_assertion_Assert.equals(1,anotherHandler.cancelCallbackCount,"'post-handler' callback should be triggered once",{ fileName : "AsyncCommandTest.hx", lineNumber : 92, className : "hex.control.async.AsyncCommandTest", methodName : "testCancel"});
		hex_unittest_assertion_Assert.equals(this._asyncCommand,anotherHandler.lastCommandReceived,"command received by post-handler should be asyncCommand instance",{ fileName : "AsyncCommandTest.hx", lineNumber : 93, className : "hex.control.async.AsyncCommandTest", methodName : "testCancel"});
	}
	,testComplete: function() {
		var listener = new hex_control_async__$AsyncCommandTest_MockAsyncCommandListener();
		var handler = new hex_control_async__$AsyncCommandTest_MockAsyncCommandListener();
		var anotherHandler = new hex_control_async__$AsyncCommandTest_MockAsyncCommandListener();
		this._asyncCommand.addAsyncCommandListener(listener);
		this._asyncCommand.addCompleteHandler(handler,$bind(handler,handler.onAsyncCommandComplete));
		hex_unittest_assertion_Assert.isFalse(this._asyncCommand.get_hasCompleted(),"'hasCompleted' property should return false",{ fileName : "AsyncCommandTest.hx", lineNumber : 106, className : "hex.control.async.AsyncCommandTest", methodName : "testComplete"});
		this._asyncCommand.execute();
		hex_unittest_assertion_Assert.isTrue(this._asyncCommand.get_hasCompleted(),"'hasCompleted' property should return true",{ fileName : "AsyncCommandTest.hx", lineNumber : 108, className : "hex.control.async.AsyncCommandTest", methodName : "testComplete"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this._asyncCommand,($_=this._asyncCommand,$bind($_,$_.execute)),[],"AsyncCommand should throw IllegalStateException when calling execute twice",{ fileName : "AsyncCommandTest.hx", lineNumber : 109, className : "hex.control.async.AsyncCommandTest", methodName : "testComplete"});
		hex_unittest_assertion_Assert.equals(1,listener.completeCallbackCount,"'listener' callback should be triggered once",{ fileName : "AsyncCommandTest.hx", lineNumber : 111, className : "hex.control.async.AsyncCommandTest", methodName : "testComplete"});
		hex_unittest_assertion_Assert.equals(1,handler.completeCallbackCount,"'handler' callback should be triggered once",{ fileName : "AsyncCommandTest.hx", lineNumber : 112, className : "hex.control.async.AsyncCommandTest", methodName : "testComplete"});
		hex_unittest_assertion_Assert.equals(this._asyncCommand,listener.lastCommandReceived,"command received by listener should be asyncCommand instance",{ fileName : "AsyncCommandTest.hx", lineNumber : 114, className : "hex.control.async.AsyncCommandTest", methodName : "testComplete"});
		hex_unittest_assertion_Assert.equals(this._asyncCommand,handler.lastCommandReceived,"command received by handler should be asyncCommand instance",{ fileName : "AsyncCommandTest.hx", lineNumber : 115, className : "hex.control.async.AsyncCommandTest", methodName : "testComplete"});
		this._asyncCommand.addCompleteHandler(anotherHandler,$bind(anotherHandler,anotherHandler.onAsyncCommandComplete));
		hex_unittest_assertion_Assert.equals(1,anotherHandler.completeCallbackCount,"'post-handler' callback should be triggered once",{ fileName : "AsyncCommandTest.hx", lineNumber : 118, className : "hex.control.async.AsyncCommandTest", methodName : "testComplete"});
		hex_unittest_assertion_Assert.equals(this._asyncCommand,anotherHandler.lastCommandReceived,"command received by post-handler should be asyncCommand instance",{ fileName : "AsyncCommandTest.hx", lineNumber : 119, className : "hex.control.async.AsyncCommandTest", methodName : "testComplete"});
	}
	,testFail: function() {
		var listener = new hex_control_async__$AsyncCommandTest_MockAsyncCommandListener();
		var handler = new hex_control_async__$AsyncCommandTest_MockAsyncCommandListener();
		var anotherHandler = new hex_control_async__$AsyncCommandTest_MockAsyncCommandListener();
		this._asyncCommand.addAsyncCommandListener(listener);
		this._asyncCommand.addFailHandler(handler,$bind(handler,handler.onAsyncCommandFail));
		hex_unittest_assertion_Assert.isFalse(this._asyncCommand.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "AsyncCommandTest.hx", lineNumber : 132, className : "hex.control.async.AsyncCommandTest", methodName : "testFail"});
		this._asyncCommand.fail();
		hex_unittest_assertion_Assert.isTrue(this._asyncCommand.get_hasFailed(),"'hasFailed' property should return true",{ fileName : "AsyncCommandTest.hx", lineNumber : 134, className : "hex.control.async.AsyncCommandTest", methodName : "testFail"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this._asyncCommand,($_=this._asyncCommand,$bind($_,$_.fail)),[],"AsyncCommand should throw IllegalStateException when failing twice",{ fileName : "AsyncCommandTest.hx", lineNumber : 135, className : "hex.control.async.AsyncCommandTest", methodName : "testFail"});
		hex_unittest_assertion_Assert.equals(1,listener.failCallbackCount,"'listener' callback should be triggered once",{ fileName : "AsyncCommandTest.hx", lineNumber : 137, className : "hex.control.async.AsyncCommandTest", methodName : "testFail"});
		hex_unittest_assertion_Assert.equals(1,handler.failCallbackCount,"'handler' callback should be triggered once",{ fileName : "AsyncCommandTest.hx", lineNumber : 138, className : "hex.control.async.AsyncCommandTest", methodName : "testFail"});
		hex_unittest_assertion_Assert.equals(this._asyncCommand,listener.lastCommandReceived,"command received by listener should be asyncCommand instance",{ fileName : "AsyncCommandTest.hx", lineNumber : 140, className : "hex.control.async.AsyncCommandTest", methodName : "testFail"});
		hex_unittest_assertion_Assert.equals(this._asyncCommand,handler.lastCommandReceived,"command received by handler should be asyncCommand instance",{ fileName : "AsyncCommandTest.hx", lineNumber : 141, className : "hex.control.async.AsyncCommandTest", methodName : "testFail"});
		this._asyncCommand.addFailHandler(anotherHandler,$bind(anotherHandler,anotherHandler.onAsyncCommandFail));
		hex_unittest_assertion_Assert.equals(1,anotherHandler.failCallbackCount,"'post-handler' callback should be triggered once",{ fileName : "AsyncCommandTest.hx", lineNumber : 144, className : "hex.control.async.AsyncCommandTest", methodName : "testFail"});
		hex_unittest_assertion_Assert.equals(this._asyncCommand,anotherHandler.lastCommandReceived,"command received by post-handler should be asyncCommand instance",{ fileName : "AsyncCommandTest.hx", lineNumber : 145, className : "hex.control.async.AsyncCommandTest", methodName : "testFail"});
	}
	,__class__: hex_control_async_AsyncCommandTest
};
var hex_control_async__$AsyncCommandTest_MockAsyncCommand = function() {
	hex_control_async_AsyncCommand.call(this);
};
$hxClasses["hex.control.async._AsyncCommandTest.MockAsyncCommand"] = hex_control_async__$AsyncCommandTest_MockAsyncCommand;
hex_control_async__$AsyncCommandTest_MockAsyncCommand.__name__ = ["hex","control","async","_AsyncCommandTest","MockAsyncCommand"];
hex_control_async__$AsyncCommandTest_MockAsyncCommand.__super__ = hex_control_async_AsyncCommand;
hex_control_async__$AsyncCommandTest_MockAsyncCommand.prototype = $extend(hex_control_async_AsyncCommand.prototype,{
	execute: function(request) {
		this._handleComplete();
	}
	,fail: function() {
		this._handleFail();
	}
	,__class__: hex_control_async__$AsyncCommandTest_MockAsyncCommand
});
var hex_control_async_IAsyncCommandListener = function() { };
$hxClasses["hex.control.async.IAsyncCommandListener"] = hex_control_async_IAsyncCommandListener;
hex_control_async_IAsyncCommandListener.__name__ = ["hex","control","async","IAsyncCommandListener"];
hex_control_async_IAsyncCommandListener.prototype = {
	onAsyncCommandComplete: null
	,onAsyncCommandFail: null
	,onAsyncCommandCancel: null
	,__class__: hex_control_async_IAsyncCommandListener
};
var hex_control_async__$AsyncCommandTest_MockAsyncCommandListener = function() {
	this.cancelCallbackCount = 0;
	this.failCallbackCount = 0;
	this.completeCallbackCount = 0;
};
$hxClasses["hex.control.async._AsyncCommandTest.MockAsyncCommandListener"] = hex_control_async__$AsyncCommandTest_MockAsyncCommandListener;
hex_control_async__$AsyncCommandTest_MockAsyncCommandListener.__name__ = ["hex","control","async","_AsyncCommandTest","MockAsyncCommandListener"];
hex_control_async__$AsyncCommandTest_MockAsyncCommandListener.__interfaces__ = [hex_control_async_IAsyncCommandListener];
hex_control_async__$AsyncCommandTest_MockAsyncCommandListener.prototype = {
	lastCommandReceived: null
	,completeCallbackCount: null
	,failCallbackCount: null
	,cancelCallbackCount: null
	,onAsyncCommandComplete: function(cmd) {
		this.lastCommandReceived = cmd;
		this.completeCallbackCount++;
	}
	,onAsyncCommandFail: function(cmd) {
		this.lastCommandReceived = cmd;
		this.failCallbackCount++;
	}
	,onAsyncCommandCancel: function(cmd) {
		this.lastCommandReceived = cmd;
		this.cancelCallbackCount++;
	}
	,__class__: hex_control_async__$AsyncCommandTest_MockAsyncCommandListener
};
var hex_control_async__$AsyncCommandTest_MockModule = function() {
};
$hxClasses["hex.control.async._AsyncCommandTest.MockModule"] = hex_control_async__$AsyncCommandTest_MockModule;
hex_control_async__$AsyncCommandTest_MockModule.__name__ = ["hex","control","async","_AsyncCommandTest","MockModule"];
hex_control_async__$AsyncCommandTest_MockModule.__interfaces__ = [hex_module_IModule];
hex_control_async__$AsyncCommandTest_MockModule.prototype = {
	initialize: function() {
	}
	,isInitialized: null
	,get_isInitialized: function() {
		return false;
	}
	,release: function() {
	}
	,isReleased: null
	,get_isReleased: function() {
		return false;
	}
	,dispatchPublicMessage: function(messageType,data) {
	}
	,addHandler: function(messageType,scope,callback) {
	}
	,removeHandler: function(messageType,scope,callback) {
	}
	,getDomain: function() {
		return null;
	}
	,getBasicInjector: function() {
		return null;
	}
	,getLogger: function() {
		return null;
	}
	,__class__: hex_control_async__$AsyncCommandTest_MockModule
	,__properties__: {get_isReleased:"get_isReleased",get_isInitialized:"get_isInitialized"}
};
var hex_control_async_AsyncCommandUtil = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException("'AsyncCommandUtil' class can't be instantiated.",{ fileName : "AsyncCommandUtil.hx", lineNumber : 14, className : "hex.control.async.AsyncCommandUtil", methodName : "new"}));
};
$hxClasses["hex.control.async.AsyncCommandUtil"] = hex_control_async_AsyncCommandUtil;
hex_control_async_AsyncCommandUtil.__name__ = ["hex","control","async","AsyncCommandUtil"];
hex_control_async_AsyncCommandUtil.addListenersToAsyncCommand = function(handlers,methodToAddListener) {
	var _g = 0;
	while(_g < handlers.length) {
		var handler = handlers[_g];
		++_g;
		methodToAddListener(handler.scope,handler.callback);
	}
};
hex_control_async_AsyncCommandUtil.prototype = {
	__class__: hex_control_async_AsyncCommandUtil
};
var hex_control_async_AsyncCommandUtilTest = function() { };
$hxClasses["hex.control.async.AsyncCommandUtilTest"] = hex_control_async_AsyncCommandUtilTest;
hex_control_async_AsyncCommandUtilTest.__name__ = ["hex","control","async","AsyncCommandUtilTest"];
hex_control_async_AsyncCommandUtilTest.prototype = {
	testAddListenersToAsyncCommand: function() {
		var listener0 = new hex_control_async__$AsyncCommandUtilTest_ASyncCommandListener();
		var listener1 = new hex_control_async__$AsyncCommandUtilTest_ASyncCommandListener();
		var listener2 = new hex_control_async__$AsyncCommandUtilTest_ASyncCommandListener();
		var mockAsyncCommandForTestingListeners = new hex_control_async__$AsyncCommandUtilTest_MockAsyncCommandForTestingListeners();
		var listeners = [new hex_control_async_AsyncHandler(listener0,$bind(listener0,listener0.onAsyncCommandComplete)),new hex_control_async_AsyncHandler(listener1,$bind(listener1,listener1.onAsyncCommandFail)),new hex_control_async_AsyncHandler(listener2,$bind(listener2,listener2.onAsyncCommandCancel))];
		hex_control_async_AsyncCommandUtil.addListenersToAsyncCommand(listeners,$bind(mockAsyncCommandForTestingListeners,mockAsyncCommandForTestingListeners.addCompleteHandler));
		hex_unittest_assertion_Assert.deepEquals([$bind(listener0,listener0.onAsyncCommandComplete),$bind(listener1,listener1.onAsyncCommandFail),$bind(listener2,listener2.onAsyncCommandCancel)],mockAsyncCommandForTestingListeners.callback,"'CommandExecutor.mapPayload' should map right callbacks",{ fileName : "AsyncCommandUtilTest.hx", lineNumber : 31, className : "hex.control.async.AsyncCommandUtilTest", methodName : "testAddListenersToAsyncCommand"});
		hex_unittest_assertion_Assert.deepEquals([listener0,listener1,listener2],mockAsyncCommandForTestingListeners.scope,"'CommandExecutor.mapPayload' should map right scopes",{ fileName : "AsyncCommandUtilTest.hx", lineNumber : 35, className : "hex.control.async.AsyncCommandUtilTest", methodName : "testAddListenersToAsyncCommand"});
	}
	,__class__: hex_control_async_AsyncCommandUtilTest
};
var hex_control_async__$AsyncCommandUtilTest_MockAsyncCommand = function() {
};
$hxClasses["hex.control.async._AsyncCommandUtilTest.MockAsyncCommand"] = hex_control_async__$AsyncCommandUtilTest_MockAsyncCommand;
hex_control_async__$AsyncCommandUtilTest_MockAsyncCommand.__name__ = ["hex","control","async","_AsyncCommandUtilTest","MockAsyncCommand"];
hex_control_async__$AsyncCommandUtilTest_MockAsyncCommand.__interfaces__ = [hex_control_async_IAsyncCommand];
hex_control_async__$AsyncCommandUtilTest_MockAsyncCommand.prototype = {
	preExecute: function() {
	}
	,cancel: function() {
	}
	,addAsyncCommandListener: function(listener) {
	}
	,removeAsyncCommandListener: function(listener) {
	}
	,addCompleteHandler: function(scope,callback) {
	}
	,removeCompleteHandler: function(scope,callback) {
	}
	,addFailHandler: function(scope,callback) {
	}
	,removeFailHandler: function(scope,callback) {
	}
	,addCancelHandler: function(scope,callback) {
	}
	,removeCancelHandler: function(scope,callback) {
	}
	,handleComplete: function() {
	}
	,handleFail: function() {
	}
	,handleCancel: function() {
	}
	,execute: function(request) {
	}
	,getResult: function() {
		return null;
	}
	,getReturnedExecutionPayload: function() {
		return null;
	}
	,getOwner: function() {
		return null;
	}
	,setOwner: function(owner) {
	}
	,wasUsed: null
	,get_wasUsed: function() {
		return false;
	}
	,isRunning: null
	,get_isRunning: function() {
		return false;
	}
	,hasCompleted: null
	,get_hasCompleted: function() {
		return false;
	}
	,hasFailed: null
	,get_hasFailed: function() {
		return false;
	}
	,isCancelled: null
	,get_isCancelled: function() {
		return false;
	}
	,getExecuteMethod: function() {
		return $bind(this,this.execute);
	}
	,__class__: hex_control_async__$AsyncCommandUtilTest_MockAsyncCommand
	,__properties__: {get_isCancelled:"get_isCancelled",get_hasFailed:"get_hasFailed",get_hasCompleted:"get_hasCompleted",get_isRunning:"get_isRunning",get_wasUsed:"get_wasUsed"}
};
var hex_control_async__$AsyncCommandUtilTest_MockAsyncCommandForTestingListeners = function() {
	this.callback = [];
	this.scope = [];
	hex_control_async__$AsyncCommandUtilTest_MockAsyncCommand.call(this);
};
$hxClasses["hex.control.async._AsyncCommandUtilTest.MockAsyncCommandForTestingListeners"] = hex_control_async__$AsyncCommandUtilTest_MockAsyncCommandForTestingListeners;
hex_control_async__$AsyncCommandUtilTest_MockAsyncCommandForTestingListeners.__name__ = ["hex","control","async","_AsyncCommandUtilTest","MockAsyncCommandForTestingListeners"];
hex_control_async__$AsyncCommandUtilTest_MockAsyncCommandForTestingListeners.__super__ = hex_control_async__$AsyncCommandUtilTest_MockAsyncCommand;
hex_control_async__$AsyncCommandUtilTest_MockAsyncCommandForTestingListeners.prototype = $extend(hex_control_async__$AsyncCommandUtilTest_MockAsyncCommand.prototype,{
	scope: null
	,callback: null
	,addCompleteHandler: function(scope,callback) {
		this.scope.push(scope);
		this.callback.push(callback);
	}
	,__class__: hex_control_async__$AsyncCommandUtilTest_MockAsyncCommandForTestingListeners
});
var hex_control_async__$AsyncCommandUtilTest_ASyncCommandListener = function() {
};
$hxClasses["hex.control.async._AsyncCommandUtilTest.ASyncCommandListener"] = hex_control_async__$AsyncCommandUtilTest_ASyncCommandListener;
hex_control_async__$AsyncCommandUtilTest_ASyncCommandListener.__name__ = ["hex","control","async","_AsyncCommandUtilTest","ASyncCommandListener"];
hex_control_async__$AsyncCommandUtilTest_ASyncCommandListener.__interfaces__ = [hex_control_async_IAsyncCommandListener];
hex_control_async__$AsyncCommandUtilTest_ASyncCommandListener.prototype = {
	onAsyncCommandComplete: function(cmd) {
	}
	,onAsyncCommandFail: function(cmd) {
	}
	,onAsyncCommandCancel: function(cmd) {
	}
	,__class__: hex_control_async__$AsyncCommandUtilTest_ASyncCommandListener
};
var hex_control_async_AsyncHandler = function(scope,callback) {
	this.scope = scope;
	this.callback = callback;
};
$hxClasses["hex.control.async.AsyncHandler"] = hex_control_async_AsyncHandler;
hex_control_async_AsyncHandler.__name__ = ["hex","control","async","AsyncHandler"];
hex_control_async_AsyncHandler.prototype = {
	scope: null
	,callback: null
	,__class__: hex_control_async_AsyncHandler
};
var hex_control_async_MVCAsyncSuite = function() {
	this.list = [hex_control_async_AsyncCommandTest,hex_control_async_AsyncCommandUtilTest];
};
$hxClasses["hex.control.async.MVCAsyncSuite"] = hex_control_async_MVCAsyncSuite;
hex_control_async_MVCAsyncSuite.__name__ = ["hex","control","async","MVCAsyncSuite"];
hex_control_async_MVCAsyncSuite.prototype = {
	list: null
	,__class__: hex_control_async_MVCAsyncSuite
};
var hex_control_command_BasicCommand = function() {
};
$hxClasses["hex.control.command.BasicCommand"] = hex_control_command_BasicCommand;
hex_control_command_BasicCommand.__name__ = ["hex","control","command","BasicCommand"];
hex_control_command_BasicCommand.__interfaces__ = [hex_control_command_ICommand];
hex_control_command_BasicCommand.prototype = {
	_owner: null
	,execute: function(request) {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".execute must be overridden",{ fileName : "BasicCommand.hx", lineNumber : 24, className : "hex.control.command.BasicCommand", methodName : "execute"}));
	}
	,getResult: function() {
		return null;
	}
	,getReturnedExecutionPayload: function() {
		return null;
	}
	,getOwner: function() {
		return this._owner;
	}
	,setOwner: function(owner) {
		this._owner = owner;
	}
	,getExecuteMethod: function() {
		return $bind(this,this.execute);
	}
	,__class__: hex_control_command_BasicCommand
};
var hex_control_command_CommandExecutor = function(injector,module) {
	this._injector = injector;
	this._module = module;
};
$hxClasses["hex.control.command.CommandExecutor"] = hex_control_command_CommandExecutor;
hex_control_command_CommandExecutor.__name__ = ["hex","control","command","CommandExecutor"];
hex_control_command_CommandExecutor.prototype = {
	_injector: null
	,_module: null
	,executeCommand: function(mapping,request,mappingRemoval) {
		var payloads = mapping.getPayloads();
		if(request != null) if(payloads != null) payloads = payloads.concat(request.getExecutionPayloads()); else payloads = request.getExecutionPayloads();
		if(mapping.get_hasMappingResult()) if(payloads != null) payloads = payloads.concat(mapping.getPayloadResult()); else payloads = mapping.getPayloadResult();
		if(payloads != null) hex_control_payload_PayloadUtil.mapPayload(payloads,this._injector);
		var command = null;
		if(!mapping.get_hasGuard() || hex_control_guard_GuardUtil.guardsApprove(mapping.getGuards(),this._injector)) {
			if(mappingRemoval != null) mappingRemoval();
			command = this._injector.getOrCreateNewInstance(mapping.getCommandClass());
			mapping.setLastCommandInstance(command);
		}
		if(payloads != null) hex_control_payload_PayloadUtil.unmapPayload(payloads,this._injector);
		if(command != null) {
			command.setOwner(this._module);
			var isAsync = js_Boot.__instanceof(command,hex_control_async_IAsyncCommand);
			if(isAsync) {
				var asynCommand;
				asynCommand = js_Boot.__cast(command , hex_control_async_IAsyncCommand);
				asynCommand.preExecute();
				if(mapping.get_hasCompleteHandler()) hex_control_async_AsyncCommandUtil.addListenersToAsyncCommand(mapping.getCompleteHandlers(),$bind(asynCommand,asynCommand.addCompleteHandler));
				if(mapping.get_hasFailHandler()) hex_control_async_AsyncCommandUtil.addListenersToAsyncCommand(mapping.getFailHandlers(),$bind(asynCommand,asynCommand.addFailHandler));
				if(mapping.get_hasCancelHandler()) hex_control_async_AsyncCommandUtil.addListenersToAsyncCommand(mapping.getCancelHandlers(),$bind(asynCommand,asynCommand.addCancelHandler));
			}
			Reflect.callMethod(command,command.getExecuteMethod(),[request]);
		}
	}
	,__class__: hex_control_command_CommandExecutor
};
var hex_control_command_CommandExecutorTest = function() { };
$hxClasses["hex.control.command.CommandExecutorTest"] = hex_control_command_CommandExecutorTest;
hex_control_command_CommandExecutorTest.__name__ = ["hex","control","command","CommandExecutorTest"];
hex_control_command_CommandExecutorTest.prototype = {
	_commandExecutor: null
	,_injector: null
	,_module: null
	,setUp: function() {
		this._injector = new hex_control_command__$CommandExecutorTest_MockDependencyInjectorForMapping();
		this._module = new hex_module_MockModule();
		this._commandExecutor = new hex_control_command_CommandExecutor(this._injector,this._module);
	}
	,tearDown: function() {
		this._injector = null;
		this._module = null;
		this._commandExecutor = null;
	}
	,textExecuteCommand: function() {
		var commandMapping = new hex_control_command_CommandMapping(hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution);
		var listener0 = new hex_control_command__$CommandExecutorTest_ASyncCommandListener();
		var listener1 = new hex_control_command__$CommandExecutorTest_ASyncCommandListener();
		var listener2 = new hex_control_command__$CommandExecutorTest_ASyncCommandListener();
		var completeHandlers = [$bind(listener0,listener0.onAsyncCommandComplete),$bind(listener1,listener1.onAsyncCommandComplete),$bind(listener2,listener2.onAsyncCommandComplete)];
		var failHandlers = [$bind(listener0,listener0.onAsyncCommandFail),$bind(listener1,listener1.onAsyncCommandFail),$bind(listener2,listener2.onAsyncCommandFail)];
		var cancelHandlers = [$bind(listener0,listener0.onAsyncCommandCancel),$bind(listener1,listener1.onAsyncCommandCancel),$bind(listener2,listener2.onAsyncCommandCancel)];
		commandMapping.withCompleteHandlers(new hex_control_async_AsyncHandler(listener0,$bind(listener0,listener0.onAsyncCommandComplete))).withCompleteHandlers(new hex_control_async_AsyncHandler(listener1,$bind(listener1,listener1.onAsyncCommandComplete))).withCompleteHandlers(new hex_control_async_AsyncHandler(listener2,$bind(listener2,listener2.onAsyncCommandComplete)));
		commandMapping.withFailHandlers(new hex_control_async_AsyncHandler(listener0,$bind(listener0,listener0.onAsyncCommandFail))).withFailHandlers(new hex_control_async_AsyncHandler(listener1,$bind(listener1,listener1.onAsyncCommandFail))).withFailHandlers(new hex_control_async_AsyncHandler(listener2,$bind(listener2,listener2.onAsyncCommandFail)));
		commandMapping.withCancelHandlers(new hex_control_async_AsyncHandler(listener0,$bind(listener0,listener0.onAsyncCommandCancel))).withCancelHandlers(new hex_control_async_AsyncHandler(listener1,$bind(listener1,listener1.onAsyncCommandCancel))).withCancelHandlers(new hex_control_async_AsyncHandler(listener2,$bind(listener2,listener2.onAsyncCommandCancel)));
		var mockImplementation = new hex_control_command__$CommandExecutorTest_MockImplementation("mockImplementation");
		var mockPayload = new hex_control_payload_ExecutionPayload(mockImplementation,hex_control_command__$CommandExecutorTest_IMockType,"mockPayload");
		commandMapping.withPayloads([mockPayload]);
		var stringPayload = new hex_control_payload_ExecutionPayload("test",String,"stringPayload");
		var anotherMockImplementation = new hex_control_command__$CommandExecutorTest_MockImplementation("anotherMockImplementation");
		var anotherMockPayload = new hex_control_payload_ExecutionPayload(anotherMockImplementation,hex_control_command__$CommandExecutorTest_IMockType,"anotherMockPayload");
		var payloads = [stringPayload,anotherMockPayload];
		var mockForTriggeringUnmap = new hex_control_command__$CommandExecutorTest_MockForTriggeringUnmap(commandMapping);
		var request = new hex_control_Request(payloads);
		this._commandExecutor.executeCommand(commandMapping,request,$bind(mockForTriggeringUnmap,mockForTriggeringUnmap.unmap));
		hex_unittest_assertion_Assert.equals(1,hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.executeCallCount,"preExecute should be called once",{ fileName : "CommandExecutorTest.hx", lineNumber : 82, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
		hex_unittest_assertion_Assert.equals(1,hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.preExecuteCallCount,"execute should be called once",{ fileName : "CommandExecutorTest.hx", lineNumber : 83, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
		hex_unittest_assertion_Assert.equals(this._module,hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.owner,"owner should be the same",{ fileName : "CommandExecutorTest.hx", lineNumber : 85, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
		hex_unittest_assertion_Assert.equals(request,hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.request,"event should be the same",{ fileName : "CommandExecutorTest.hx", lineNumber : 86, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
		hex_unittest_assertion_Assert.deepEquals(request,hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.request,"event should be the same",{ fileName : "CommandExecutorTest.hx", lineNumber : 88, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
		hex_unittest_assertion_Assert.arrayContains(completeHandlers,hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.completeHandlers,"complete handlers should be added to async command instance",{ fileName : "CommandExecutorTest.hx", lineNumber : 90, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
		hex_unittest_assertion_Assert.arrayContains(failHandlers,hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.failHandlers,"fail handlers should be added to async command instance",{ fileName : "CommandExecutorTest.hx", lineNumber : 91, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
		hex_unittest_assertion_Assert.arrayContains(cancelHandlers,hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.cancelHandlers,"cancel handlers should be added to async command instance",{ fileName : "CommandExecutorTest.hx", lineNumber : 92, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
		hex_unittest_assertion_Assert.equals(1,this._injector.getOrCreateNewInstanceCallCount,"'injector.getOrCreateNewInstance' method should be called once",{ fileName : "CommandExecutorTest.hx", lineNumber : 94, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
		hex_unittest_assertion_Assert.equals(hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution,this._injector.getOrCreateNewInstanceCallParameter,"'injector.getOrCreateNewInstance' parameter should be command class",{ fileName : "CommandExecutorTest.hx", lineNumber : 95, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
		hex_unittest_assertion_Assert.equals(1,mockForTriggeringUnmap.unmapCallCount,"unmap handler should be called once",{ fileName : "CommandExecutorTest.hx", lineNumber : 96, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
		hex_unittest_assertion_Assert.deepEquals([[mockImplementation,hex_control_command__$CommandExecutorTest_IMockType,"mockPayload"],["test",String,"stringPayload"],[anotherMockImplementation,hex_control_command__$CommandExecutorTest_IMockType,"anotherMockPayload"]],this._injector.mappedPayloads,"'CommandExecutor.mapPayload' should map right values",{ fileName : "CommandExecutorTest.hx", lineNumber : 98, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
		hex_unittest_assertion_Assert.deepEquals([[hex_control_command__$CommandExecutorTest_IMockType,"mockPayload"],[String,"stringPayload"],[hex_control_command__$CommandExecutorTest_IMockType,"anotherMockPayload"]],this._injector.unmappedPayloads,"'CommandExecutor.unmapPayload' should unmap right values",{ fileName : "CommandExecutorTest.hx", lineNumber : 102, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommand"});
	}
	,textExecuteCommandWithMappingResults: function() {
		var mapping = new hex_control_command_CommandMapping(hex_control_command__$CommandExecutorTest_MockCommand);
		var mappingWithMappingResults = new hex_control_command_CommandMapping(hex_control_command__$CommandExecutorTest_MockCommandUsingMappingResults).withMappingResults([mapping]);
		var request = new hex_control_Request();
		this._commandExecutor.executeCommand(mapping,request);
		this._commandExecutor.executeCommand(mappingWithMappingResults,request);
		hex_unittest_assertion_Assert.deepEquals([["s",String,""]],this._injector.mappedPayloads,"'CommandExecutor.mapPayload' should map right values",{ fileName : "CommandExecutorTest.hx", lineNumber : 117, className : "hex.control.command.CommandExecutorTest", methodName : "textExecuteCommandWithMappingResults"});
	}
	,__class__: hex_control_command_CommandExecutorTest
};
var hex_control_command__$CommandExecutorTest_MockCommand = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.control.command._CommandExecutorTest.MockCommand"] = hex_control_command__$CommandExecutorTest_MockCommand;
hex_control_command__$CommandExecutorTest_MockCommand.__name__ = ["hex","control","command","_CommandExecutorTest","MockCommand"];
hex_control_command__$CommandExecutorTest_MockCommand.__super__ = hex_control_command_BasicCommand;
hex_control_command__$CommandExecutorTest_MockCommand.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	execute: function(request) {
	}
	,getReturnedExecutionPayload: function() {
		return [new hex_control_payload_ExecutionPayload("s",String)];
	}
	,__class__: hex_control_command__$CommandExecutorTest_MockCommand
});
var hex_control_command__$CommandExecutorTest_MockCommandUsingMappingResults = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.control.command._CommandExecutorTest.MockCommandUsingMappingResults"] = hex_control_command__$CommandExecutorTest_MockCommandUsingMappingResults;
hex_control_command__$CommandExecutorTest_MockCommandUsingMappingResults.__name__ = ["hex","control","command","_CommandExecutorTest","MockCommandUsingMappingResults"];
hex_control_command__$CommandExecutorTest_MockCommandUsingMappingResults.__super__ = hex_control_command_BasicCommand;
hex_control_command__$CommandExecutorTest_MockCommandUsingMappingResults.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	value: null
	,execute: function(request) {
	}
	,__class__: hex_control_command__$CommandExecutorTest_MockCommandUsingMappingResults
});
var hex_control_command__$CommandExecutorTest_MockForTriggeringUnmap = function(commandMapping) {
	this.unmapCallCount = 0;
	this.commandMapping = commandMapping;
};
$hxClasses["hex.control.command._CommandExecutorTest.MockForTriggeringUnmap"] = hex_control_command__$CommandExecutorTest_MockForTriggeringUnmap;
hex_control_command__$CommandExecutorTest_MockForTriggeringUnmap.__name__ = ["hex","control","command","_CommandExecutorTest","MockForTriggeringUnmap"];
hex_control_command__$CommandExecutorTest_MockForTriggeringUnmap.prototype = {
	commandMapping: null
	,unmapCallCount: null
	,unmap: function() {
		this.unmapCallCount++;
		return this.commandMapping;
	}
	,__class__: hex_control_command__$CommandExecutorTest_MockForTriggeringUnmap
};
var hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution = function() {
	hex_control_async_AsyncCommand.call(this);
};
$hxClasses["hex.control.command._CommandExecutorTest.MockAsyncCommandForTestingExecution"] = hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution;
hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.__name__ = ["hex","control","command","_CommandExecutorTest","MockAsyncCommandForTestingExecution"];
hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.__super__ = hex_control_async_AsyncCommand;
hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.prototype = $extend(hex_control_async_AsyncCommand.prototype,{
	setOwner: function(owner) {
		hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.owner = owner;
	}
	,preExecute: function() {
		hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.preExecuteCallCount++;
	}
	,execute: function(request) {
		hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.executeCallCount++;
		hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.request = request;
	}
	,addCompleteHandler: function(scope,callback) {
		hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.completeHandlers.push(callback);
	}
	,addFailHandler: function(scope,callback) {
		hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.failHandlers.push(callback);
	}
	,addCancelHandler: function(scope,callback) {
		hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.cancelHandlers.push(callback);
	}
	,__class__: hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution
});
var hex_control_command__$CommandExecutorTest_ASyncCommandListener = function() {
};
$hxClasses["hex.control.command._CommandExecutorTest.ASyncCommandListener"] = hex_control_command__$CommandExecutorTest_ASyncCommandListener;
hex_control_command__$CommandExecutorTest_ASyncCommandListener.__name__ = ["hex","control","command","_CommandExecutorTest","ASyncCommandListener"];
hex_control_command__$CommandExecutorTest_ASyncCommandListener.__interfaces__ = [hex_control_async_IAsyncCommandListener];
hex_control_command__$CommandExecutorTest_ASyncCommandListener.prototype = {
	onAsyncCommandComplete: function(command) {
	}
	,onAsyncCommandFail: function(command) {
	}
	,onAsyncCommandCancel: function(command) {
	}
	,__class__: hex_control_command__$CommandExecutorTest_ASyncCommandListener
};
var hex_control_command__$CommandExecutorTest_MockDependencyInjectorForMapping = function() {
	this.unmappedPayloads = [];
	this.mappedPayloads = [];
	this.getOrCreateNewInstanceCallCount = 0;
	hex_MockDependencyInjector.call(this);
};
$hxClasses["hex.control.command._CommandExecutorTest.MockDependencyInjectorForMapping"] = hex_control_command__$CommandExecutorTest_MockDependencyInjectorForMapping;
hex_control_command__$CommandExecutorTest_MockDependencyInjectorForMapping.__name__ = ["hex","control","command","_CommandExecutorTest","MockDependencyInjectorForMapping"];
hex_control_command__$CommandExecutorTest_MockDependencyInjectorForMapping.__super__ = hex_MockDependencyInjector;
hex_control_command__$CommandExecutorTest_MockDependencyInjectorForMapping.prototype = $extend(hex_MockDependencyInjector.prototype,{
	getOrCreateNewInstanceCallCount: null
	,getOrCreateNewInstanceCallParameter: null
	,mappedPayloads: null
	,unmappedPayloads: null
	,mapToValue: function(clazz,value,name) {
		if(name == null) name = "";
		this.mappedPayloads.push([value,clazz,name]);
	}
	,unmap: function(type,name) {
		if(name == null) name = "";
		this.unmappedPayloads.push([type,name]);
	}
	,getOrCreateNewInstance: function(type) {
		this.getOrCreateNewInstanceCallCount++;
		this.getOrCreateNewInstanceCallParameter = type;
		return Type.createInstance(type,[]);
	}
	,__class__: hex_control_command__$CommandExecutorTest_MockDependencyInjectorForMapping
});
var hex_control_command__$CommandExecutorTest_IMockType = function() { };
$hxClasses["hex.control.command._CommandExecutorTest.IMockType"] = hex_control_command__$CommandExecutorTest_IMockType;
hex_control_command__$CommandExecutorTest_IMockType.__name__ = ["hex","control","command","_CommandExecutorTest","IMockType"];
var hex_control_command__$CommandExecutorTest_MockImplementation = function(name) {
	this.name = name;
};
$hxClasses["hex.control.command._CommandExecutorTest.MockImplementation"] = hex_control_command__$CommandExecutorTest_MockImplementation;
hex_control_command__$CommandExecutorTest_MockImplementation.__name__ = ["hex","control","command","_CommandExecutorTest","MockImplementation"];
hex_control_command__$CommandExecutorTest_MockImplementation.__interfaces__ = [hex_control_command__$CommandExecutorTest_IMockType];
hex_control_command__$CommandExecutorTest_MockImplementation.prototype = {
	name: null
	,__class__: hex_control_command__$CommandExecutorTest_MockImplementation
};
var hex_control_command_ICommandMapping = function() { };
$hxClasses["hex.control.command.ICommandMapping"] = hex_control_command_ICommandMapping;
hex_control_command_ICommandMapping.__name__ = ["hex","control","command","ICommandMapping"];
hex_control_command_ICommandMapping.prototype = {
	get_hasGuard: null
	,get_isFiredOnce: null
	,get_hasPayload: null
	,get_hasCompleteHandler: null
	,get_hasFailHandler: null
	,get_hasCancelHandler: null
	,get_hasMappingResult: null
	,getCommandClass: null
	,hasGuard: null
	,getGuards: null
	,withGuards: null
	,isFiredOnce: null
	,once: null
	,hasPayload: null
	,getPayloads: null
	,withPayloads: null
	,getCompleteHandlers: null
	,hasCompleteHandler: null
	,withCompleteHandlers: null
	,getFailHandlers: null
	,hasFailHandler: null
	,withFailHandlers: null
	,getCancelHandlers: null
	,hasCancelHandler: null
	,withCancelHandlers: null
	,setContextOwner: null
	,getContextOwner: null
	,hasMappingResult: null
	,withMappingResults: null
	,getPayloadResult: null
	,setLastCommandInstance: null
	,__class__: hex_control_command_ICommandMapping
	,__properties__: {get_hasMappingResult:"get_hasMappingResult",get_hasCancelHandler:"get_hasCancelHandler",get_hasFailHandler:"get_hasFailHandler",get_hasCompleteHandler:"get_hasCompleteHandler",get_hasPayload:"get_hasPayload",get_isFiredOnce:"get_isFiredOnce",get_hasGuard:"get_hasGuard"}
};
var hex_control_command_CommandMapping = function(commandClass) {
	this._commandClass = commandClass;
	this.isFiredOnce = false;
};
$hxClasses["hex.control.command.CommandMapping"] = hex_control_command_CommandMapping;
hex_control_command_CommandMapping.__name__ = ["hex","control","command","CommandMapping"];
hex_control_command_CommandMapping.__interfaces__ = [hex_control_command_ICommandMapping];
hex_control_command_CommandMapping.prototype = {
	_commandClass: null
	,_guards: null
	,_payloads: null
	,_contextOwner: null
	,_completeHandlers: null
	,_cancelHandlers: null
	,_failHandlers: null
	,_mappingResults: null
	,_command: null
	,getCommandClass: function() {
		return this._commandClass;
	}
	,hasGuard: null
	,get_hasGuard: function() {
		return this._guards != null;
	}
	,getGuards: function() {
		return this._guards;
	}
	,withGuards: function(guards) {
		if(this._guards == null) this._guards = [];
		this._guards = this._guards.concat(guards);
		return this;
	}
	,isFiredOnce: null
	,get_isFiredOnce: function() {
		return this.isFiredOnce;
	}
	,once: function() {
		this.isFiredOnce = true;
		return this;
	}
	,hasPayload: null
	,get_hasPayload: function() {
		return this._payloads != null;
	}
	,getPayloads: function() {
		return this._payloads;
	}
	,withPayloads: function(payloads) {
		if(this._payloads == null) this._payloads = [];
		this._payloads = this._payloads.concat(payloads);
		return this;
	}
	,getCompleteHandlers: function() {
		return this._completeHandlers;
	}
	,hasCompleteHandler: null
	,get_hasCompleteHandler: function() {
		return this._completeHandlers != null;
	}
	,withCompleteHandlers: function(handler) {
		if(this._completeHandlers == null) this._completeHandlers = [];
		this._completeHandlers.push(handler);
		return this;
	}
	,getFailHandlers: function() {
		return this._failHandlers;
	}
	,hasFailHandler: null
	,get_hasFailHandler: function() {
		return this._failHandlers != null;
	}
	,withFailHandlers: function(handler) {
		if(this._failHandlers == null) this._failHandlers = [];
		this._failHandlers.push(handler);
		return this;
	}
	,getCancelHandlers: function() {
		return this._cancelHandlers;
	}
	,hasCancelHandler: null
	,get_hasCancelHandler: function() {
		return this._cancelHandlers != null;
	}
	,withCancelHandlers: function(handler) {
		if(this._cancelHandlers == null) this._cancelHandlers = [];
		this._cancelHandlers.push(handler);
		return this;
	}
	,setContextOwner: function(contextOwner) {
		this._contextOwner = contextOwner;
	}
	,getContextOwner: function() {
		return this._contextOwner;
	}
	,hasMappingResult: null
	,get_hasMappingResult: function() {
		return this._mappingResults != null;
	}
	,withMappingResults: function(mappingResults) {
		if(this._mappingResults == null) this._mappingResults = [];
		this._mappingResults = this._mappingResults.concat(mappingResults);
		return this;
	}
	,setLastCommandInstance: function(command) {
		this._command = command;
	}
	,getPayloadResult: function() {
		var payload = [];
		if(this._mappingResults != null) {
			var _g = 0;
			var _g1 = this._mappingResults;
			while(_g < _g1.length) {
				var mapping = _g1[_g];
				++_g;
				var command;
				command = (js_Boot.__cast(mapping , hex_control_command_CommandMapping))._command;
				if(command != null) {
					var returnedExecutionPayload = command.getReturnedExecutionPayload();
					if(returnedExecutionPayload != null) payload = payload.concat(command.getReturnedExecutionPayload());
				}
			}
		}
		if(payload.length > 0) return payload; else return null;
	}
	,__class__: hex_control_command_CommandMapping
	,__properties__: {get_hasMappingResult:"get_hasMappingResult",get_hasCancelHandler:"get_hasCancelHandler",get_hasFailHandler:"get_hasFailHandler",get_hasCompleteHandler:"get_hasCompleteHandler",get_hasPayload:"get_hasPayload",get_isFiredOnce:"get_isFiredOnce",get_hasGuard:"get_hasGuard"}
};
var hex_control_command_CommandMappingTest = function() { };
$hxClasses["hex.control.command.CommandMappingTest"] = hex_control_command_CommandMappingTest;
hex_control_command_CommandMappingTest.__name__ = ["hex","control","command","CommandMappingTest"];
hex_control_command_CommandMappingTest.prototype = {
	_commandMapping: null
	,setUp: function() {
		this._commandMapping = new hex_control_command_CommandMapping(hex_control_command__$CommandMappingTest_MockCommand);
	}
	,tearDown: function() {
		this._commandMapping = null;
	}
	,testGetCommandClass: function() {
		hex_unittest_assertion_Assert.equals(hex_control_command__$CommandMappingTest_MockCommand,this._commandMapping.getCommandClass(),"Command class should be the same",{ fileName : "CommandMappingTest.hx", lineNumber : 34, className : "hex.control.command.CommandMappingTest", methodName : "testGetCommandClass"});
	}
	,testGuards: function() {
		hex_unittest_assertion_Assert.isFalse(this._commandMapping.get_hasGuard(),"hasGuard should return false",{ fileName : "CommandMappingTest.hx", lineNumber : 40, className : "hex.control.command.CommandMappingTest", methodName : "testGuards"});
		this._commandMapping.withGuards([1,2,3]);
		hex_unittest_assertion_Assert.isTrue(this._commandMapping.get_hasGuard(),"hasGuard should return true",{ fileName : "CommandMappingTest.hx", lineNumber : 42, className : "hex.control.command.CommandMappingTest", methodName : "testGuards"});
		hex_unittest_assertion_Assert.deepEquals([1,2,3],this._commandMapping.getGuards(),"guards should be the same",{ fileName : "CommandMappingTest.hx", lineNumber : 43, className : "hex.control.command.CommandMappingTest", methodName : "testGuards"});
	}
	,testIsFireOnce: function() {
		hex_unittest_assertion_Assert.isFalse(this._commandMapping.get_isFiredOnce(),"isFiredOnce should return false",{ fileName : "CommandMappingTest.hx", lineNumber : 49, className : "hex.control.command.CommandMappingTest", methodName : "testIsFireOnce"});
		this._commandMapping.once();
		hex_unittest_assertion_Assert.isTrue(this._commandMapping.get_isFiredOnce(),"isFiredOnce should return true",{ fileName : "CommandMappingTest.hx", lineNumber : 51, className : "hex.control.command.CommandMappingTest", methodName : "testIsFireOnce"});
	}
	,testPayloads: function() {
		hex_unittest_assertion_Assert.isFalse(this._commandMapping.get_hasPayload(),"hasPayload should return false",{ fileName : "CommandMappingTest.hx", lineNumber : 57, className : "hex.control.command.CommandMappingTest", methodName : "testPayloads"});
		var stringPayload0 = new hex_control_payload_ExecutionPayload("test0",String,"stringPayload0");
		var stringPayload1 = new hex_control_payload_ExecutionPayload("test1",String,"stringPayload1");
		var stringPayload2 = new hex_control_payload_ExecutionPayload("test2",String,"stringPayload2");
		this._commandMapping.withPayloads([stringPayload0,stringPayload1,stringPayload2]);
		hex_unittest_assertion_Assert.isTrue(this._commandMapping.get_hasPayload(),"hasPayload should return true",{ fileName : "CommandMappingTest.hx", lineNumber : 64, className : "hex.control.command.CommandMappingTest", methodName : "testPayloads"});
		hex_unittest_assertion_Assert.deepEquals([stringPayload0,stringPayload1,stringPayload2],this._commandMapping.getPayloads(),"payloads should be the same",{ fileName : "CommandMappingTest.hx", lineNumber : 65, className : "hex.control.command.CommandMappingTest", methodName : "testPayloads"});
	}
	,testCompleteHandlers: function() {
		hex_unittest_assertion_Assert.isFalse(this._commandMapping.get_hasCompleteHandler(),"hasCompleteHandler should return false",{ fileName : "CommandMappingTest.hx", lineNumber : 71, className : "hex.control.command.CommandMappingTest", methodName : "testCompleteHandlers"});
		var listener0 = new hex_control_command__$CommandMappingTest_MockAsyncCommandListener();
		var listener1 = new hex_control_command__$CommandMappingTest_MockAsyncCommandListener();
		var listener2 = new hex_control_command__$CommandMappingTest_MockAsyncCommandListener();
		var completeHandler0 = new hex_control_async_AsyncHandler(listener0,$bind(listener0,listener0.handler));
		var completeHandler1 = new hex_control_async_AsyncHandler(listener1,$bind(listener1,listener1.handler));
		var completeHandler2 = new hex_control_async_AsyncHandler(listener2,$bind(listener2,listener2.handler));
		this._commandMapping.withCompleteHandlers(completeHandler0).withCompleteHandlers(completeHandler1).withCompleteHandlers(completeHandler2);
		hex_unittest_assertion_Assert.isTrue(this._commandMapping.get_hasCompleteHandler(),"hasCompleteHandler should return true",{ fileName : "CommandMappingTest.hx", lineNumber : 83, className : "hex.control.command.CommandMappingTest", methodName : "testCompleteHandlers"});
		hex_unittest_assertion_Assert.deepEquals([completeHandler0,completeHandler1,completeHandler2],this._commandMapping.getCompleteHandlers(),"getCompleteHandlers should be the same",{ fileName : "CommandMappingTest.hx", lineNumber : 84, className : "hex.control.command.CommandMappingTest", methodName : "testCompleteHandlers"});
	}
	,testFailHandlers: function() {
		hex_unittest_assertion_Assert.isFalse(this._commandMapping.get_hasFailHandler(),"hasFailHandler should return false",{ fileName : "CommandMappingTest.hx", lineNumber : 90, className : "hex.control.command.CommandMappingTest", methodName : "testFailHandlers"});
		var listener0 = new hex_control_command__$CommandMappingTest_MockAsyncCommandListener();
		var listener1 = new hex_control_command__$CommandMappingTest_MockAsyncCommandListener();
		var listener2 = new hex_control_command__$CommandMappingTest_MockAsyncCommandListener();
		var failHandler0 = new hex_control_async_AsyncHandler(listener0,$bind(listener0,listener0.handler));
		var failHandler1 = new hex_control_async_AsyncHandler(listener1,$bind(listener1,listener1.handler));
		var failHandler2 = new hex_control_async_AsyncHandler(listener2,$bind(listener2,listener2.handler));
		this._commandMapping.withFailHandlers(failHandler0).withFailHandlers(failHandler1).withFailHandlers(failHandler2);
		hex_unittest_assertion_Assert.isTrue(this._commandMapping.get_hasFailHandler(),"hasFailHandler should return true",{ fileName : "CommandMappingTest.hx", lineNumber : 101, className : "hex.control.command.CommandMappingTest", methodName : "testFailHandlers"});
		hex_unittest_assertion_Assert.deepEquals([failHandler0,failHandler1,failHandler2],this._commandMapping.getFailHandlers(),"getFailHandlers should be the same",{ fileName : "CommandMappingTest.hx", lineNumber : 102, className : "hex.control.command.CommandMappingTest", methodName : "testFailHandlers"});
	}
	,testCancelHandlers: function() {
		hex_unittest_assertion_Assert.isFalse(this._commandMapping.get_hasCancelHandler(),"hasCancelHandler should return false",{ fileName : "CommandMappingTest.hx", lineNumber : 108, className : "hex.control.command.CommandMappingTest", methodName : "testCancelHandlers"});
		var listener0 = new hex_control_command__$CommandMappingTest_MockAsyncCommandListener();
		var listener1 = new hex_control_command__$CommandMappingTest_MockAsyncCommandListener();
		var listener2 = new hex_control_command__$CommandMappingTest_MockAsyncCommandListener();
		var cancelHandler0 = new hex_control_async_AsyncHandler(listener0,$bind(listener0,listener0.handler));
		var cancelHandler1 = new hex_control_async_AsyncHandler(listener1,$bind(listener1,listener1.handler));
		var cancelHandler2 = new hex_control_async_AsyncHandler(listener2,$bind(listener2,listener2.handler));
		this._commandMapping.withCancelHandlers(cancelHandler0).withCancelHandlers(cancelHandler1).withCancelHandlers(cancelHandler2);
		hex_unittest_assertion_Assert.isTrue(this._commandMapping.get_hasCancelHandler(),"hasCancelHandler should return true",{ fileName : "CommandMappingTest.hx", lineNumber : 119, className : "hex.control.command.CommandMappingTest", methodName : "testCancelHandlers"});
		hex_unittest_assertion_Assert.deepEquals([cancelHandler0,cancelHandler1,cancelHandler2],this._commandMapping.getCancelHandlers(),"getCancelHandlers should be the same",{ fileName : "CommandMappingTest.hx", lineNumber : 120, className : "hex.control.command.CommandMappingTest", methodName : "testCancelHandlers"});
	}
	,testMappingResults: function() {
		hex_unittest_assertion_Assert.isFalse(this._commandMapping.get_hasMappingResult(),"'hasMappingResult' should return false",{ fileName : "CommandMappingTest.hx", lineNumber : 126, className : "hex.control.command.CommandMappingTest", methodName : "testMappingResults"});
		var mapping = new hex_control_command_CommandMapping(hex_control_command__$CommandMappingTest_MockCommand);
		var anotherMapping = new hex_control_command_CommandMapping(hex_control_command__$CommandMappingTest_MockCommand);
		hex_unittest_assertion_Assert.equals(this._commandMapping,this._commandMapping.withMappingResults([mapping,anotherMapping]),"CommandMapping returned should be the same",{ fileName : "CommandMappingTest.hx", lineNumber : 131, className : "hex.control.command.CommandMappingTest", methodName : "testMappingResults"});
		hex_unittest_assertion_Assert.isTrue(this._commandMapping.get_hasMappingResult(),"'hasMappingResult' should return true",{ fileName : "CommandMappingTest.hx", lineNumber : 132, className : "hex.control.command.CommandMappingTest", methodName : "testMappingResults"});
	}
	,testSetLastCommandInstance: function() {
		hex_unittest_assertion_Assert.isNull(this._commandMapping.getPayloadResult(),"'getPayloadResult' should return null",{ fileName : "CommandMappingTest.hx", lineNumber : 138, className : "hex.control.command.CommandMappingTest", methodName : "testSetLastCommandInstance"});
		var command = new hex_control_command__$CommandMappingTest_MockCommand();
		var mapping = new hex_control_command_CommandMapping(hex_control_command__$CommandMappingTest_MockCommand);
		this._commandMapping.withMappingResults([mapping]);
		hex_unittest_assertion_Assert.isNull(this._commandMapping.getPayloadResult(),"'getPayloadResult' should return null",{ fileName : "CommandMappingTest.hx", lineNumber : 143, className : "hex.control.command.CommandMappingTest", methodName : "testSetLastCommandInstance"});
		mapping.setLastCommandInstance(command);
		hex_unittest_assertion_Assert.deepEquals(hex_control_command__$CommandMappingTest_MockCommand.returnedExecutionPayload,this._commandMapping.getPayloadResult(),"'getPayloadResult' should return right payloads from last command instance",{ fileName : "CommandMappingTest.hx", lineNumber : 146, className : "hex.control.command.CommandMappingTest", methodName : "testSetLastCommandInstance"});
	}
	,__class__: hex_control_command_CommandMappingTest
};
var hex_control_command__$CommandMappingTest_MockAsyncCommandListener = function() {
};
$hxClasses["hex.control.command._CommandMappingTest.MockAsyncCommandListener"] = hex_control_command__$CommandMappingTest_MockAsyncCommandListener;
hex_control_command__$CommandMappingTest_MockAsyncCommandListener.__name__ = ["hex","control","command","_CommandMappingTest","MockAsyncCommandListener"];
hex_control_command__$CommandMappingTest_MockAsyncCommandListener.prototype = {
	handler: function(command) {
	}
	,__class__: hex_control_command__$CommandMappingTest_MockAsyncCommandListener
};
var hex_control_payload_ExecutionPayload = function(data,type,name) {
	if(name == null) name = "";
	if(data == null) throw new js__$Boot_HaxeError(new hex_error_NullPointerException("ExecutionPayload data can't be null",{ fileName : "ExecutionPayload.hx", lineNumber : 21, className : "hex.control.payload.ExecutionPayload", methodName : "new"})); else if(!js_Boot.__instanceof(data,type)) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("ExecutionPayload data '" + Std.string(data) + "' should be an instance of type '" + Std.string(type) + "'",{ fileName : "ExecutionPayload.hx", lineNumber : 25, className : "hex.control.payload.ExecutionPayload", methodName : "new"}));
	this._data = data;
	this._type = type;
	this._name = name;
};
$hxClasses["hex.control.payload.ExecutionPayload"] = hex_control_payload_ExecutionPayload;
hex_control_payload_ExecutionPayload.__name__ = ["hex","control","payload","ExecutionPayload"];
hex_control_payload_ExecutionPayload.prototype = {
	_data: null
	,_type: null
	,_name: null
	,getData: function() {
		return this._data;
	}
	,getType: function() {
		return this._type;
	}
	,getName: function() {
		return this._name;
	}
	,withClass: function(type) {
		this._type = type;
		return this;
	}
	,withName: function(name) {
		if(name != null) this._name = name; else this._name = "";
		return this;
	}
	,__class__: hex_control_payload_ExecutionPayload
};
var hex_error_Exception = function(message,posInfos) {
	this.message = message;
	this.posInfos = posInfos;
	this.name = hex_log_Stringifier.stringify(this);
	hex_log_Logger.ERROR(this.toString(),null,{ fileName : "Exception.hx", lineNumber : 24, className : "hex.error.Exception", methodName : "new"});
};
$hxClasses["hex.error.Exception"] = hex_error_Exception;
hex_error_Exception.__name__ = ["hex","error","Exception"];
hex_error_Exception.prototype = {
	name: null
	,message: null
	,posInfos: null
	,toString: function() {
		return (this.posInfos != null?this.name + " at " + this.posInfos.className + "#" + this.posInfos.methodName + " line:" + this.posInfos.lineNumber + " in file '" + this.posInfos.fileName + "'":this.name) + " | " + this.message;
	}
	,__class__: hex_error_Exception
};
var hex_error_NullPointerException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.error.NullPointerException"] = hex_error_NullPointerException;
hex_error_NullPointerException.__name__ = ["hex","error","NullPointerException"];
hex_error_NullPointerException.__super__ = hex_error_Exception;
hex_error_NullPointerException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_error_NullPointerException
});
var hex_log_Stringifier = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException("Stringifier class can't be instantiated.",{ fileName : "Stringifier.hx", lineNumber : 15, className : "hex.log.Stringifier", methodName : "new"}));
};
$hxClasses["hex.log.Stringifier"] = hex_log_Stringifier;
hex_log_Stringifier.__name__ = ["hex","log","Stringifier"];
hex_log_Stringifier.setStringifier = function(o) {
	hex_log_Stringifier._STRATEGY = o;
};
hex_log_Stringifier.getStringifier = function() {
	return hex_log_Stringifier._STRATEGY;
};
hex_log_Stringifier.stringify = function(target) {
	if(hex_log_Stringifier._STRATEGY == null) hex_log_Stringifier._STRATEGY = new hex_log_BasicStringifierStrategy();
	return hex_log_Stringifier._STRATEGY.stringify(target);
};
hex_log_Stringifier.getPosInfos = function(posInfos) {
	return posInfos;
};
hex_log_Stringifier.prototype = {
	__class__: hex_log_Stringifier
};
var hex_log_IStringifierStrategy = function() { };
$hxClasses["hex.log.IStringifierStrategy"] = hex_log_IStringifierStrategy;
hex_log_IStringifierStrategy.__name__ = ["hex","log","IStringifierStrategy"];
hex_log_IStringifierStrategy.prototype = {
	stringify: null
	,__class__: hex_log_IStringifierStrategy
};
var hex_log_BasicStringifierStrategy = function() {
};
$hxClasses["hex.log.BasicStringifierStrategy"] = hex_log_BasicStringifierStrategy;
hex_log_BasicStringifierStrategy.__name__ = ["hex","log","BasicStringifierStrategy"];
hex_log_BasicStringifierStrategy.__interfaces__ = [hex_log_IStringifierStrategy];
hex_log_BasicStringifierStrategy.prototype = {
	stringify: function(target) {
		var type = Type.getClass(target);
		if(type != null) return Type.getClassName(type); else return "Dynamic";
	}
	,toString: function() {
		return hex_log_Stringifier.stringify(this);
	}
	,__class__: hex_log_BasicStringifierStrategy
};
var hex_log_Logger = function() {
	this.setLevel(hex_log_LogLevel._ALL);
	this._dispatcher = new hex_domain_DomainDispatcher();
};
$hxClasses["hex.log.Logger"] = hex_log_Logger;
hex_log_Logger.__name__ = ["hex","log","Logger"];
hex_log_Logger.getInstance = function() {
	if(hex_log_Logger._Instance == null) hex_log_Logger._Instance = new hex_log_Logger();
	return hex_log_Logger._Instance;
};
hex_log_Logger.DEBUG = function(o,domain,posInfos) {
	hex_log_Logger.getInstance().log(o,hex_log_LogLevel._DEBUG,domain,posInfos);
};
hex_log_Logger.INFO = function(o,domain,posInfos) {
	hex_log_Logger.getInstance().log(o,hex_log_LogLevel._INFO,domain,posInfos);
};
hex_log_Logger.WARN = function(o,domain,posInfos) {
	hex_log_Logger.getInstance().log(o,hex_log_LogLevel._WARN,domain,posInfos);
};
hex_log_Logger.ERROR = function(o,domain,posInfos) {
	hex_log_Logger.getInstance().log(o,hex_log_LogLevel._ERROR,domain,posInfos);
};
hex_log_Logger.FATAL = function(o,domain,posInfos) {
	hex_log_Logger.getInstance().log(o,hex_log_LogLevel._FATAL,domain,posInfos);
};
hex_log_Logger.CLEAR = function(domain) {
	hex_log_Logger.getInstance().clear();
};
hex_log_Logger.prototype = {
	_dispatcher: null
	,_level: null
	,setLevel: function(level) {
		this._level = level;
	}
	,getLevel: function() {
		return this._level;
	}
	,clear: function() {
		this._dispatcher.dispatch(hex_log_LoggerMessage.CLEAR);
	}
	,log: function(o,level,domain,posInfos) {
		if(this._level.get_value() <= level.get_value()) this._dispatcher.dispatch(hex_log_LoggerMessage.LOG,domain,[new hex_log_LoggerMessage(o,level,domain == null?hex_domain_NoDomain.DOMAIN:domain,posInfos)]);
	}
	,addListener: function(listener,domain) {
		this._dispatcher.addHandler(hex_log_LoggerMessage.LOG,listener,$bind(listener,listener.onLog),domain);
		return this._dispatcher.addHandler(hex_log_LoggerMessage.CLEAR,listener,$bind(listener,listener.onClear),domain);
	}
	,removeListener: function(listener,domain) {
		this._dispatcher.removeHandler(hex_log_LoggerMessage.LOG,listener,$bind(listener,listener.onLog),domain);
		return this._dispatcher.removeHandler(hex_log_LoggerMessage.CLEAR,listener,$bind(listener,listener.onClear),domain);
	}
	,isRegistered: function(listener,domain) {
		return this._dispatcher.isRegistered(listener,hex_log_LoggerMessage.LOG,domain);
	}
	,removeAllListeners: function() {
		this._dispatcher.removeAllListeners();
	}
	,toString: function() {
		return hex_log_Stringifier.stringify(this);
	}
	,__class__: hex_log_Logger
};
var hex_log_LogLevel = function(value) {
	this.value = value;
};
$hxClasses["hex.log.LogLevel"] = hex_log_LogLevel;
hex_log_LogLevel.__name__ = ["hex","log","LogLevel"];
hex_log_LogLevel.__properties__ = {get_OFF:"get_OFF",get_FATAL:"get_FATAL",get_ERROR:"get_ERROR",get_WARN:"get_WARN",get_INFO:"get_INFO",get_DEBUG:"get_DEBUG",get_ALL:"get_ALL",get_LEVELS:"get_LEVELS"}
hex_log_LogLevel.get_LEVELS = function() {
	return [hex_log_LogLevel._ALL,hex_log_LogLevel._DEBUG,hex_log_LogLevel._INFO,hex_log_LogLevel._WARN,hex_log_LogLevel._ERROR,hex_log_LogLevel._FATAL,hex_log_LogLevel._OFF];
};
hex_log_LogLevel.get_ALL = function() {
	return hex_log_LogLevel._ALL;
};
hex_log_LogLevel.get_DEBUG = function() {
	return hex_log_LogLevel._DEBUG;
};
hex_log_LogLevel.get_INFO = function() {
	return hex_log_LogLevel._INFO;
};
hex_log_LogLevel.get_WARN = function() {
	return hex_log_LogLevel._WARN;
};
hex_log_LogLevel.get_ERROR = function() {
	return hex_log_LogLevel._ERROR;
};
hex_log_LogLevel.get_FATAL = function() {
	return hex_log_LogLevel._FATAL;
};
hex_log_LogLevel.get_OFF = function() {
	return hex_log_LogLevel._OFF;
};
hex_log_LogLevel.prototype = {
	value: null
	,get_value: function() {
		return this.value;
	}
	,toString: function() {
		var _g = this.get_value();
		switch(_g) {
		case 0:
			return "ALL";
		case 10000:
			return "DEBUG";
		case 20000:
			return "INFO";
		case 30000:
			return "WARN";
		case 40000:
			return "ERROR";
		case 50000:
			return "FATAL";
		case 60000:
			return "OFF";
		}
		return "";
	}
	,__class__: hex_log_LogLevel
	,__properties__: {get_value:"get_value"}
};
var hex_domain_IDomainDispatcher = function() { };
$hxClasses["hex.domain.IDomainDispatcher"] = hex_domain_IDomainDispatcher;
hex_domain_IDomainDispatcher.__name__ = ["hex","domain","IDomainDispatcher"];
hex_domain_IDomainDispatcher.prototype = {
	setDispatcherClass: null
	,getDefaultDispatcher: null
	,getDefaultDomain: null
	,setDefaultDomain: null
	,clear: null
	,isRegistered: null
	,hasChannelDispatcher: null
	,getDomainDispatcher: null
	,releaseDomainDispatcher: null
	,addListener: null
	,removeListener: null
	,addHandler: null
	,removeHandler: null
	,dispatch: null
	,removeAllListeners: null
	,__class__: hex_domain_IDomainDispatcher
};
var hex_domain_DomainDispatcher = function(defaultDomain,dispatcherClass) {
	this.clear();
	this.setDefaultDomain(defaultDomain);
	this.setDispatcherClass(dispatcherClass);
};
$hxClasses["hex.domain.DomainDispatcher"] = hex_domain_DomainDispatcher;
hex_domain_DomainDispatcher.__name__ = ["hex","domain","DomainDispatcher"];
hex_domain_DomainDispatcher.__interfaces__ = [hex_domain_IDomainDispatcher];
hex_domain_DomainDispatcher.prototype = {
	_domains: null
	,_defaultDomain: null
	,_dispatcherClass: null
	,setDispatcherClass: function(dispatcherClass) {
		if(dispatcherClass != null) this._dispatcherClass = dispatcherClass; else this._dispatcherClass = hex_event_Dispatcher;
	}
	,getDefaultDispatcher: function() {
		return this._domains.h[this._defaultDomain.__id__];
	}
	,getDefaultDomain: function() {
		return this._defaultDomain;
	}
	,setDefaultDomain: function(domain) {
		if(domain == null) this._defaultDomain = hex_domain_DefaultDomain.DOMAIN; else this._defaultDomain = domain;
		this.getDomainDispatcher(this.getDefaultDomain());
	}
	,clear: function() {
		this._domains = new haxe_ds_ObjectMap();
		var domain = this.getDefaultDomain();
		if(domain != null) this.getDomainDispatcher(domain);
	}
	,isRegistered: function(listener,messageType,domain) {
		if(this.hasChannelDispatcher(domain)) return this.getDomainDispatcher(domain).isRegistered(listener,messageType); else return false;
	}
	,hasChannelDispatcher: function(domain) {
		if(domain == null) return this._domains.h.__keys__[this._defaultDomain.__id__] != null; else return this._domains.h.__keys__[domain.__id__] != null;
	}
	,getDomainDispatcher: function(domain) {
		if(this.hasChannelDispatcher(domain)) if(domain == null) return this._domains.h[this._defaultDomain.__id__]; else return this._domains.h[domain.__id__]; else {
			var dispatcher = new hex_event_Dispatcher();
			this._domains.set(domain,dispatcher);
			return dispatcher;
		}
	}
	,releaseDomainDispatcher: function(domain) {
		if(this.hasChannelDispatcher(domain)) {
			this._domains.h[domain.__id__].removeAllListeners();
			this._domains.remove(domain);
			return true;
		} else return false;
	}
	,addListener: function(listener,domain) {
		return this.getDomainDispatcher(domain).addListener(listener);
	}
	,removeListener: function(listener,domain) {
		return this.getDomainDispatcher(domain).removeListener(listener);
	}
	,addHandler: function(messageType,scope,callback,domain) {
		return this.getDomainDispatcher(domain).addHandler(messageType,scope,callback);
	}
	,removeHandler: function(messageType,scope,callback,domain) {
		return this.getDomainDispatcher(domain).removeHandler(messageType,scope,callback);
	}
	,dispatch: function(messageType,domain,data) {
		this.getDomainDispatcher(domain).dispatch(messageType,data);
		if(domain != this._defaultDomain && domain != null) this.getDefaultDispatcher().dispatch(messageType,data);
	}
	,removeAllListeners: function() {
		var iterator = this._domains.keys();
		while(iterator.hasNext()) ((function($this) {
			var $r;
			var key = iterator.next();
			$r = $this._domains.h[key.__id__];
			return $r;
		}(this))).removeAllListeners();
		this.clear();
	}
	,__class__: hex_domain_DomainDispatcher
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
};
var hex_error_IllegalArgumentException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.error.IllegalArgumentException"] = hex_error_IllegalArgumentException;
hex_error_IllegalArgumentException.__name__ = ["hex","error","IllegalArgumentException"];
hex_error_IllegalArgumentException.__super__ = hex_error_Exception;
hex_error_IllegalArgumentException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_error_IllegalArgumentException
});
var hex_control_command__$CommandMappingTest_MockCommand = function() {
};
$hxClasses["hex.control.command._CommandMappingTest.MockCommand"] = hex_control_command__$CommandMappingTest_MockCommand;
hex_control_command__$CommandMappingTest_MockCommand.__name__ = ["hex","control","command","_CommandMappingTest","MockCommand"];
hex_control_command__$CommandMappingTest_MockCommand.__interfaces__ = [hex_control_command_ICommand];
hex_control_command__$CommandMappingTest_MockCommand.prototype = {
	execute: function(request) {
	}
	,getResult: function() {
		return null;
	}
	,getReturnedExecutionPayload: function() {
		return hex_control_command__$CommandMappingTest_MockCommand.returnedExecutionPayload;
	}
	,getOwner: function() {
		return null;
	}
	,setOwner: function(owner) {
	}
	,getExecuteMethod: function() {
		return $bind(this,this.execute);
	}
	,__class__: hex_control_command__$CommandMappingTest_MockCommand
};
var hex_control_command_MVCCommandSuite = function() {
	this.list = [hex_control_command_CommandExecutorTest,hex_control_command_CommandMappingTest];
};
$hxClasses["hex.control.command.MVCCommandSuite"] = hex_control_command_MVCCommandSuite;
hex_control_command_MVCCommandSuite.__name__ = ["hex","control","command","MVCCommandSuite"];
hex_control_command_MVCCommandSuite.prototype = {
	list: null
	,__class__: hex_control_command_MVCCommandSuite
};
var hex_control_guard_GuardUtil = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException("'GuardUtil' class can't be instantiated.",{ fileName : "GuardUtil.hx", lineNumber : 14, className : "hex.control.guard.GuardUtil", methodName : "new"}));
};
$hxClasses["hex.control.guard.GuardUtil"] = hex_control_guard_GuardUtil;
hex_control_guard_GuardUtil.__name__ = ["hex","control","guard","GuardUtil"];
hex_control_guard_GuardUtil.guardsApprove = function(guards,injector) {
	if(guards != null) {
		var _g = 0;
		while(_g < guards.length) {
			var guard = guards[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(guard,"approve")) guard = Reflect.field(guard,"approve"); else if(js_Boot.__instanceof(guard,Class)) {
				if(injector != null) guard = injector.instantiateUnmapped(guard); else guard = Type.createInstance(guard,[]);
				guard = guard.approve;
			}
			if(Reflect.isFunction(guard)) {
				var b = guard();
				if(!b) return false;
			}
		}
	}
	return true;
};
hex_control_guard_GuardUtil.prototype = {
	__class__: hex_control_guard_GuardUtil
};
var hex_control_guard_GuardUtilTest = function() { };
$hxClasses["hex.control.guard.GuardUtilTest"] = hex_control_guard_GuardUtilTest;
hex_control_guard_GuardUtilTest.__name__ = ["hex","control","guard","GuardUtilTest"];
hex_control_guard_GuardUtilTest.prototype = {
	testGuardClassApproveWithoutInjector: function() {
		var guards = [hex_control_guard__$GuardUtilTest_MockApproveGuard];
		var isApproved = hex_control_guard_GuardUtil.guardsApprove(guards);
		hex_unittest_assertion_Assert.isTrue(isApproved,"'GuardUtil.guardsApprove' property should return true",{ fileName : "GuardUtilTest.hx", lineNumber : 20, className : "hex.control.guard.GuardUtilTest", methodName : "testGuardClassApproveWithoutInjector"});
		guards = [hex_control_guard__$GuardUtilTest_MockRefuseGuard];
		isApproved = hex_control_guard_GuardUtil.guardsApprove(guards);
		hex_unittest_assertion_Assert.isFalse(isApproved,"'GuardUtil.guardsApprove' property should return false",{ fileName : "GuardUtilTest.hx", lineNumber : 24, className : "hex.control.guard.GuardUtilTest", methodName : "testGuardClassApproveWithoutInjector"});
	}
	,testGuardClassApproveWithInjector: function() {
		var injector = new hex_control_guard__$GuardUtilTest_MockDependencyInjectorForTestingGuard();
		var guards = [hex_control_guard__$GuardUtilTest_MockApproveGuard];
		var isApproved = hex_control_guard_GuardUtil.guardsApprove(guards,injector);
		hex_unittest_assertion_Assert.isTrue(isApproved,"'GuardUtil.guardsApprove' property should return true",{ fileName : "GuardUtilTest.hx", lineNumber : 34, className : "hex.control.guard.GuardUtilTest", methodName : "testGuardClassApproveWithInjector"});
		guards = [hex_control_guard__$GuardUtilTest_MockRefuseGuard];
		isApproved = hex_control_guard_GuardUtil.guardsApprove(guards,injector);
		hex_unittest_assertion_Assert.isFalse(isApproved,"'GuardUtil.guardsApprove' property should return false",{ fileName : "GuardUtilTest.hx", lineNumber : 38, className : "hex.control.guard.GuardUtilTest", methodName : "testGuardClassApproveWithInjector"});
	}
	,__class__: hex_control_guard_GuardUtilTest
};
var hex_control_guard_IGuard = function() { };
$hxClasses["hex.control.guard.IGuard"] = hex_control_guard_IGuard;
hex_control_guard_IGuard.__name__ = ["hex","control","guard","IGuard"];
hex_control_guard_IGuard.prototype = {
	approve: null
	,__class__: hex_control_guard_IGuard
};
var hex_control_guard__$GuardUtilTest_MockApproveGuard = function() { };
$hxClasses["hex.control.guard._GuardUtilTest.MockApproveGuard"] = hex_control_guard__$GuardUtilTest_MockApproveGuard;
hex_control_guard__$GuardUtilTest_MockApproveGuard.__name__ = ["hex","control","guard","_GuardUtilTest","MockApproveGuard"];
hex_control_guard__$GuardUtilTest_MockApproveGuard.__interfaces__ = [hex_control_guard_IGuard];
hex_control_guard__$GuardUtilTest_MockApproveGuard.prototype = {
	approve: function() {
		return true;
	}
	,__class__: hex_control_guard__$GuardUtilTest_MockApproveGuard
};
var hex_control_guard__$GuardUtilTest_MockRefuseGuard = function() { };
$hxClasses["hex.control.guard._GuardUtilTest.MockRefuseGuard"] = hex_control_guard__$GuardUtilTest_MockRefuseGuard;
hex_control_guard__$GuardUtilTest_MockRefuseGuard.__name__ = ["hex","control","guard","_GuardUtilTest","MockRefuseGuard"];
hex_control_guard__$GuardUtilTest_MockRefuseGuard.__interfaces__ = [hex_control_guard_IGuard];
hex_control_guard__$GuardUtilTest_MockRefuseGuard.prototype = {
	approve: function() {
		return false;
	}
	,__class__: hex_control_guard__$GuardUtilTest_MockRefuseGuard
};
var hex_control_guard__$GuardUtilTest_MockDependencyInjector = function() { };
$hxClasses["hex.control.guard._GuardUtilTest.MockDependencyInjector"] = hex_control_guard__$GuardUtilTest_MockDependencyInjector;
hex_control_guard__$GuardUtilTest_MockDependencyInjector.__name__ = ["hex","control","guard","_GuardUtilTest","MockDependencyInjector"];
hex_control_guard__$GuardUtilTest_MockDependencyInjector.__interfaces__ = [hex_di_IDependencyInjector];
hex_control_guard__$GuardUtilTest_MockDependencyInjector.prototype = {
	hasMapping: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,hasDirectMapping: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,satisfies: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,injectInto: function(target) {
	}
	,getInstance: function(type,name,targetType) {
		if(name == null) name = "";
		return null;
	}
	,getOrCreateNewInstance: function(type) {
		return null;
	}
	,instantiateUnmapped: function(type) {
		return null;
	}
	,destroyInstance: function(instance) {
	}
	,mapToValue: function(clazz,value,name) {
		if(name == null) name = "";
	}
	,mapToType: function(clazz,type,name) {
		if(name == null) name = "";
	}
	,mapToSingleton: function(clazz,type,name) {
		if(name == null) name = "";
	}
	,unmap: function(type,name) {
		if(name == null) name = "";
	}
	,addEventListener: function(eventType,callback) {
		return false;
	}
	,removeEventListener: function(eventType,callback) {
		return false;
	}
	,__class__: hex_control_guard__$GuardUtilTest_MockDependencyInjector
};
var hex_control_guard__$GuardUtilTest_MockDependencyInjectorForTestingGuard = function() {
};
$hxClasses["hex.control.guard._GuardUtilTest.MockDependencyInjectorForTestingGuard"] = hex_control_guard__$GuardUtilTest_MockDependencyInjectorForTestingGuard;
hex_control_guard__$GuardUtilTest_MockDependencyInjectorForTestingGuard.__name__ = ["hex","control","guard","_GuardUtilTest","MockDependencyInjectorForTestingGuard"];
hex_control_guard__$GuardUtilTest_MockDependencyInjectorForTestingGuard.__super__ = hex_control_guard__$GuardUtilTest_MockDependencyInjector;
hex_control_guard__$GuardUtilTest_MockDependencyInjectorForTestingGuard.prototype = $extend(hex_control_guard__$GuardUtilTest_MockDependencyInjector.prototype,{
	instantiateUnmapped: function(type) {
		return Type.createInstance(type,[]);
	}
	,__class__: hex_control_guard__$GuardUtilTest_MockDependencyInjectorForTestingGuard
});
var hex_control_macro_IMacroExecutor = function() { };
$hxClasses["hex.control.macro.IMacroExecutor"] = hex_control_macro_IMacroExecutor;
hex_control_macro_IMacroExecutor.__name__ = ["hex","control","macro","IMacroExecutor"];
hex_control_macro_IMacroExecutor.prototype = {
	get_hasNextCommandMapping: null
	,get_hasRunEveryCommand: null
	,get_commandIndex: null
	,add: null
	,executeNextCommand: null
	,hasNextCommandMapping: null
	,setAsyncCommandListener: null
	,asyncCommandCalled: null
	,hasRunEveryCommand: null
	,commandIndex: null
	,addMapping: null
	,__class__: hex_control_macro_IMacroExecutor
	,__properties__: {get_commandIndex:"get_commandIndex",get_hasRunEveryCommand:"get_hasRunEveryCommand",get_hasNextCommandMapping:"get_hasNextCommandMapping"}
};
var hex_control_macro_MVCMacroSuite = function() {
	this.list = [hex_control_macro_MacroExecutorTest,hex_control_macro_MacroTest];
};
$hxClasses["hex.control.macro.MVCMacroSuite"] = hex_control_macro_MVCMacroSuite;
hex_control_macro_MVCMacroSuite.__name__ = ["hex","control","macro","MVCMacroSuite"];
hex_control_macro_MVCMacroSuite.prototype = {
	list: null
	,__class__: hex_control_macro_MVCMacroSuite
};
var hex_control_macro_Macro = function() {
	this._isSequenceMode = true;
	this._isAtomic = true;
	hex_control_async_AsyncCommand.call(this);
	this.set_isAtomic(true);
	this.set_isInSequenceMode(true);
};
$hxClasses["hex.control.macro.Macro"] = hex_control_macro_Macro;
hex_control_macro_Macro.__name__ = ["hex","control","macro","Macro"];
hex_control_macro_Macro.__interfaces__ = [hex_control_async_IAsyncCommandListener];
hex_control_macro_Macro.__super__ = hex_control_async_AsyncCommand;
hex_control_macro_Macro.prototype = $extend(hex_control_async_AsyncCommand.prototype,{
	_request: null
	,_isAtomic: null
	,_isSequenceMode: null
	,macroExecutor: null
	,_prepare: function() {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".execute must be overridden",{ fileName : "Macro.hx", lineNumber : 36, className : "hex.control.macro.Macro", methodName : "_prepare"}));
	}
	,preExecute: function() {
		if(this.macroExecutor != null) this.macroExecutor.setAsyncCommandListener(this); else throw new js__$Boot_HaxeError(new hex_error_NullPointerException("macroExecutor can't be null in '" + hex_log_Stringifier.stringify(this) + "'",{ fileName : "Macro.hx", lineNumber : 47, className : "hex.control.macro.Macro", methodName : "preExecute"}));
		this._prepare();
		hex_control_async_AsyncCommand.prototype.preExecute.call(this);
	}
	,execute: function(request) {
		!this.get_isRunning() && this._throwExecutionIllegalStateError();
		this._request = request;
		this._executeNextCommand();
	}
	,add: function(commandClass) {
		return this.macroExecutor.add(commandClass);
	}
	,addMapping: function(mapping) {
		return this.macroExecutor.addMapping(mapping);
	}
	,_executeCommand: function() {
		var command = this.macroExecutor.executeNextCommand(this._request);
		if(command != null) {
			var isAsync = js_Boot.__instanceof(command,hex_control_async_IAsyncCommand);
			if(!isAsync || this.get_isInParallelMode()) this._executeNextCommand();
		}
	}
	,_executeNextCommand: function() {
		if(this.macroExecutor.get_hasNextCommandMapping()) this._executeCommand(); else if(this.macroExecutor.get_hasRunEveryCommand()) this._handleComplete();
	}
	,isAtomic: null
	,get_isAtomic: function() {
		return this.isAtomic;
	}
	,set_isAtomic: function(value) {
		this.isAtomic = value;
		return value;
	}
	,isInSequenceMode: null
	,get_isInSequenceMode: function() {
		return this.isInSequenceMode;
	}
	,set_isInSequenceMode: function(value) {
		this.isInSequenceMode = value;
		return value;
	}
	,isInParallelMode: null
	,get_isInParallelMode: function() {
		return !this.get_isInSequenceMode();
	}
	,set_isInParallelMode: function(value) {
		this.set_isInSequenceMode(!value);
		return this.get_isInSequenceMode();
	}
	,onAsyncCommandComplete: function(cmd) {
		this.macroExecutor.asyncCommandCalled(cmd);
		this._executeNextCommand();
	}
	,onAsyncCommandFail: function(cmd) {
		if(cmd != null) this.macroExecutor.asyncCommandCalled(cmd);
		if(this.get_isAtomic()) {
			if(this.get_isRunning()) this._handleFail();
		} else this._executeNextCommand();
	}
	,onAsyncCommandCancel: function(cmd) {
		this.macroExecutor.asyncCommandCalled(cmd);
		if(this.get_isAtomic()) this.cancel(); else this._executeNextCommand();
	}
	,toString: function() {
		return hex_log_Stringifier.stringify(this);
	}
	,__class__: hex_control_macro_Macro
	,__properties__: $extend(hex_control_async_AsyncCommand.prototype.__properties__,{set_isInParallelMode:"set_isInParallelMode",get_isInParallelMode:"get_isInParallelMode",set_isInSequenceMode:"set_isInSequenceMode",get_isInSequenceMode:"get_isInSequenceMode",set_isAtomic:"set_isAtomic",get_isAtomic:"get_isAtomic"})
});
var hex_control_macro_MacroExecutor = function() {
	this._commandMappingCollection = [];
	this._runningAsyncCommandList = [];
	this._commandIndex = 0;
	this._commandCalledCount = 0;
};
$hxClasses["hex.control.macro.MacroExecutor"] = hex_control_macro_MacroExecutor;
hex_control_macro_MacroExecutor.__name__ = ["hex","control","macro","MacroExecutor"];
hex_control_macro_MacroExecutor.__interfaces__ = [hex_control_macro_IMacroExecutor];
hex_control_macro_MacroExecutor.prototype = {
	injector: null
	,_commandIndex: null
	,_commandCalledCount: null
	,_asyncCommandListener: null
	,_runningAsyncCommandList: null
	,_commandMappingCollection: null
	,executeCommand: function(mapping,request) {
		var injector = null;
		var contextOwner = mapping.getContextOwner();
		if(contextOwner != null) injector = contextOwner.getBasicInjector(); else injector = this.injector;
		var payloads = mapping.getPayloads();
		if(request != null) if(payloads != null) payloads = payloads.concat(request.getExecutionPayloads()); else payloads = request.getExecutionPayloads();
		if(mapping.get_hasMappingResult()) if(payloads != null) payloads = payloads.concat(mapping.getPayloadResult()); else payloads = mapping.getPayloadResult();
		if(payloads != null) hex_control_payload_PayloadUtil.mapPayload(payloads,injector);
		var command = null;
		if(!mapping.get_hasGuard() || hex_control_guard_GuardUtil.guardsApprove(mapping.getGuards(),injector)) {
			command = injector.getOrCreateNewInstance(mapping.getCommandClass());
			mapping.setLastCommandInstance(command);
		} else {
			this._commandCalledCount++;
			this._asyncCommandListener.onAsyncCommandFail(null);
			return null;
		}
		if(payloads != null) hex_control_payload_PayloadUtil.unmapPayload(payloads,injector);
		if(command != null) {
			if(injector.hasMapping(hex_module_IModule)) command.setOwner(injector.getInstance(hex_module_IModule));
			var isAsync = js_Boot.__instanceof(command,hex_control_async_IAsyncCommand);
			if(isAsync) {
				var aSyncCommand;
				aSyncCommand = js_Boot.__cast(command , hex_control_async_IAsyncCommand);
				aSyncCommand.preExecute();
				if(mapping.get_hasCompleteHandler()) hex_control_async_AsyncCommandUtil.addListenersToAsyncCommand(mapping.getCompleteHandlers(),$bind(aSyncCommand,aSyncCommand.addCompleteHandler));
				if(mapping.get_hasFailHandler()) hex_control_async_AsyncCommandUtil.addListenersToAsyncCommand(mapping.getFailHandlers(),$bind(aSyncCommand,aSyncCommand.addFailHandler));
				if(mapping.get_hasCancelHandler()) hex_control_async_AsyncCommandUtil.addListenersToAsyncCommand(mapping.getCancelHandlers(),$bind(aSyncCommand,aSyncCommand.addCancelHandler));
				aSyncCommand.addAsyncCommandListener(this._asyncCommandListener);
				this._runningAsyncCommandList.push(aSyncCommand);
			}
			Reflect.callMethod(command,command.getExecuteMethod(),[request]);
			if(!isAsync) this._commandCalledCount++;
		}
		return command;
	}
	,commandIndex: null
	,get_commandIndex: function() {
		return this._commandIndex;
	}
	,hasRunEveryCommand: null
	,get_hasRunEveryCommand: function() {
		return this._commandCalledCount == this._commandMappingCollection.length;
	}
	,setAsyncCommandListener: function(listener) {
		this._asyncCommandListener = listener;
	}
	,hasNextCommandMapping: null
	,get_hasNextCommandMapping: function() {
		return this._commandMappingCollection != null && this._commandIndex < this._commandMappingCollection.length;
	}
	,add: function(commandClass) {
		var mapping = new hex_control_command_CommandMapping(commandClass);
		this._commandMappingCollection.push(mapping);
		return mapping;
	}
	,addMapping: function(mapping) {
		this._commandMappingCollection.push(mapping);
		return mapping;
	}
	,executeNextCommand: function(request) {
		return this.executeCommand(this._commandMappingCollection[this._commandIndex++],request);
	}
	,asyncCommandCalled: function(asyncCommand) {
		var index = HxOverrides.indexOf(this._runningAsyncCommandList,asyncCommand,0);
		if(index > -1) {
			this._runningAsyncCommandList.splice(index,1);
			this._commandCalledCount++;
		} else throw new js__$Boot_HaxeError(new hex_error_IllegalStateException("Following command was not running: " + Std.string(asyncCommand),{ fileName : "MacroExecutor.hx", lineNumber : 179, className : "hex.control.macro.MacroExecutor", methodName : "asyncCommandCalled"}));
	}
	,__class__: hex_control_macro_MacroExecutor
	,__properties__: {get_hasNextCommandMapping:"get_hasNextCommandMapping",get_hasRunEveryCommand:"get_hasRunEveryCommand",get_commandIndex:"get_commandIndex"}
};
var hex_control_macro_MacroExecutorTest = function() { };
$hxClasses["hex.control.macro.MacroExecutorTest"] = hex_control_macro_MacroExecutorTest;
hex_control_macro_MacroExecutorTest.__name__ = ["hex","control","macro","MacroExecutorTest"];
hex_control_macro_MacroExecutorTest.prototype = {
	_macroExecutor: null
	,_injector: null
	,_module: null
	,_mockMacro: null
	,setUp: function() {
		this._injector = new hex_control_macro__$MacroExecutorTest_MockDependencyInjectorForMapping();
		this._module = new hex_module_MockModule();
		this._macroExecutor = new hex_control_macro_MacroExecutor();
		this._mockMacro = new hex_control_macro__$MacroExecutorTest_MockMacroListener(this._macroExecutor);
		this._macroExecutor.setAsyncCommandListener(this._mockMacro);
		this._macroExecutor.injector = this._injector;
	}
	,tearDown: function() {
		this._injector = null;
		this._module = null;
		this._macroExecutor = null;
		this._mockMacro = null;
	}
	,testCommandIndex: function() {
		hex_unittest_assertion_Assert.equals(0,this._macroExecutor.get_commandIndex(),"'commandIndex' should return 0",{ fileName : "MacroExecutorTest.hx", lineNumber : 58, className : "hex.control.macro.MacroExecutorTest", methodName : "testCommandIndex"});
		this._macroExecutor.add(hex_control_macro__$MacroExecutorTest_MockAsyncCommand);
		this._macroExecutor.executeNextCommand();
		hex_unittest_assertion_Assert.equals(1,this._macroExecutor.get_commandIndex(),"'commandIndex' should return 1",{ fileName : "MacroExecutorTest.hx", lineNumber : 61, className : "hex.control.macro.MacroExecutorTest", methodName : "testCommandIndex"});
	}
	,testHasNextCommandMapping: function() {
		hex_unittest_assertion_Assert.isFalse(this._macroExecutor.get_hasNextCommandMapping(),"'hasNextCommandMapping' should return false",{ fileName : "MacroExecutorTest.hx", lineNumber : 67, className : "hex.control.macro.MacroExecutorTest", methodName : "testHasNextCommandMapping"});
		this._macroExecutor.add(hex_control_macro__$MacroExecutorTest_MockAsyncCommand);
		hex_unittest_assertion_Assert.isTrue(this._macroExecutor.get_hasNextCommandMapping(),"'hasNextCommandMapping' should return true",{ fileName : "MacroExecutorTest.hx", lineNumber : 69, className : "hex.control.macro.MacroExecutorTest", methodName : "testHasNextCommandMapping"});
		this._macroExecutor.executeNextCommand();
		hex_unittest_assertion_Assert.isFalse(this._macroExecutor.get_hasNextCommandMapping(),"'hasNextCommandMapping' should return false",{ fileName : "MacroExecutorTest.hx", lineNumber : 71, className : "hex.control.macro.MacroExecutorTest", methodName : "testHasNextCommandMapping"});
	}
	,testHasRunEveryCommand: function() {
		hex_unittest_assertion_Assert.isTrue(this._macroExecutor.get_hasRunEveryCommand(),"'hasRunEveryCommand' should return true",{ fileName : "MacroExecutorTest.hx", lineNumber : 77, className : "hex.control.macro.MacroExecutorTest", methodName : "testHasRunEveryCommand"});
		this._macroExecutor.add(hex_control_macro__$MacroExecutorTest_MockCommand);
		hex_unittest_assertion_Assert.isFalse(this._macroExecutor.get_hasRunEveryCommand(),"'hasRunEveryCommand' should return false",{ fileName : "MacroExecutorTest.hx", lineNumber : 79, className : "hex.control.macro.MacroExecutorTest", methodName : "testHasRunEveryCommand"});
		this._macroExecutor.executeNextCommand();
		hex_unittest_assertion_Assert.isTrue(this._macroExecutor.get_hasRunEveryCommand(),"'hasRunEveryCommand' should return true",{ fileName : "MacroExecutorTest.hx", lineNumber : 81, className : "hex.control.macro.MacroExecutorTest", methodName : "testHasRunEveryCommand"});
		this._macroExecutor.add(hex_control_macro__$MacroExecutorTest_MockAsyncCommand);
		hex_unittest_assertion_Assert.isFalse(this._macroExecutor.get_hasRunEveryCommand(),"'hasRunEveryCommand' should return false",{ fileName : "MacroExecutorTest.hx", lineNumber : 83, className : "hex.control.macro.MacroExecutorTest", methodName : "testHasRunEveryCommand"});
		this._macroExecutor.executeNextCommand();
		haxe_Timer.delay(hex_unittest_runner_MethodRunner.asyncHandler($bind(this,this._onTestHasRunEveryCommand)),100);
	}
	,testExecuteNextCommand: function() {
		this._macroExecutor.add(hex_control_macro__$MacroExecutorTest_MockCommand);
		this._macroExecutor.add(hex_control_macro__$MacroExecutorTest_MockAsyncCommand);
		var command = this._macroExecutor.executeNextCommand();
		hex_unittest_assertion_Assert.isInstanceOf(command,hex_control_macro__$MacroExecutorTest_MockCommand,"command should be typed 'MockCommand'",{ fileName : "MacroExecutorTest.hx", lineNumber : 94, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteNextCommand"});
		command = this._macroExecutor.executeNextCommand();
		hex_unittest_assertion_Assert.isInstanceOf(command,hex_control_macro__$MacroExecutorTest_MockAsyncCommand,"command should be typed 'MockCommand'",{ fileName : "MacroExecutorTest.hx", lineNumber : 96, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteNextCommand"});
	}
	,testAsyncCommandCalled: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this._macroExecutor,($_=this._macroExecutor,$bind($_,$_.asyncCommandCalled)),[new hex_control_async_AsyncCommand()],"asyncCommandCalled should throw IllegalStateException",{ fileName : "MacroExecutorTest.hx", lineNumber : 102, className : "hex.control.macro.MacroExecutorTest", methodName : "testAsyncCommandCalled"});
	}
	,_onTestHasRunEveryCommand: function() {
		hex_unittest_assertion_Assert.isTrue(this._macroExecutor.get_hasRunEveryCommand(),"'hasRunEveryCommand' should return true",{ fileName : "MacroExecutorTest.hx", lineNumber : 107, className : "hex.control.macro.MacroExecutorTest", methodName : "_onTestHasRunEveryCommand"});
	}
	,testAdd: function() {
		hex_unittest_assertion_Assert.isFalse(this._macroExecutor.get_hasNextCommandMapping(),"'hasNextCommandMapping' should return false",{ fileName : "MacroExecutorTest.hx", lineNumber : 113, className : "hex.control.macro.MacroExecutorTest", methodName : "testAdd"});
		var commandMapping = this._macroExecutor.add(hex_control_macro__$MacroExecutorTest_MockAsyncCommand);
		hex_unittest_assertion_Assert.equals(hex_control_macro__$MacroExecutorTest_MockAsyncCommand,commandMapping.getCommandClass(),"'add' should return expected mapping with right same command class",{ fileName : "MacroExecutorTest.hx", lineNumber : 116, className : "hex.control.macro.MacroExecutorTest", methodName : "testAdd"});
		hex_unittest_assertion_Assert.equals(0,this._macroExecutor.get_commandIndex(),"'commandIndex' should return 0",{ fileName : "MacroExecutorTest.hx", lineNumber : 117, className : "hex.control.macro.MacroExecutorTest", methodName : "testAdd"});
		hex_unittest_assertion_Assert.isTrue(this._macroExecutor.get_hasNextCommandMapping(),"'hasNextCommandMapping' should return true",{ fileName : "MacroExecutorTest.hx", lineNumber : 118, className : "hex.control.macro.MacroExecutorTest", methodName : "testAdd"});
		hex_unittest_assertion_Assert.isFalse(this._macroExecutor.get_hasRunEveryCommand(),"'hasRunEveryCommand' should return false",{ fileName : "MacroExecutorTest.hx", lineNumber : 119, className : "hex.control.macro.MacroExecutorTest", methodName : "testAdd"});
	}
	,testAddMapping: function() {
		hex_unittest_assertion_Assert.isFalse(this._macroExecutor.get_hasNextCommandMapping(),"'hasNextCommandMapping' should return false",{ fileName : "MacroExecutorTest.hx", lineNumber : 125, className : "hex.control.macro.MacroExecutorTest", methodName : "testAddMapping"});
		var commandMapping = new hex_control_command_CommandMapping(hex_control_macro__$MacroExecutorTest_MockAsyncCommand);
		var returnedCommandMapping = this._macroExecutor.addMapping(commandMapping);
		hex_unittest_assertion_Assert.equals(commandMapping,returnedCommandMapping,"'addMapping' should return ethe same command mapping",{ fileName : "MacroExecutorTest.hx", lineNumber : 129, className : "hex.control.macro.MacroExecutorTest", methodName : "testAddMapping"});
		hex_unittest_assertion_Assert.equals(0,this._macroExecutor.get_commandIndex(),"'commandIndex' should return 0",{ fileName : "MacroExecutorTest.hx", lineNumber : 130, className : "hex.control.macro.MacroExecutorTest", methodName : "testAddMapping"});
		hex_unittest_assertion_Assert.isTrue(this._macroExecutor.get_hasNextCommandMapping(),"'hasNextCommandMapping' should return true",{ fileName : "MacroExecutorTest.hx", lineNumber : 131, className : "hex.control.macro.MacroExecutorTest", methodName : "testAddMapping"});
		hex_unittest_assertion_Assert.isFalse(this._macroExecutor.get_hasRunEveryCommand(),"'hasRunEveryCommand' should return false",{ fileName : "MacroExecutorTest.hx", lineNumber : 132, className : "hex.control.macro.MacroExecutorTest", methodName : "testAddMapping"});
	}
	,testExecuteCommand: function() {
		var commandMapping = new hex_control_command_CommandMapping(hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution);
		var listener0 = new hex_control_macro__$MacroExecutorTest_ASyncCommandListener();
		var listener1 = new hex_control_macro__$MacroExecutorTest_ASyncCommandListener();
		var listener2 = new hex_control_macro__$MacroExecutorTest_ASyncCommandListener();
		var completeHandlers = [$bind(listener0,listener0.onAsyncCommandComplete),$bind(listener1,listener1.onAsyncCommandComplete),$bind(listener2,listener2.onAsyncCommandComplete)];
		var failHandlers = [$bind(listener0,listener0.onAsyncCommandFail),$bind(listener1,listener1.onAsyncCommandFail),$bind(listener2,listener2.onAsyncCommandFail)];
		var cancelHandlers = [$bind(listener0,listener0.onAsyncCommandCancel),$bind(listener1,listener1.onAsyncCommandCancel),$bind(listener2,listener2.onAsyncCommandCancel)];
		commandMapping.withCompleteHandlers(new hex_control_async_AsyncHandler(listener0,$bind(listener0,listener0.onAsyncCommandComplete))).withCompleteHandlers(new hex_control_async_AsyncHandler(listener1,$bind(listener1,listener1.onAsyncCommandComplete))).withCompleteHandlers(new hex_control_async_AsyncHandler(listener2,$bind(listener2,listener2.onAsyncCommandComplete)));
		commandMapping.withFailHandlers(new hex_control_async_AsyncHandler(listener0,$bind(listener0,listener0.onAsyncCommandFail))).withFailHandlers(new hex_control_async_AsyncHandler(listener1,$bind(listener1,listener1.onAsyncCommandFail))).withFailHandlers(new hex_control_async_AsyncHandler(listener2,$bind(listener2,listener2.onAsyncCommandFail)));
		commandMapping.withCancelHandlers(new hex_control_async_AsyncHandler(listener0,$bind(listener0,listener0.onAsyncCommandCancel))).withCancelHandlers(new hex_control_async_AsyncHandler(listener1,$bind(listener1,listener1.onAsyncCommandCancel))).withCancelHandlers(new hex_control_async_AsyncHandler(listener2,$bind(listener2,listener2.onAsyncCommandCancel)));
		var mockImplementation = new hex_control_macro__$MacroExecutorTest_MockImplementation("mockImplementation");
		var mockPayload = new hex_control_payload_ExecutionPayload(mockImplementation,hex_control_macro__$MacroExecutorTest_IMockType,"mockPayload");
		commandMapping.withPayloads([mockPayload]);
		var stringPayload = new hex_control_payload_ExecutionPayload("test",String,"stringPayload");
		var anotherMockImplementation = new hex_control_macro__$MacroExecutorTest_MockImplementation("anotherMockImplementation");
		var anotherMockPayload = new hex_control_payload_ExecutionPayload(anotherMockImplementation,hex_control_macro__$MacroExecutorTest_IMockType,"anotherMockPayload");
		var payloads = [stringPayload,anotherMockPayload];
		var request = new hex_control_Request(payloads);
		var command = this._macroExecutor.executeCommand(commandMapping,request);
		hex_unittest_assertion_Assert.isNotNull(command,"'command' should not be null",{ fileName : "MacroExecutorTest.hx", lineNumber : 172, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
		hex_unittest_assertion_Assert.isInstanceOf(command,hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution,"'command' shouldbe typed 'MockAsyncCommandForTestingExecution'",{ fileName : "MacroExecutorTest.hx", lineNumber : 173, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
		hex_unittest_assertion_Assert.equals(1,hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.executeCallCount,"preExecute should be called once",{ fileName : "MacroExecutorTest.hx", lineNumber : 175, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
		hex_unittest_assertion_Assert.equals(1,hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.preExecuteCallCount,"execute should be called once",{ fileName : "MacroExecutorTest.hx", lineNumber : 176, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
		hex_unittest_assertion_Assert.equals(request,hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.request,"request should be the same",{ fileName : "MacroExecutorTest.hx", lineNumber : 178, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
		hex_unittest_assertion_Assert.deepEquals(request,hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.request,"request should be the same",{ fileName : "MacroExecutorTest.hx", lineNumber : 180, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
		hex_unittest_assertion_Assert.arrayContains(completeHandlers,hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.completeHandlers,"complete handlers should be added to async command instance",{ fileName : "MacroExecutorTest.hx", lineNumber : 182, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
		hex_unittest_assertion_Assert.arrayContains(failHandlers,hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.failHandlers,"fail handlers should be added to async command instance",{ fileName : "MacroExecutorTest.hx", lineNumber : 183, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
		hex_unittest_assertion_Assert.arrayContains(cancelHandlers,hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.cancelHandlers,"cancel handlers should be added to async command instance",{ fileName : "MacroExecutorTest.hx", lineNumber : 184, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
		hex_unittest_assertion_Assert.equals(1,this._injector.getOrCreateNewInstanceCallCount,"'injector.getOrCreateNewInstance' method should be called once",{ fileName : "MacroExecutorTest.hx", lineNumber : 186, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
		hex_unittest_assertion_Assert.equals(hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution,this._injector.getOrCreateNewInstanceCallParameter,"'injector.getOrCreateNewInstance' parameter should be command class",{ fileName : "MacroExecutorTest.hx", lineNumber : 187, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
		hex_unittest_assertion_Assert.deepEquals([[mockImplementation,hex_control_macro__$MacroExecutorTest_IMockType,"mockPayload"],["test",String,"stringPayload"],[anotherMockImplementation,hex_control_macro__$MacroExecutorTest_IMockType,"anotherMockPayload"]],this._injector.mappedPayloads,"'CommandExecutor.mapPayload' should map right values",{ fileName : "MacroExecutorTest.hx", lineNumber : 189, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
		hex_unittest_assertion_Assert.deepEquals([[hex_control_macro__$MacroExecutorTest_IMockType,"mockPayload"],[String,"stringPayload"],[hex_control_macro__$MacroExecutorTest_IMockType,"anotherMockPayload"]],this._injector.unmappedPayloads,"'CommandExecutor.unmapPayload' should unmap right values",{ fileName : "MacroExecutorTest.hx", lineNumber : 193, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommand"});
	}
	,testExecuteCommandWithApprovedGuards: function() {
		var commandMapping = new hex_control_command_CommandMapping(hex_control_macro__$MacroExecutorTest_MockCommand).withGuards([$bind(this,this.thatWillBeApproved)]);
		var command = this._macroExecutor.executeCommand(commandMapping);
		hex_unittest_assertion_Assert.isNotNull(command,"'command' should not be null",{ fileName : "MacroExecutorTest.hx", lineNumber : 203, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommandWithApprovedGuards"});
		hex_unittest_assertion_Assert.isInstanceOf(command,hex_control_macro__$MacroExecutorTest_MockCommand,"'command' shouldbe typed 'MockCommand'",{ fileName : "MacroExecutorTest.hx", lineNumber : 204, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommandWithApprovedGuards"});
	}
	,testExecuteCommandWithRefusedGuards: function() {
		var failListener = new hex_control_macro__$MacroExecutorTest_MockMacroFailListener();
		this._macroExecutor.setAsyncCommandListener(failListener);
		var commandMapping = new hex_control_command_CommandMapping(hex_control_macro__$MacroExecutorTest_MockCommand).withGuards([$bind(this,this.thatWillBeRefused)]);
		var command = this._macroExecutor.executeCommand(commandMapping);
		hex_unittest_assertion_Assert.isNull(command,"'command' should be null",{ fileName : "MacroExecutorTest.hx", lineNumber : 215, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommandWithRefusedGuards"});
		hex_unittest_assertion_Assert.equals(1,failListener.onAsyncCommandFailCallCount,"'onAsyncCommandFail' method should be called once",{ fileName : "MacroExecutorTest.hx", lineNumber : 216, className : "hex.control.macro.MacroExecutorTest", methodName : "testExecuteCommandWithRefusedGuards"});
	}
	,thatWillBeApproved: function() {
		return true;
	}
	,thatWillBeRefused: function() {
		return false;
	}
	,textExecuteCommandWithMappingResults: function() {
		var mapping = this._macroExecutor.add(hex_control_macro__$MacroExecutorTest_MockCommandWithReturnedPayload);
		var mappingWithMappingResults = this._macroExecutor.add(hex_control_macro__$MacroExecutorTest_MockCommandUsingMappingResults).withMappingResults([mapping]);
		var request = new hex_control_Request();
		this._macroExecutor.executeCommand(mapping,request);
		this._macroExecutor.executeCommand(mappingWithMappingResults,request);
		hex_unittest_assertion_Assert.deepEquals([["s",String,""]],this._injector.mappedPayloads,"'CommandExecutor.mapPayload' should map right values",{ fileName : "MacroExecutorTest.hx", lineNumber : 239, className : "hex.control.macro.MacroExecutorTest", methodName : "textExecuteCommandWithMappingResults"});
	}
	,__class__: hex_control_macro_MacroExecutorTest
};
var hex_control_macro__$MacroExecutorTest_MockCommandWithReturnedPayload = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.control.macro._MacroExecutorTest.MockCommandWithReturnedPayload"] = hex_control_macro__$MacroExecutorTest_MockCommandWithReturnedPayload;
hex_control_macro__$MacroExecutorTest_MockCommandWithReturnedPayload.__name__ = ["hex","control","macro","_MacroExecutorTest","MockCommandWithReturnedPayload"];
hex_control_macro__$MacroExecutorTest_MockCommandWithReturnedPayload.__super__ = hex_control_command_BasicCommand;
hex_control_macro__$MacroExecutorTest_MockCommandWithReturnedPayload.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	execute: function(request) {
	}
	,getReturnedExecutionPayload: function() {
		return [new hex_control_payload_ExecutionPayload("s",String)];
	}
	,__class__: hex_control_macro__$MacroExecutorTest_MockCommandWithReturnedPayload
});
var hex_control_macro__$MacroExecutorTest_MockCommandUsingMappingResults = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.control.macro._MacroExecutorTest.MockCommandUsingMappingResults"] = hex_control_macro__$MacroExecutorTest_MockCommandUsingMappingResults;
hex_control_macro__$MacroExecutorTest_MockCommandUsingMappingResults.__name__ = ["hex","control","macro","_MacroExecutorTest","MockCommandUsingMappingResults"];
hex_control_macro__$MacroExecutorTest_MockCommandUsingMappingResults.__super__ = hex_control_command_BasicCommand;
hex_control_macro__$MacroExecutorTest_MockCommandUsingMappingResults.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	value: null
	,execute: function(request) {
	}
	,__class__: hex_control_macro__$MacroExecutorTest_MockCommandUsingMappingResults
});
var hex_control_macro__$MacroExecutorTest_MockAsyncCommand = function() {
	hex_control_async_AsyncCommand.call(this);
};
$hxClasses["hex.control.macro._MacroExecutorTest.MockAsyncCommand"] = hex_control_macro__$MacroExecutorTest_MockAsyncCommand;
hex_control_macro__$MacroExecutorTest_MockAsyncCommand.__name__ = ["hex","control","macro","_MacroExecutorTest","MockAsyncCommand"];
hex_control_macro__$MacroExecutorTest_MockAsyncCommand.__super__ = hex_control_async_AsyncCommand;
hex_control_macro__$MacroExecutorTest_MockAsyncCommand.prototype = $extend(hex_control_async_AsyncCommand.prototype,{
	execute: function(request) {
		haxe_Timer.delay($bind(this,this._handleComplete),50);
	}
	,__class__: hex_control_macro__$MacroExecutorTest_MockAsyncCommand
});
var hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution = function() {
	hex_control_macro__$MacroExecutorTest_MockAsyncCommand.call(this);
};
$hxClasses["hex.control.macro._MacroExecutorTest.MockAsyncCommandForTestingExecution"] = hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution;
hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.__name__ = ["hex","control","macro","_MacroExecutorTest","MockAsyncCommandForTestingExecution"];
hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.__super__ = hex_control_macro__$MacroExecutorTest_MockAsyncCommand;
hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.prototype = $extend(hex_control_macro__$MacroExecutorTest_MockAsyncCommand.prototype,{
	setOwner: function(owner) {
		hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.owner = owner;
	}
	,preExecute: function() {
		hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.preExecuteCallCount++;
	}
	,execute: function(request) {
		hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.executeCallCount++;
		hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.request = request;
	}
	,addCompleteHandler: function(scope,callback) {
		hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.completeHandlers.push(callback);
	}
	,addFailHandler: function(scope,callback) {
		hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.failHandlers.push(callback);
	}
	,addCancelHandler: function(scope,callback) {
		hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.cancelHandlers.push(callback);
	}
	,__class__: hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution
});
var hex_control_macro__$MacroExecutorTest_MockCommand = function() {
};
$hxClasses["hex.control.macro._MacroExecutorTest.MockCommand"] = hex_control_macro__$MacroExecutorTest_MockCommand;
hex_control_macro__$MacroExecutorTest_MockCommand.__name__ = ["hex","control","macro","_MacroExecutorTest","MockCommand"];
hex_control_macro__$MacroExecutorTest_MockCommand.__interfaces__ = [hex_control_command_ICommand];
hex_control_macro__$MacroExecutorTest_MockCommand.prototype = {
	_owner: null
	,execute: function(request) {
	}
	,getResult: function() {
		return null;
	}
	,getReturnedExecutionPayload: function() {
		return null;
	}
	,getOwner: function() {
		return this._owner;
	}
	,setOwner: function(owner) {
		this._owner = owner;
	}
	,getExecuteMethod: function() {
		return $bind(this,this.execute);
	}
	,__class__: hex_control_macro__$MacroExecutorTest_MockCommand
};
var hex_control_macro__$MacroExecutorTest_ASyncCommandListener = function() {
};
$hxClasses["hex.control.macro._MacroExecutorTest.ASyncCommandListener"] = hex_control_macro__$MacroExecutorTest_ASyncCommandListener;
hex_control_macro__$MacroExecutorTest_ASyncCommandListener.__name__ = ["hex","control","macro","_MacroExecutorTest","ASyncCommandListener"];
hex_control_macro__$MacroExecutorTest_ASyncCommandListener.__interfaces__ = [hex_control_async_IAsyncCommandListener];
hex_control_macro__$MacroExecutorTest_ASyncCommandListener.prototype = {
	onAsyncCommandComplete: function(cmd) {
	}
	,onAsyncCommandFail: function(cmd) {
	}
	,onAsyncCommandCancel: function(cmd) {
	}
	,__class__: hex_control_macro__$MacroExecutorTest_ASyncCommandListener
};
var hex_control_macro__$MacroExecutorTest_MockMacroFailListener = function() {
	this.onAsyncCommandFailCallCount = 0;
	hex_control_macro__$MacroExecutorTest_ASyncCommandListener.call(this);
};
$hxClasses["hex.control.macro._MacroExecutorTest.MockMacroFailListener"] = hex_control_macro__$MacroExecutorTest_MockMacroFailListener;
hex_control_macro__$MacroExecutorTest_MockMacroFailListener.__name__ = ["hex","control","macro","_MacroExecutorTest","MockMacroFailListener"];
hex_control_macro__$MacroExecutorTest_MockMacroFailListener.__super__ = hex_control_macro__$MacroExecutorTest_ASyncCommandListener;
hex_control_macro__$MacroExecutorTest_MockMacroFailListener.prototype = $extend(hex_control_macro__$MacroExecutorTest_ASyncCommandListener.prototype,{
	onAsyncCommandFailCallCount: null
	,failCommand: null
	,onAsyncCommandFail: function(cmd) {
		this.onAsyncCommandFailCallCount++;
		this.failCommand = cmd;
	}
	,__class__: hex_control_macro__$MacroExecutorTest_MockMacroFailListener
});
var hex_control_macro__$MacroExecutorTest_MockMacroListener = function(macroExecutor) {
	this._macroExecutor = macroExecutor;
	hex_control_macro__$MacroExecutorTest_ASyncCommandListener.call(this);
};
$hxClasses["hex.control.macro._MacroExecutorTest.MockMacroListener"] = hex_control_macro__$MacroExecutorTest_MockMacroListener;
hex_control_macro__$MacroExecutorTest_MockMacroListener.__name__ = ["hex","control","macro","_MacroExecutorTest","MockMacroListener"];
hex_control_macro__$MacroExecutorTest_MockMacroListener.__super__ = hex_control_macro__$MacroExecutorTest_ASyncCommandListener;
hex_control_macro__$MacroExecutorTest_MockMacroListener.prototype = $extend(hex_control_macro__$MacroExecutorTest_ASyncCommandListener.prototype,{
	_macroExecutor: null
	,onAsyncCommandComplete: function(cmd) {
		this._macroExecutor.asyncCommandCalled(cmd);
	}
	,onAsyncCommandFail: function(cmd) {
		this._macroExecutor.asyncCommandCalled(cmd);
	}
	,onAsyncCommandCancel: function(cmd) {
		this._macroExecutor.asyncCommandCalled(cmd);
	}
	,__class__: hex_control_macro__$MacroExecutorTest_MockMacroListener
});
var hex_control_macro__$MacroExecutorTest_MockDependencyInjectorForMapping = function() {
	this.unmappedPayloads = [];
	this.mappedPayloads = [];
	this.getOrCreateNewInstanceCallCount = 0;
	hex_MockDependencyInjector.call(this);
};
$hxClasses["hex.control.macro._MacroExecutorTest.MockDependencyInjectorForMapping"] = hex_control_macro__$MacroExecutorTest_MockDependencyInjectorForMapping;
hex_control_macro__$MacroExecutorTest_MockDependencyInjectorForMapping.__name__ = ["hex","control","macro","_MacroExecutorTest","MockDependencyInjectorForMapping"];
hex_control_macro__$MacroExecutorTest_MockDependencyInjectorForMapping.__super__ = hex_MockDependencyInjector;
hex_control_macro__$MacroExecutorTest_MockDependencyInjectorForMapping.prototype = $extend(hex_MockDependencyInjector.prototype,{
	getOrCreateNewInstanceCallCount: null
	,getOrCreateNewInstanceCallParameter: null
	,mappedPayloads: null
	,unmappedPayloads: null
	,mapToValue: function(clazz,value,name) {
		if(name == null) name = "";
		this.mappedPayloads.push([value,clazz,name]);
	}
	,unmap: function(type,name) {
		if(name == null) name = "";
		this.unmappedPayloads.push([type,name]);
	}
	,getOrCreateNewInstance: function(type) {
		this.getOrCreateNewInstanceCallCount++;
		this.getOrCreateNewInstanceCallParameter = type;
		return Type.createInstance(type,[]);
	}
	,__class__: hex_control_macro__$MacroExecutorTest_MockDependencyInjectorForMapping
});
var hex_control_macro__$MacroExecutorTest_IMockType = function() { };
$hxClasses["hex.control.macro._MacroExecutorTest.IMockType"] = hex_control_macro__$MacroExecutorTest_IMockType;
hex_control_macro__$MacroExecutorTest_IMockType.__name__ = ["hex","control","macro","_MacroExecutorTest","IMockType"];
var hex_control_macro__$MacroExecutorTest_MockImplementation = function(name) {
	this.name = name;
};
$hxClasses["hex.control.macro._MacroExecutorTest.MockImplementation"] = hex_control_macro__$MacroExecutorTest_MockImplementation;
hex_control_macro__$MacroExecutorTest_MockImplementation.__name__ = ["hex","control","macro","_MacroExecutorTest","MockImplementation"];
hex_control_macro__$MacroExecutorTest_MockImplementation.__interfaces__ = [hex_control_macro__$MacroExecutorTest_IMockType];
hex_control_macro__$MacroExecutorTest_MockImplementation.prototype = {
	name: null
	,__class__: hex_control_macro__$MacroExecutorTest_MockImplementation
};
var hex_control_macro_MacroTest = function() { };
$hxClasses["hex.control.macro.MacroTest"] = hex_control_macro_MacroTest;
hex_control_macro_MacroTest.__name__ = ["hex","control","macro","MacroTest"];
hex_control_macro_MacroTest.prototype = {
	_macro: null
	,_macroExecutor: null
	,setUp: function() {
		this._macro = new hex_control_macro__$MacroTest_MockMacro();
		this._macroExecutor = new hex_control_macro__$MacroTest_MockMacroExecutor();
		this._macro.macroExecutor = this._macroExecutor;
		hex_control_macro__$MacroTest_MockCommand.executeCallCount = 0;
	}
	,tearDown: function() {
		this._macro = null;
		this._macroExecutor = null;
	}
	,testIsAtomic: function() {
		hex_unittest_assertion_Assert.isTrue(this._macro.get_isAtomic(),"'isAtomic' should return true",{ fileName : "MacroTest.hx", lineNumber : 53, className : "hex.control.macro.MacroTest", methodName : "testIsAtomic"});
		this._macro.set_isAtomic(false);
		hex_unittest_assertion_Assert.isFalse(this._macro.get_isAtomic(),"'isAtomic' should return false",{ fileName : "MacroTest.hx", lineNumber : 56, className : "hex.control.macro.MacroTest", methodName : "testIsAtomic"});
		this._macro.set_isAtomic(true);
		hex_unittest_assertion_Assert.isTrue(this._macro.get_isAtomic(),"'isAtomic' should return true",{ fileName : "MacroTest.hx", lineNumber : 59, className : "hex.control.macro.MacroTest", methodName : "testIsAtomic"});
	}
	,testParallelAndSequenceModes: function() {
		hex_unittest_assertion_Assert.isTrue(this._macro.get_isInSequenceMode(),"'isInSequenceMode' should return true",{ fileName : "MacroTest.hx", lineNumber : 65, className : "hex.control.macro.MacroTest", methodName : "testParallelAndSequenceModes"});
		hex_unittest_assertion_Assert.isFalse(this._macro.get_isInParallelMode(),"'isInParallelMode' should return false",{ fileName : "MacroTest.hx", lineNumber : 66, className : "hex.control.macro.MacroTest", methodName : "testParallelAndSequenceModes"});
		this._macro.set_isInSequenceMode(false);
		hex_unittest_assertion_Assert.isFalse(this._macro.get_isInSequenceMode(),"'isInSequenceMode' should return false",{ fileName : "MacroTest.hx", lineNumber : 69, className : "hex.control.macro.MacroTest", methodName : "testParallelAndSequenceModes"});
		hex_unittest_assertion_Assert.isTrue(this._macro.get_isInParallelMode(),"'isInParallelMode' should return true",{ fileName : "MacroTest.hx", lineNumber : 70, className : "hex.control.macro.MacroTest", methodName : "testParallelAndSequenceModes"});
		this._macro.set_isInSequenceMode(true);
		hex_unittest_assertion_Assert.isTrue(this._macro.get_isInSequenceMode(),"'isInSequenceMode' should return true",{ fileName : "MacroTest.hx", lineNumber : 72, className : "hex.control.macro.MacroTest", methodName : "testParallelAndSequenceModes"});
		hex_unittest_assertion_Assert.isFalse(this._macro.get_isInParallelMode(),"'isInParallelMode' should return false",{ fileName : "MacroTest.hx", lineNumber : 73, className : "hex.control.macro.MacroTest", methodName : "testParallelAndSequenceModes"});
		this._macro.set_isInParallelMode(true);
		hex_unittest_assertion_Assert.isFalse(this._macro.get_isInSequenceMode(),"'isInSequenceMode' should return false",{ fileName : "MacroTest.hx", lineNumber : 76, className : "hex.control.macro.MacroTest", methodName : "testParallelAndSequenceModes"});
		hex_unittest_assertion_Assert.isTrue(this._macro.get_isInParallelMode(),"'isInParallelMode' should return true",{ fileName : "MacroTest.hx", lineNumber : 77, className : "hex.control.macro.MacroTest", methodName : "testParallelAndSequenceModes"});
		this._macro.set_isInParallelMode(false);
		hex_unittest_assertion_Assert.isTrue(this._macro.get_isInSequenceMode(),"'isInSequenceMode' should return true",{ fileName : "MacroTest.hx", lineNumber : 79, className : "hex.control.macro.MacroTest", methodName : "testParallelAndSequenceModes"});
		hex_unittest_assertion_Assert.isFalse(this._macro.get_isInParallelMode(),"'isInParallelMode' should return false",{ fileName : "MacroTest.hx", lineNumber : 80, className : "hex.control.macro.MacroTest", methodName : "testParallelAndSequenceModes"});
	}
	,testPreExecute: function() {
		var myMacro = new hex_control_macro__$MacroTest_MockEmptyMacro();
		hex_unittest_assertion_Assert.isFalse(myMacro.get_wasUsed(),"'wasUsed' property should return false",{ fileName : "MacroTest.hx", lineNumber : 88, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		hex_unittest_assertion_Assert.isFalse(myMacro.get_isRunning(),"'isRunning' property should return false",{ fileName : "MacroTest.hx", lineNumber : 89, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,myMacro,$bind(myMacro,myMacro.preExecute),[],"",{ fileName : "MacroTest.hx", lineNumber : 90, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		myMacro.macroExecutor = new hex_control_macro__$MacroTest_MockMacroExecutor();
		hex_unittest_assertion_Assert.isFalse(myMacro.get_wasUsed(),"'wasUsed' property should return false",{ fileName : "MacroTest.hx", lineNumber : 93, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		hex_unittest_assertion_Assert.isFalse(myMacro.get_isRunning(),"'isRunning' property should return false",{ fileName : "MacroTest.hx", lineNumber : 94, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_VirtualMethodException,myMacro,$bind(myMacro,myMacro.preExecute),[],"",{ fileName : "MacroTest.hx", lineNumber : 95, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		hex_unittest_assertion_Assert.isFalse(myMacro.get_wasUsed(),"'wasUsed' property should return false",{ fileName : "MacroTest.hx", lineNumber : 97, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		hex_unittest_assertion_Assert.isFalse(myMacro.get_isRunning(),"'isRunning' property should return false",{ fileName : "MacroTest.hx", lineNumber : 98, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		hex_unittest_assertion_Assert.isFalse(this._macro.get_wasUsed(),"'wasUsed' property should return false",{ fileName : "MacroTest.hx", lineNumber : 100, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		hex_unittest_assertion_Assert.isFalse(this._macro.get_isRunning(),"'isRunning' property should return false",{ fileName : "MacroTest.hx", lineNumber : 101, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		this._macro.preExecute();
		hex_unittest_assertion_Assert.equals(this._macro,this._macroExecutor.listener,"macro should listen macroexecutor",{ fileName : "MacroTest.hx", lineNumber : 104, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		hex_unittest_assertion_Assert.isTrue(this._macro.get_wasUsed(),"'wasUsed' property should return true",{ fileName : "MacroTest.hx", lineNumber : 105, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		hex_unittest_assertion_Assert.isTrue(this._macro.get_isRunning(),"'isRunning' property should return true",{ fileName : "MacroTest.hx", lineNumber : 106, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this._macro,($_=this._macro,$bind($_,$_.preExecute)),[],"Macro should throw IllegalStateException when calling preExecute method twice",{ fileName : "MacroTest.hx", lineNumber : 107, className : "hex.control.macro.MacroTest", methodName : "testPreExecute"});
	}
	,testAddCommand: function() {
		this._macroExecutor.returnedMapping = new hex_control_command_CommandMapping(hex_control_macro__$MacroTest_MockCommand);
		var commandMapping = this._macro.add(hex_control_macro__$MacroTest_MockCommand);
		hex_unittest_assertion_Assert.equals(this._macroExecutor.returnedMapping,commandMapping,"command mapping should be returned when command class is added",{ fileName : "MacroTest.hx", lineNumber : 115, className : "hex.control.macro.MacroTest", methodName : "testAddCommand"});
		hex_unittest_assertion_Assert.equals(hex_control_macro__$MacroTest_MockCommand,this._macroExecutor.lastCommandClassAdded,"command class should be passed to macroexecutor",{ fileName : "MacroTest.hx", lineNumber : 116, className : "hex.control.macro.MacroTest", methodName : "testAddCommand"});
	}
	,testAddMapping: function() {
		this._macroExecutor.returnedMapping = new hex_control_command_CommandMapping(hex_control_macro__$MacroTest_MockCommand);
		var mappingToAdd = new hex_control_command_CommandMapping(hex_control_macro__$MacroTest_MockCommand);
		var commandMapping = this._macro.addMapping(mappingToAdd);
		hex_unittest_assertion_Assert.equals(this._macroExecutor.returnedMapping,commandMapping,"command mapping should be returned when mapping is added",{ fileName : "MacroTest.hx", lineNumber : 126, className : "hex.control.macro.MacroTest", methodName : "testAddMapping"});
		hex_unittest_assertion_Assert.equals(mappingToAdd,this._macroExecutor.lastMappingAdded,"mapping added should be passed to macroexecutor",{ fileName : "MacroTest.hx", lineNumber : 127, className : "hex.control.macro.MacroTest", methodName : "testAddMapping"});
	}
	,testExecuteEmptyMacro: function() {
		var myMacro = new hex_control_macro__$MacroTest_MockEmptyMacroWithPrepareOverriden();
		myMacro.macroExecutor = this._macroExecutor;
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,myMacro,$bind(myMacro,myMacro.execute),[],"Macro should throw IllegalStateException when calling execute without calling preExecute before",{ fileName : "MacroTest.hx", lineNumber : 136, className : "hex.control.macro.MacroTest", methodName : "testExecuteEmptyMacro"});
		myMacro.preExecute();
		var request = new hex_control_Request();
		myMacro.execute(request);
		hex_unittest_assertion_Assert.equals(request,this._macroExecutor.requestPassedDuringExecution,"request passed to execute should be passed to macroexecutor",{ fileName : "MacroTest.hx", lineNumber : 141, className : "hex.control.macro.MacroTest", methodName : "testExecuteEmptyMacro"});
		var anotherRequest = new hex_control_Request();
		myMacro.execute(anotherRequest);
		hex_unittest_assertion_Assert.equals(anotherRequest,this._macroExecutor.requestPassedDuringExecution,"request passed to execute should be passed to macroexecutor",{ fileName : "MacroTest.hx", lineNumber : 145, className : "hex.control.macro.MacroTest", methodName : "testExecuteEmptyMacro"});
	}
	,testExecuteTriggersHandleComplet: function() {
		this._macroExecutor.hasNextCommandMappingReturnValue = false;
		this._macroExecutor.hasRunEveryCommandReturnValue = true;
		this._macro.preExecute();
		this._macro.execute();
		hex_unittest_assertion_Assert.isFalse(this._macro.get_isCancelled(),"'isCancelled' property should return false",{ fileName : "MacroTest.hx", lineNumber : 157, className : "hex.control.macro.MacroTest", methodName : "testExecuteTriggersHandleComplet"});
		hex_unittest_assertion_Assert.isFalse(this._macro.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "MacroTest.hx", lineNumber : 158, className : "hex.control.macro.MacroTest", methodName : "testExecuteTriggersHandleComplet"});
		hex_unittest_assertion_Assert.isFalse(this._macro.get_isRunning(),"'isRunning' property should return false",{ fileName : "MacroTest.hx", lineNumber : 159, className : "hex.control.macro.MacroTest", methodName : "testExecuteTriggersHandleComplet"});
		hex_unittest_assertion_Assert.isTrue(this._macro.get_wasUsed(),"'wasUsed' property should return true",{ fileName : "MacroTest.hx", lineNumber : 160, className : "hex.control.macro.MacroTest", methodName : "testExecuteTriggersHandleComplet"});
		hex_unittest_assertion_Assert.isTrue(this._macro.get_hasCompleted(),"'hasCompleted' property should return true",{ fileName : "MacroTest.hx", lineNumber : 161, className : "hex.control.macro.MacroTest", methodName : "testExecuteTriggersHandleComplet"});
	}
	,testWithGuardsApproved: function() {
		var myMacro = new hex_control_macro__$MacroTest_MockEmptyMacroWithPrepareOverriden();
		var macroExecutor = new hex_control_macro_MacroExecutor();
		macroExecutor.injector = new hex_MockDependencyInjector();
		myMacro.macroExecutor = macroExecutor;
		myMacro.preExecute();
		myMacro.add(hex_control_macro__$MacroTest_MockCommand).withGuards([$bind(this,this.thatWillBeApproved)]);
		myMacro.execute();
		hex_unittest_assertion_Assert.isTrue(myMacro.get_hasCompleted(),"'hasCompleted' property should return true",{ fileName : "MacroTest.hx", lineNumber : 176, className : "hex.control.macro.MacroTest", methodName : "testWithGuardsApproved"});
		hex_unittest_assertion_Assert.isFalse(myMacro.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "MacroTest.hx", lineNumber : 177, className : "hex.control.macro.MacroTest", methodName : "testWithGuardsApproved"});
		hex_unittest_assertion_Assert.isFalse(myMacro.get_isCancelled(),"'isCancelled' property should return false",{ fileName : "MacroTest.hx", lineNumber : 178, className : "hex.control.macro.MacroTest", methodName : "testWithGuardsApproved"});
	}
	,thatWillBeApproved: function() {
		return true;
	}
	,testWithGuardsRefused: function() {
		var myMacro = new hex_control_macro__$MacroTest_MockEmptyMacroWithPrepareOverriden();
		var macroExecutor = new hex_control_macro_MacroExecutor();
		macroExecutor.injector = new hex_MockDependencyInjector();
		myMacro.macroExecutor = macroExecutor;
		myMacro.preExecute();
		myMacro.add(hex_control_macro__$MacroTest_MockCommand).withGuards([$bind(this,this.thatWillBeRefused)]);
		myMacro.execute();
		hex_unittest_assertion_Assert.isTrue(myMacro.get_hasFailed(),"'hasFailed' property should return true",{ fileName : "MacroTest.hx", lineNumber : 198, className : "hex.control.macro.MacroTest", methodName : "testWithGuardsRefused"});
		hex_unittest_assertion_Assert.isFalse(myMacro.get_hasCompleted(),"'hasCompleted' property should return false",{ fileName : "MacroTest.hx", lineNumber : 199, className : "hex.control.macro.MacroTest", methodName : "testWithGuardsRefused"});
		hex_unittest_assertion_Assert.isFalse(myMacro.get_isCancelled(),"'isCancelled' property should return false",{ fileName : "MacroTest.hx", lineNumber : 200, className : "hex.control.macro.MacroTest", methodName : "testWithGuardsRefused"});
	}
	,testParallelMode: function() {
		var myMacro = new hex_control_macro__$MacroTest_MockEmptyMacroWithPrepareOverriden();
		var macroExecutor = new hex_control_macro_MacroExecutor();
		macroExecutor.injector = new hex_MockDependencyInjector();
		myMacro.macroExecutor = macroExecutor;
		myMacro.set_isInParallelMode(true);
		myMacro.preExecute();
		myMacro.add(hex_control_macro__$MacroTest_MockAsyncCommand);
		myMacro.add(hex_control_macro__$MacroTest_MockCommand);
		hex_unittest_assertion_Assert.equals(0,hex_control_macro__$MacroTest_MockCommand.executeCallCount,"'execute' method shoud not been called",{ fileName : "MacroTest.hx", lineNumber : 216, className : "hex.control.macro.MacroTest", methodName : "testParallelMode"});
		myMacro.execute();
		hex_unittest_assertion_Assert.equals(1,hex_control_macro__$MacroTest_MockCommand.executeCallCount,"'execute' method shoud have been called once",{ fileName : "MacroTest.hx", lineNumber : 218, className : "hex.control.macro.MacroTest", methodName : "testParallelMode"});
	}
	,testSequenceMode: function() {
		var myMacro = new hex_control_macro__$MacroTest_MockEmptyMacroWithPrepareOverriden();
		var macroExecutor = new hex_control_macro_MacroExecutor();
		macroExecutor.injector = new hex_MockDependencyInjector();
		myMacro.macroExecutor = macroExecutor;
		myMacro.set_isInSequenceMode(true);
		myMacro.preExecute();
		myMacro.add(hex_control_macro__$MacroTest_MockAsyncCommand);
		myMacro.add(hex_control_macro__$MacroTest_MockCommand);
		hex_unittest_assertion_Assert.equals(0,hex_control_macro__$MacroTest_MockCommand.executeCallCount,"'execute' method shoud not been called",{ fileName : "MacroTest.hx", lineNumber : 234, className : "hex.control.macro.MacroTest", methodName : "testSequenceMode"});
		myMacro.addCompleteHandler(this,hex_unittest_runner_MethodRunner.asyncHandler($bind(this,this._onTestSequenceModeComplete),[myMacro]));
		myMacro.execute();
		hex_unittest_assertion_Assert.equals(0,hex_control_macro__$MacroTest_MockCommand.executeCallCount,"'execute' method should not been called",{ fileName : "MacroTest.hx", lineNumber : 237, className : "hex.control.macro.MacroTest", methodName : "testSequenceMode"});
	}
	,_onTestSequenceModeComplete: function(command,myMacro) {
		hex_unittest_assertion_Assert.equals(1,hex_control_macro__$MacroTest_MockCommand.executeCallCount,"'execute' method should have been called",{ fileName : "MacroTest.hx", lineNumber : 242, className : "hex.control.macro.MacroTest", methodName : "_onTestSequenceModeComplete"});
	}
	,testAddCommandAfterFirstRun: function() {
		var myMacro = new hex_control_macro__$MacroTest_MockMacroWithHandler();
		var macroExecutor = new hex_control_macro_MacroExecutor();
		macroExecutor.injector = new hex_MockDependencyInjector();
		myMacro.macroExecutor = macroExecutor;
		myMacro.addCompleteHandler(this,hex_unittest_runner_MethodRunner.asyncHandler($bind(this,this._onMacroWithHandlerComplete),[myMacro]));
		myMacro.set_isInSequenceMode(true);
		myMacro.preExecute();
		hex_control_macro__$MacroTest_MockCommand.executeCallCount = 0;
		myMacro.execute();
	}
	,_onMacroWithHandlerComplete: function(command,myMacro) {
		hex_unittest_assertion_Assert.equals(1,hex_control_macro__$MacroTest_MockCommand.executeCallCount,"the MockCommand should be executed once when it's added during running",{ fileName : "MacroTest.hx", lineNumber : 265, className : "hex.control.macro.MacroTest", methodName : "_onMacroWithHandlerComplete"});
	}
	,thatWillBeRefused: function() {
		return false;
	}
	,__class__: hex_control_macro_MacroTest
};
var hex_control_macro__$MacroTest_MockAsyncCommand = function() {
	hex_control_async_AsyncCommand.call(this);
};
$hxClasses["hex.control.macro._MacroTest.MockAsyncCommand"] = hex_control_macro__$MacroTest_MockAsyncCommand;
hex_control_macro__$MacroTest_MockAsyncCommand.__name__ = ["hex","control","macro","_MacroTest","MockAsyncCommand"];
hex_control_macro__$MacroTest_MockAsyncCommand.__super__ = hex_control_async_AsyncCommand;
hex_control_macro__$MacroTest_MockAsyncCommand.prototype = $extend(hex_control_async_AsyncCommand.prototype,{
	execute: function(request) {
		haxe_Timer.delay($bind(this,this._handleComplete),50);
	}
	,__class__: hex_control_macro__$MacroTest_MockAsyncCommand
});
var hex_control_macro__$MacroTest_MockCommand = function() {
};
$hxClasses["hex.control.macro._MacroTest.MockCommand"] = hex_control_macro__$MacroTest_MockCommand;
hex_control_macro__$MacroTest_MockCommand.__name__ = ["hex","control","macro","_MacroTest","MockCommand"];
hex_control_macro__$MacroTest_MockCommand.__interfaces__ = [hex_control_command_ICommand];
hex_control_macro__$MacroTest_MockCommand.prototype = {
	_owner: null
	,execute: function(request) {
		hex_control_macro__$MacroTest_MockCommand.executeCallCount++;
	}
	,getResult: function() {
		return null;
	}
	,getReturnedExecutionPayload: function() {
		return null;
	}
	,getOwner: function() {
		return this._owner;
	}
	,setOwner: function(owner) {
		this._owner = owner;
	}
	,getExecuteMethod: function() {
		return $bind(this,this.execute);
	}
	,__class__: hex_control_macro__$MacroTest_MockCommand
};
var hex_control_macro__$MacroTest_MockEmptyMacro = function() {
	hex_control_macro_Macro.call(this);
};
$hxClasses["hex.control.macro._MacroTest.MockEmptyMacro"] = hex_control_macro__$MacroTest_MockEmptyMacro;
hex_control_macro__$MacroTest_MockEmptyMacro.__name__ = ["hex","control","macro","_MacroTest","MockEmptyMacro"];
hex_control_macro__$MacroTest_MockEmptyMacro.__super__ = hex_control_macro_Macro;
hex_control_macro__$MacroTest_MockEmptyMacro.prototype = $extend(hex_control_macro_Macro.prototype,{
	__class__: hex_control_macro__$MacroTest_MockEmptyMacro
});
var hex_control_macro__$MacroTest_MockEmptyMacroWithPrepareOverriden = function() {
	hex_control_macro_Macro.call(this);
};
$hxClasses["hex.control.macro._MacroTest.MockEmptyMacroWithPrepareOverriden"] = hex_control_macro__$MacroTest_MockEmptyMacroWithPrepareOverriden;
hex_control_macro__$MacroTest_MockEmptyMacroWithPrepareOverriden.__name__ = ["hex","control","macro","_MacroTest","MockEmptyMacroWithPrepareOverriden"];
hex_control_macro__$MacroTest_MockEmptyMacroWithPrepareOverriden.__super__ = hex_control_macro_Macro;
hex_control_macro__$MacroTest_MockEmptyMacroWithPrepareOverriden.prototype = $extend(hex_control_macro_Macro.prototype,{
	_prepare: function() {
	}
	,__class__: hex_control_macro__$MacroTest_MockEmptyMacroWithPrepareOverriden
});
var hex_control_macro__$MacroTest_MockMacro = function() {
	hex_control_macro_Macro.call(this);
};
$hxClasses["hex.control.macro._MacroTest.MockMacro"] = hex_control_macro__$MacroTest_MockMacro;
hex_control_macro__$MacroTest_MockMacro.__name__ = ["hex","control","macro","_MacroTest","MockMacro"];
hex_control_macro__$MacroTest_MockMacro.__super__ = hex_control_macro_Macro;
hex_control_macro__$MacroTest_MockMacro.prototype = $extend(hex_control_macro_Macro.prototype,{
	_prepare: function() {
		this.add(hex_control_macro__$MacroTest_MockAsyncCommand);
		this.add(hex_control_macro__$MacroTest_MockCommand);
	}
	,__class__: hex_control_macro__$MacroTest_MockMacro
});
var hex_control_macro__$MacroTest_MockMacroWithHandler = function() {
	hex_control_macro_Macro.call(this);
};
$hxClasses["hex.control.macro._MacroTest.MockMacroWithHandler"] = hex_control_macro__$MacroTest_MockMacroWithHandler;
hex_control_macro__$MacroTest_MockMacroWithHandler.__name__ = ["hex","control","macro","_MacroTest","MockMacroWithHandler"];
hex_control_macro__$MacroTest_MockMacroWithHandler.__super__ = hex_control_macro_Macro;
hex_control_macro__$MacroTest_MockMacroWithHandler.prototype = $extend(hex_control_macro_Macro.prototype,{
	_prepare: function() {
		this.add(hex_control_macro__$MacroTest_MockAsyncCommand).withCompleteHandlers(new hex_control_async_AsyncHandler(this,$bind(this,this.onCommandComplete)));
	}
	,onCommandComplete: function(command) {
		this.add(hex_control_macro__$MacroTest_MockCommand);
	}
	,__class__: hex_control_macro__$MacroTest_MockMacroWithHandler
});
var hex_control_macro__$MacroTest_MockMacroExecutor = function() {
	this.hasNextCommandMappingReturnValue = true;
	this.hasRunEveryCommandReturnValue = false;
};
$hxClasses["hex.control.macro._MacroTest.MockMacroExecutor"] = hex_control_macro__$MacroTest_MockMacroExecutor;
hex_control_macro__$MacroTest_MockMacroExecutor.__name__ = ["hex","control","macro","_MacroTest","MockMacroExecutor"];
hex_control_macro__$MacroTest_MockMacroExecutor.__interfaces__ = [hex_control_macro_IMacroExecutor];
hex_control_macro__$MacroTest_MockMacroExecutor.prototype = {
	requestPassedDuringExecution: null
	,returnedMapping: null
	,lastCommandClassAdded: null
	,lastMappingAdded: null
	,listener: null
	,hasRunEveryCommandReturnValue: null
	,hasNextCommandMappingReturnValue: null
	,add: function(commandClass) {
		this.lastCommandClassAdded = commandClass;
		return this.returnedMapping;
	}
	,executeNextCommand: function(request) {
		this.requestPassedDuringExecution = request;
		return null;
	}
	,hasNextCommandMapping: null
	,get_hasNextCommandMapping: function() {
		return this.hasNextCommandMappingReturnValue;
	}
	,setAsyncCommandListener: function(listener) {
		this.listener = listener;
	}
	,asyncCommandCalled: function(asyncCommand) {
	}
	,hasRunEveryCommand: null
	,get_hasRunEveryCommand: function() {
		return this.hasRunEveryCommandReturnValue;
	}
	,commandIndex: null
	,get_commandIndex: function() {
		return 0;
	}
	,addMapping: function(mapping) {
		this.lastMappingAdded = mapping;
		return this.returnedMapping;
	}
	,toString: function() {
		return hex_log_Stringifier.stringify(this);
	}
	,__class__: hex_control_macro__$MacroTest_MockMacroExecutor
	,__properties__: {get_commandIndex:"get_commandIndex",get_hasRunEveryCommand:"get_hasRunEveryCommand",get_hasNextCommandMapping:"get_hasNextCommandMapping"}
};
var hex_control_payload_ExecutionPayloadTest = function() { };
$hxClasses["hex.control.payload.ExecutionPayloadTest"] = hex_control_payload_ExecutionPayloadTest;
hex_control_payload_ExecutionPayloadTest.__name__ = ["hex","control","payload","ExecutionPayloadTest"];
hex_control_payload_ExecutionPayloadTest.prototype = {
	_data: null
	,_executionPayload: null
	,setUp: function() {
		this._data = new hex_control_payload__$ExecutionPayloadTest_MockData();
		this._executionPayload = new hex_control_payload_ExecutionPayload(this._data,hex_control_payload__$ExecutionPayloadTest_IMockData,"name");
	}
	,tearDown: function() {
		this._data = null;
		this._executionPayload = null;
	}
	,testConstructor: function() {
		hex_unittest_assertion_Assert.equals(this._data,this._executionPayload.getData(),"data should be the same",{ fileName : "ExecutionPayloadTest.hx", lineNumber : 35, className : "hex.control.payload.ExecutionPayloadTest", methodName : "testConstructor"});
		hex_unittest_assertion_Assert.equals(hex_control_payload__$ExecutionPayloadTest_IMockData,this._executionPayload.getType(),"type should be the same",{ fileName : "ExecutionPayloadTest.hx", lineNumber : 36, className : "hex.control.payload.ExecutionPayloadTest", methodName : "testConstructor"});
		hex_unittest_assertion_Assert.equals("name",this._executionPayload.getName(),"name should be the same",{ fileName : "ExecutionPayloadTest.hx", lineNumber : 37, className : "hex.control.payload.ExecutionPayloadTest", methodName : "testConstructor"});
	}
	,testConstructorNullException: function() {
		hex_unittest_assertion_Assert.constructorCallThrows(hex_error_NullPointerException,hex_control_payload_ExecutionPayload,[null],"constructor should throw NullPointerException",{ fileName : "ExecutionPayloadTest.hx", lineNumber : 43, className : "hex.control.payload.ExecutionPayloadTest", methodName : "testConstructorNullException"});
	}
	,testConstructorThrowsIllegalArgumentException: function() {
		hex_unittest_assertion_Assert.constructorCallThrows(hex_error_IllegalArgumentException,hex_control_payload_ExecutionPayload,[this._data,String],"constructor should throw IllegalArgumentException",{ fileName : "ExecutionPayloadTest.hx", lineNumber : 49, className : "hex.control.payload.ExecutionPayloadTest", methodName : "testConstructorThrowsIllegalArgumentException"});
	}
	,testOverwritingType: function() {
		this._executionPayload.withClass(hex_control_payload__$ExecutionPayloadTest_IMockType);
		hex_unittest_assertion_Assert.notEquals(hex_control_payload__$ExecutionPayloadTest_IMockData,this._executionPayload.getType(),"type should not be the same",{ fileName : "ExecutionPayloadTest.hx", lineNumber : 56, className : "hex.control.payload.ExecutionPayloadTest", methodName : "testOverwritingType"});
		hex_unittest_assertion_Assert.equals(hex_control_payload__$ExecutionPayloadTest_IMockType,this._executionPayload.getType(),"type should be the same",{ fileName : "ExecutionPayloadTest.hx", lineNumber : 57, className : "hex.control.payload.ExecutionPayloadTest", methodName : "testOverwritingType"});
	}
	,testOverwritingName: function() {
		this._executionPayload.withName("anotherName");
		hex_unittest_assertion_Assert.notEquals("name",this._executionPayload.getName(),"name should not be the same",{ fileName : "ExecutionPayloadTest.hx", lineNumber : 64, className : "hex.control.payload.ExecutionPayloadTest", methodName : "testOverwritingName"});
		hex_unittest_assertion_Assert.equals("anotherName",this._executionPayload.getName(),"name should be the same",{ fileName : "ExecutionPayloadTest.hx", lineNumber : 65, className : "hex.control.payload.ExecutionPayloadTest", methodName : "testOverwritingName"});
	}
	,testNoNameParameterToConstructor: function() {
		var executionPayload = new hex_control_payload_ExecutionPayload(this._data,hex_control_payload__$ExecutionPayloadTest_IMockData);
		hex_unittest_assertion_Assert.equals("",executionPayload.getName(),"name should be empty String",{ fileName : "ExecutionPayloadTest.hx", lineNumber : 72, className : "hex.control.payload.ExecutionPayloadTest", methodName : "testNoNameParameterToConstructor"});
	}
	,__class__: hex_control_payload_ExecutionPayloadTest
};
var hex_control_payload__$ExecutionPayloadTest_IMockData = function() { };
$hxClasses["hex.control.payload._ExecutionPayloadTest.IMockData"] = hex_control_payload__$ExecutionPayloadTest_IMockData;
hex_control_payload__$ExecutionPayloadTest_IMockData.__name__ = ["hex","control","payload","_ExecutionPayloadTest","IMockData"];
var hex_control_payload__$ExecutionPayloadTest_MockData = function() {
};
$hxClasses["hex.control.payload._ExecutionPayloadTest.MockData"] = hex_control_payload__$ExecutionPayloadTest_MockData;
hex_control_payload__$ExecutionPayloadTest_MockData.__name__ = ["hex","control","payload","_ExecutionPayloadTest","MockData"];
hex_control_payload__$ExecutionPayloadTest_MockData.__interfaces__ = [hex_control_payload__$ExecutionPayloadTest_IMockData];
hex_control_payload__$ExecutionPayloadTest_MockData.prototype = {
	__class__: hex_control_payload__$ExecutionPayloadTest_MockData
};
var hex_control_payload__$ExecutionPayloadTest_IMockType = function() { };
$hxClasses["hex.control.payload._ExecutionPayloadTest.IMockType"] = hex_control_payload__$ExecutionPayloadTest_IMockType;
hex_control_payload__$ExecutionPayloadTest_IMockType.__name__ = ["hex","control","payload","_ExecutionPayloadTest","IMockType"];
var hex_control_payload_MVCPayloadSuite = function() {
	this.list = [hex_control_payload_ExecutionPayloadTest,hex_control_payload_PayloadUtilTest];
};
$hxClasses["hex.control.payload.MVCPayloadSuite"] = hex_control_payload_MVCPayloadSuite;
hex_control_payload_MVCPayloadSuite.__name__ = ["hex","control","payload","MVCPayloadSuite"];
hex_control_payload_MVCPayloadSuite.prototype = {
	list: null
	,__class__: hex_control_payload_MVCPayloadSuite
};
var hex_control_payload_PayloadUtil = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException("'PayloadUtil' class can't be instantiated.",{ fileName : "PayloadUtil.hx", lineNumber : 14, className : "hex.control.payload.PayloadUtil", methodName : "new"}));
};
$hxClasses["hex.control.payload.PayloadUtil"] = hex_control_payload_PayloadUtil;
hex_control_payload_PayloadUtil.__name__ = ["hex","control","payload","PayloadUtil"];
hex_control_payload_PayloadUtil.mapPayload = function(payloads,injector) {
	var _g = 0;
	while(_g < payloads.length) {
		var payload = payloads[_g];
		++_g;
		injector.mapToValue(payload.getType(),payload.getData(),payload.getName());
	}
};
hex_control_payload_PayloadUtil.unmapPayload = function(payloads,injector) {
	var _g = 0;
	while(_g < payloads.length) {
		var payload = payloads[_g];
		++_g;
		injector.unmap(payload.getType(),payload.getName());
	}
};
hex_control_payload_PayloadUtil.prototype = {
	__class__: hex_control_payload_PayloadUtil
};
var hex_control_payload_PayloadUtilTest = function() { };
$hxClasses["hex.control.payload.PayloadUtilTest"] = hex_control_payload_PayloadUtilTest;
hex_control_payload_PayloadUtilTest.__name__ = ["hex","control","payload","PayloadUtilTest"];
hex_control_payload_PayloadUtilTest.prototype = {
	testMapping: function() {
		var injector = new hex_control_payload__$PayloadUtilTest_MockDependencyInjectorForMapping();
		var mockImplementation = new hex_control_payload__$PayloadUtilTest_MockImplementation("mockImplementation");
		var anotherMockImplementation = new hex_control_payload__$PayloadUtilTest_MockImplementation("anotherMockImplementation");
		var mockPayload = new hex_control_payload_ExecutionPayload(mockImplementation,hex_control_payload__$PayloadUtilTest_IMockType,"mockPayload");
		var stringPayload = new hex_control_payload_ExecutionPayload("test",String,"stringPayload");
		var anotherMockPayload = new hex_control_payload_ExecutionPayload(anotherMockImplementation,hex_control_payload__$PayloadUtilTest_IMockType,"anotherMockPayload");
		var payloads = [mockPayload,stringPayload,anotherMockPayload];
		hex_control_payload_PayloadUtil.mapPayload(payloads,injector);
		hex_unittest_assertion_Assert.deepEquals([[mockImplementation,hex_control_payload__$PayloadUtilTest_IMockType,"mockPayload"],["test",String,"stringPayload"],[anotherMockImplementation,hex_control_payload__$PayloadUtilTest_IMockType,"anotherMockPayload"]],injector.mappedPayloads,"'CommandExecutor.mapPayload' should map right values",{ fileName : "PayloadUtilTest.hx", lineNumber : 30, className : "hex.control.payload.PayloadUtilTest", methodName : "testMapping"});
	}
	,testUnmapping: function() {
		var injector = new hex_control_payload__$PayloadUtilTest_MockDependencyInjectorForMapping();
		var mockImplementation = new hex_control_payload__$PayloadUtilTest_MockImplementation("mockImplementation");
		var anotherMockImplementation = new hex_control_payload__$PayloadUtilTest_MockImplementation("anotherMockImplementation");
		var mockPayload = new hex_control_payload_ExecutionPayload(mockImplementation,hex_control_payload__$PayloadUtilTest_IMockType,"mockPayload");
		var stringPayload = new hex_control_payload_ExecutionPayload("test",String,"stringPayload");
		var anotherMockPayload = new hex_control_payload_ExecutionPayload(anotherMockImplementation,hex_control_payload__$PayloadUtilTest_IMockType,"anotherMockPayload");
		var payloads = [mockPayload,stringPayload,anotherMockPayload];
		hex_control_payload_PayloadUtil.unmapPayload(payloads,injector);
		hex_unittest_assertion_Assert.deepEquals([[hex_control_payload__$PayloadUtilTest_IMockType,"mockPayload"],[String,"stringPayload"],[hex_control_payload__$PayloadUtilTest_IMockType,"anotherMockPayload"]],injector.unmappedPayloads,"'CommandExecutor.mapPayload' should unmap right values",{ fileName : "PayloadUtilTest.hx", lineNumber : 50, className : "hex.control.payload.PayloadUtilTest", methodName : "testUnmapping"});
	}
	,__class__: hex_control_payload_PayloadUtilTest
};
var hex_control_payload__$PayloadUtilTest_IMockType = function() { };
$hxClasses["hex.control.payload._PayloadUtilTest.IMockType"] = hex_control_payload__$PayloadUtilTest_IMockType;
hex_control_payload__$PayloadUtilTest_IMockType.__name__ = ["hex","control","payload","_PayloadUtilTest","IMockType"];
var hex_control_payload__$PayloadUtilTest_MockImplementation = function(name) {
	this.name = name;
};
$hxClasses["hex.control.payload._PayloadUtilTest.MockImplementation"] = hex_control_payload__$PayloadUtilTest_MockImplementation;
hex_control_payload__$PayloadUtilTest_MockImplementation.__name__ = ["hex","control","payload","_PayloadUtilTest","MockImplementation"];
hex_control_payload__$PayloadUtilTest_MockImplementation.__interfaces__ = [hex_control_payload__$PayloadUtilTest_IMockType];
hex_control_payload__$PayloadUtilTest_MockImplementation.prototype = {
	name: null
	,__class__: hex_control_payload__$PayloadUtilTest_MockImplementation
};
var hex_control_payload__$PayloadUtilTest_MockDependencyInjector = function() {
};
$hxClasses["hex.control.payload._PayloadUtilTest.MockDependencyInjector"] = hex_control_payload__$PayloadUtilTest_MockDependencyInjector;
hex_control_payload__$PayloadUtilTest_MockDependencyInjector.__name__ = ["hex","control","payload","_PayloadUtilTest","MockDependencyInjector"];
hex_control_payload__$PayloadUtilTest_MockDependencyInjector.__interfaces__ = [hex_di_IDependencyInjector];
hex_control_payload__$PayloadUtilTest_MockDependencyInjector.prototype = {
	hasMapping: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,hasDirectMapping: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,satisfies: function(type,name) {
		if(name == null) name = "";
		return false;
	}
	,injectInto: function(target) {
	}
	,getInstance: function(type,name,targetType) {
		if(name == null) name = "";
		return null;
	}
	,getOrCreateNewInstance: function(type) {
		return null;
	}
	,instantiateUnmapped: function(type) {
		return null;
	}
	,destroyInstance: function(instance) {
	}
	,mapToValue: function(clazz,value,name) {
		if(name == null) name = "";
	}
	,mapToType: function(clazz,type,name) {
		if(name == null) name = "";
	}
	,mapToSingleton: function(clazz,type,name) {
		if(name == null) name = "";
	}
	,unmap: function(type,name) {
		if(name == null) name = "";
	}
	,addEventListener: function(eventType,callback) {
		return false;
	}
	,removeEventListener: function(eventType,callback) {
		return false;
	}
	,__class__: hex_control_payload__$PayloadUtilTest_MockDependencyInjector
};
var hex_control_payload__$PayloadUtilTest_MockDependencyInjectorForMapping = function() {
	this.unmappedPayloads = [];
	this.mappedPayloads = [];
	this.getOrCreateNewInstanceCallCount = 0;
	hex_control_payload__$PayloadUtilTest_MockDependencyInjector.call(this);
};
$hxClasses["hex.control.payload._PayloadUtilTest.MockDependencyInjectorForMapping"] = hex_control_payload__$PayloadUtilTest_MockDependencyInjectorForMapping;
hex_control_payload__$PayloadUtilTest_MockDependencyInjectorForMapping.__name__ = ["hex","control","payload","_PayloadUtilTest","MockDependencyInjectorForMapping"];
hex_control_payload__$PayloadUtilTest_MockDependencyInjectorForMapping.__super__ = hex_control_payload__$PayloadUtilTest_MockDependencyInjector;
hex_control_payload__$PayloadUtilTest_MockDependencyInjectorForMapping.prototype = $extend(hex_control_payload__$PayloadUtilTest_MockDependencyInjector.prototype,{
	getOrCreateNewInstanceCallCount: null
	,getOrCreateNewInstanceCallParameter: null
	,mappedPayloads: null
	,unmappedPayloads: null
	,mapToValue: function(clazz,value,name) {
		if(name == null) name = "";
		this.mappedPayloads.push([value,clazz,name]);
	}
	,unmap: function(type,name) {
		if(name == null) name = "";
		this.unmappedPayloads.push([type,name]);
	}
	,getOrCreateNewInstance: function(type) {
		this.getOrCreateNewInstanceCallCount++;
		this.getOrCreateNewInstanceCallParameter = type;
		return Type.createInstance(type,[]);
	}
	,__class__: hex_control_payload__$PayloadUtilTest_MockDependencyInjectorForMapping
});
var hex_core_CoreCoreSuite = function() {
	this.list = [hex_core_HashCodeFactoryTest];
};
$hxClasses["hex.core.CoreCoreSuite"] = hex_core_CoreCoreSuite;
hex_core_CoreCoreSuite.__name__ = ["hex","core","CoreCoreSuite"];
hex_core_CoreCoreSuite.prototype = {
	list: null
	,__class__: hex_core_CoreCoreSuite
};
var hex_core_HashCodeFactory = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException("'HashCodeFactory' class can't be instantiated.",{ fileName : "HashCodeFactory.hx", lineNumber : 15, className : "hex.core.HashCodeFactory", methodName : "new"}));
};
$hxClasses["hex.core.HashCodeFactory"] = hex_core_HashCodeFactory;
hex_core_HashCodeFactory.__name__ = ["hex","core","HashCodeFactory"];
hex_core_HashCodeFactory.getNextKEY = function() {
	return hex_core_HashCodeFactory._nKEY++;
};
hex_core_HashCodeFactory.getNextName = function() {
	return "" + hex_core_HashCodeFactory._nKEY;
};
hex_core_HashCodeFactory.getKey = function(o) {
	if(!(function($this) {
		var $r;
		var key = o;
		$r = hex_core_HashCodeFactory._M.h.__keys__[key.__id__] != null;
		return $r;
	}(this))) {
		var key1 = o;
		var value = hex_core_HashCodeFactory.getNextKEY();
		hex_core_HashCodeFactory._M.set(key1,value);
	}
	var key2 = o;
	return hex_core_HashCodeFactory._M.h[key2.__id__];
};
hex_core_HashCodeFactory.previewNextKey = function() {
	return hex_core_HashCodeFactory._nKEY;
};
hex_core_HashCodeFactory.prototype = {
	__class__: hex_core_HashCodeFactory
};
var hex_core_HashCodeFactoryTest = function() { };
$hxClasses["hex.core.HashCodeFactoryTest"] = hex_core_HashCodeFactoryTest;
hex_core_HashCodeFactoryTest.__name__ = ["hex","core","HashCodeFactoryTest"];
hex_core_HashCodeFactoryTest.prototype = {
	testConstructorNullException: function() {
		hex_unittest_assertion_Assert.constructorCallThrows(hex_error_PrivateConstructorException,hex_core_HashCodeFactory,[],"",{ fileName : "HashCodeFactoryTest.hx", lineNumber : 11, className : "hex.core.HashCodeFactoryTest", methodName : "testConstructorNullException"});
	}
	,testGetNextKey: function() {
		var previewKey = hex_core_HashCodeFactory.previewNextKey();
		hex_unittest_assertion_Assert.isInstanceOf(previewKey,Int,"'HashCodeFactory.previewNextKey' should return number",{ fileName : "HashCodeFactoryTest.hx", lineNumber : 18, className : "hex.core.HashCodeFactoryTest", methodName : "testGetNextKey"});
		var nextKey = hex_core_HashCodeFactory.getNextKEY();
		hex_unittest_assertion_Assert.isInstanceOf(nextKey,Int,"'HashCodeFactory.getNextKEY' should return number",{ fileName : "HashCodeFactoryTest.hx", lineNumber : 21, className : "hex.core.HashCodeFactoryTest", methodName : "testGetNextKey"});
		hex_unittest_assertion_Assert.equals(previewKey,nextKey,"'HashCodeFactory.getNextKEY' call tearDown 'HashCodeFactory.previewNextKey' call should return the same value",{ fileName : "HashCodeFactoryTest.hx", lineNumber : 22, className : "hex.core.HashCodeFactoryTest", methodName : "testGetNextKey"});
	}
	,testGetKey: function() {
		var o = new hex_core__$HashCodeFactoryTest_MockObject();
		var previewKey = hex_core_HashCodeFactory.previewNextKey();
		var key = hex_core_HashCodeFactory.getKey(o);
		hex_unittest_assertion_Assert.isInstanceOf(key,Int,"'HashCodeFactory.getKEY' should return number",{ fileName : "HashCodeFactoryTest.hx", lineNumber : 31, className : "hex.core.HashCodeFactoryTest", methodName : "testGetKey"});
		hex_unittest_assertion_Assert.equals(previewKey,key,"'HashCodeFactory.getKEY' call tearDown 'HashCodeFactory.previewNextKey' call should return the same value",{ fileName : "HashCodeFactoryTest.hx", lineNumber : 32, className : "hex.core.HashCodeFactoryTest", methodName : "testGetKey"});
		var anotherKey = hex_core_HashCodeFactory.getKey(o);
		hex_unittest_assertion_Assert.equals(key,anotherKey,"Two 'HashCodeFactory.getKEY' calls on the same target should return the same value",{ fileName : "HashCodeFactoryTest.hx", lineNumber : 35, className : "hex.core.HashCodeFactoryTest", methodName : "testGetKey"});
	}
	,__class__: hex_core_HashCodeFactoryTest
};
var hex_core__$HashCodeFactoryTest_MockObject = function() {
};
$hxClasses["hex.core._HashCodeFactoryTest.MockObject"] = hex_core__$HashCodeFactoryTest_MockObject;
hex_core__$HashCodeFactoryTest_MockObject.__name__ = ["hex","core","_HashCodeFactoryTest","MockObject"];
hex_core__$HashCodeFactoryTest_MockObject.prototype = {
	__class__: hex_core__$HashCodeFactoryTest_MockObject
};
var hex_core_IAnnotationParsable = function() { };
$hxClasses["hex.core.IAnnotationParsable"] = hex_core_IAnnotationParsable;
hex_core_IAnnotationParsable.__name__ = ["hex","core","IAnnotationParsable"];
var hex_data_IParser = function() { };
$hxClasses["hex.data.IParser"] = hex_data_IParser;
hex_data_IParser.__name__ = ["hex","data","IParser"];
hex_data_IParser.prototype = {
	parse: null
	,__class__: hex_data_IParser
};
var hex_di_CoreDiSuite = function() {
	this.list = [hex_di_InjectionEventTest];
};
$hxClasses["hex.di.CoreDiSuite"] = hex_di_CoreDiSuite;
hex_di_CoreDiSuite.__name__ = ["hex","di","CoreDiSuite"];
hex_di_CoreDiSuite.prototype = {
	list: null
	,__class__: hex_di_CoreDiSuite
};
var hex_di_DISuite = function() {
	this.list = [hex_di_InjectorTest];
};
$hxClasses["hex.di.DISuite"] = hex_di_DISuite;
hex_di_DISuite.__name__ = ["hex","di","DISuite"];
hex_di_DISuite.prototype = {
	list: null
	,__class__: hex_di_DISuite
};
var hex_di_IInjectable = function() { };
$hxClasses["hex.di.IInjectable"] = hex_di_IInjectable;
hex_di_IInjectable.__name__ = ["hex","di","IInjectable"];
hex_di_IInjectable.prototype = {
	applyInjection: null
	,__class__: hex_di_IInjectable
};
var hex_event_IEvent = function() { };
$hxClasses["hex.event.IEvent"] = hex_event_IEvent;
hex_event_IEvent.__name__ = ["hex","event","IEvent"];
hex_event_IEvent.prototype = {
	type: null
	,target: null
	,clone: null
	,toString: null
	,__class__: hex_event_IEvent
};
var hex_event_BasicEvent = function(type,target) {
	this.type = type;
	this.target = target;
};
$hxClasses["hex.event.BasicEvent"] = hex_event_BasicEvent;
hex_event_BasicEvent.__name__ = ["hex","event","BasicEvent"];
hex_event_BasicEvent.__interfaces__ = [hex_event_IEvent];
hex_event_BasicEvent.prototype = {
	type: null
	,target: null
	,clone: function() {
		return new hex_event_BasicEvent(this.type,this.target);
	}
	,toString: function() {
		return hex_log_Stringifier.stringify(this) + (":{ type:" + this.type + ", target:" + Std.string(this.target) + " }");
	}
	,__class__: hex_event_BasicEvent
};
var hex_di_InjectionEvent = function(type,target,instance,instanceType) {
	hex_event_BasicEvent.call(this,type,target);
	this.instance = instance;
	this.instanceType = instanceType;
};
$hxClasses["hex.di.InjectionEvent"] = hex_di_InjectionEvent;
hex_di_InjectionEvent.__name__ = ["hex","di","InjectionEvent"];
hex_di_InjectionEvent.__super__ = hex_event_BasicEvent;
hex_di_InjectionEvent.prototype = $extend(hex_event_BasicEvent.prototype,{
	instance: null
	,instanceType: null
	,clone: function() {
		return new hex_di_InjectionEvent(this.type,this.target,this.instance,this.instanceType);
	}
	,__class__: hex_di_InjectionEvent
});
var hex_di_InjectionEventTest = function() { };
$hxClasses["hex.di.InjectionEventTest"] = hex_di_InjectionEventTest;
hex_di_InjectionEventTest.__name__ = ["hex","di","InjectionEventTest"];
hex_di_InjectionEventTest.prototype = {
	testType: function() {
		var type = "type";
		var e = new hex_di_InjectionEvent(type,new hex_di__$InjectionEventTest_MockTarget(),this,hex_di_InjectionEventTest);
		hex_unittest_assertion_Assert.equals(type,e.type,"'type' property should be the same passed to constructor",{ fileName : "InjectionEventTest.hx", lineNumber : 18, className : "hex.di.InjectionEventTest", methodName : "testType"});
	}
	,testTarget: function() {
		var target = new hex_di__$InjectionEventTest_MockTarget();
		var e = new hex_di_InjectionEvent("",target,this,hex_di_InjectionEventTest);
		hex_unittest_assertion_Assert.equals(target,e.target,"'target' property should be the same passed to constructor",{ fileName : "InjectionEventTest.hx", lineNumber : 27, className : "hex.di.InjectionEventTest", methodName : "testTarget"});
	}
	,testClone: function() {
		var type = "type";
		var target = new hex_di__$InjectionEventTest_MockTarget();
		var e = new hex_di_InjectionEvent(type,target,this,hex_di_InjectionEventTest);
		var clonedEvent = e.clone();
		hex_unittest_assertion_Assert.equals(type,clonedEvent.type,"'clone' method should return cloned event with same 'type' property",{ fileName : "InjectionEventTest.hx", lineNumber : 38, className : "hex.di.InjectionEventTest", methodName : "testClone"});
		hex_unittest_assertion_Assert.equals(target,clonedEvent.target,"'clone' method should return cloned event with same 'target' property",{ fileName : "InjectionEventTest.hx", lineNumber : 39, className : "hex.di.InjectionEventTest", methodName : "testClone"});
	}
	,testParameters: function() {
		var target = new hex_di__$InjectionEventTest_MockTarget();
		var e = new hex_di_InjectionEvent("",target,this,hex_di_InjectionEventTest);
		hex_unittest_assertion_Assert.equals(this,e.instance,"'instance' property should be the same passed to constructor",{ fileName : "InjectionEventTest.hx", lineNumber : 48, className : "hex.di.InjectionEventTest", methodName : "testParameters"});
		hex_unittest_assertion_Assert.equals(hex_di_InjectionEventTest,e.instanceType,"'instanceType' property should be the same passed to constructor",{ fileName : "InjectionEventTest.hx", lineNumber : 49, className : "hex.di.InjectionEventTest", methodName : "testParameters"});
	}
	,__class__: hex_di_InjectionEventTest
};
var hex_di__$InjectionEventTest_MockTarget = function() {
	hex_MockDependencyInjector.call(this);
};
$hxClasses["hex.di._InjectionEventTest.MockTarget"] = hex_di__$InjectionEventTest_MockTarget;
hex_di__$InjectionEventTest_MockTarget.__name__ = ["hex","di","_InjectionEventTest","MockTarget"];
hex_di__$InjectionEventTest_MockTarget.__super__ = hex_MockDependencyInjector;
hex_di__$InjectionEventTest_MockTarget.prototype = $extend(hex_MockDependencyInjector.prototype,{
	__class__: hex_di__$InjectionEventTest_MockTarget
});
var hex_di_Injector = function() {
	this._classDescriptor = new hex_di_reflect_ClassDescriptionProvider(new hex_di_annotation_AnnotationDataProvider(hex_di_IInjectorContainer));
	this._ed = new hex_event_LightweightClosureDispatcher();
	this._mapping = new haxe_ds_StringMap();
	this._processedMapping = new haxe_ds_StringMap();
	this._managedObjects = new haxe_ds_ObjectMap();
};
$hxClasses["hex.di.Injector"] = hex_di_Injector;
hex_di_Injector.__name__ = ["hex","di","Injector"];
hex_di_Injector.__interfaces__ = [hex_di_IDependencyInjector];
hex_di_Injector.prototype = {
	_ed: null
	,_mapping: null
	,_processedMapping: null
	,_managedObjects: null
	,_parentInjector: null
	,_classDescriptor: null
	,createChildInjector: function() {
		var injector = new hex_di_Injector();
		injector._parentInjector = this;
		return injector;
	}
	,addEventListener: function(eventType,callback) {
		return this._ed.addEventListener(eventType,callback);
	}
	,removeEventListener: function(eventType,callback) {
		return this._ed.removeEventListener(eventType,callback);
	}
	,mapToValue: function(clazz,value,name) {
		if(name == null) name = "";
		this.map(clazz,name).toValue(value);
	}
	,mapToType: function(clazz,type,name) {
		if(name == null) name = "";
		this.map(clazz,name).toType(type);
	}
	,mapToSingleton: function(clazz,type,name) {
		if(name == null) name = "";
		this.map(clazz,name).toSingleton(type);
	}
	,getInstance: function(type,name,targetType) {
		if(name == null) name = "";
		var mappingID = Type.getClassName(type) + "|" + name;
		var mapping = this._mapping.get(mappingID);
		if(this._mapping.get(mappingID) != null) return mapping.getResult(); else if(this._parentInjector != null) return this._parentInjector.getInstance(type,name); else throw new js__$Boot_HaxeError(new hex_di_error_MissingMappingException("'" + hex_log_Stringifier.stringify(this) + "' is missing a mapping to get instance with type '" + Type.getClassName(type) + "' inside instance of '" + hex_log_Stringifier.stringify(this) + "'. Target dependency: '" + mappingID + "'",{ fileName : "Injector.hx", lineNumber : 86, className : "hex.di.Injector", methodName : "getInstance"}));
	}
	,getProvider: function(type,name) {
		if(name == null) name = "";
		var mappingID = Type.getClassName(type) + "|" + name;
		var mapping = this._mapping.get(mappingID);
		if(this._mapping.get(mappingID) != null) return mapping.provider; else if(this._parentInjector != null) return this._parentInjector.getInstance(type,name); else return null;
	}
	,instantiateUnmapped: function(type) {
		var classDescription = this._classDescriptor.getClassDescription(type);
		var instance;
		if(classDescription != null && classDescription.constructorInjection != null) instance = classDescription.constructorInjection.createInstance(type,this); else instance = Type.createInstance(type,[]);
		this._ed.dispatchEvent(new hex_di_InjectionEvent("onPostInstantiate",this,instance,type));
		if(classDescription != null) this._applyInjection(instance,type,classDescription);
		return instance;
	}
	,getOrCreateNewInstance: function(type) {
		if(this.satisfies(type)) return this.getInstance(type); else return this.instantiateUnmapped(type);
	}
	,hasMapping: function(type,name) {
		if(name == null) name = "";
		var mappingID = Type.getClassName(type) + "|" + name;
		if(this._mapping.get(mappingID) != null) return true; else if(this._parentInjector != null) return this._parentInjector.hasMapping(type,name); else return false;
	}
	,unmap: function(type,name) {
		if(name == null) name = "";
		var mappingID = Type.getClassName(type) + "|" + name;
		var mapping = this._mapping.get(mappingID);
		if(mapping == null) throw new js__$Boot_HaxeError(new hex_di_error_InjectorException("unmap failed with mapping named '" + mappingID + "' @" + hex_log_Stringifier.stringify(this),{ fileName : "Injector.hx", lineNumber : 164, className : "hex.di.Injector", methodName : "unmap"}));
		mapping.provider.destroy();
		this._mapping.remove(mappingID);
	}
	,hasDirectMapping: function(type,name) {
		if(name == null) name = "";
		var mappingID = Type.getClassName(type) + "|" + name;
		return this._mapping.get(mappingID) != null;
	}
	,satisfies: function(type,name) {
		if(name == null) name = "";
		var mappingID = Type.getClassName(type) + "|" + name;
		var mapping = this._mapping.get(mappingID);
		if(this._mapping.get(mappingID) != null) return mapping.provider != null; else if(this._parentInjector != null) return this._parentInjector.satisfies(type,name); else return false;
	}
	,satisfiesDirectly: function(type,name) {
		if(name == null) name = "";
		var mappingID = Type.getClassName(type) + "|" + name;
		var mapping = this._mapping.get(mappingID);
		if(mapping != null) return mapping.provider != null; else return false;
	}
	,injectInto: function(target) {
		var targetType = Type.getClass(target);
		var classDescription = this._classDescriptor.getClassDescription(targetType);
		if(classDescription != null) this._applyInjection(target,targetType,classDescription);
	}
	,destroyInstance: function(instance) {
		var key = instance;
		this._managedObjects.remove(key);
		var classDescription = this._classDescriptor.getClassDescription(Type.getClass(instance));
		if(classDescription != null) {
			var _g = 0;
			var _g1 = classDescription.preDestroy;
			while(_g < _g1.length) {
				var preDestroy = _g1[_g];
				++_g;
				preDestroy.applyInjection(instance,this);
			}
		}
	}
	,map: function(type,name) {
		if(name == null) name = "";
		var mappingID = Type.getClassName(type) + "|" + name;
		if(this._mapping.get(mappingID) != null) return this._mapping.get(mappingID); else return this._createMapping(type,name,mappingID);
	}
	,teardown: function() {
		var $it0 = this._mapping.iterator();
		while( $it0.hasNext() ) {
			var mapping = $it0.next();
			mapping.provider.destroy();
		}
		var it = this._managedObjects.iterator();
		while(it.hasNext()) this.destroyInstance(it.next());
		this._mapping = new haxe_ds_StringMap();
		this._processedMapping = new haxe_ds_StringMap();
		this._managedObjects = new haxe_ds_ObjectMap();
		this._ed = new hex_event_LightweightClosureDispatcher();
	}
	,_createMapping: function(type,name,mappingID) {
		if(this._processedMapping.get(mappingID)) throw new js__$Boot_HaxeError(new hex_di_error_InjectorException("Mapping named '" + mappingID + "' is already processing @" + hex_log_Stringifier.stringify(this),{ fileName : "Injector.hx", lineNumber : 273, className : "hex.di.Injector", methodName : "_createMapping"}));
		{
			this._processedMapping.set(mappingID,true);
			true;
		}
		var mapping = new hex_di_mapping_InjectionMapping(this,type,name,mappingID);
		{
			this._mapping.set(mappingID,mapping);
			mapping;
		}
		this._processedMapping.remove(mappingID);
		return mapping;
	}
	,_applyInjection: function(target,targetType,classDescription) {
		this._ed.dispatchEvent(new hex_di_InjectionEvent("onPreConstruct",this,target,targetType));
		classDescription.applyInjection(target,this);
		if(classDescription.preDestroy.length > 0) {
			var key = target;
			var value = target;
			this._managedObjects.set(key,value);
		}
		this._ed.dispatchEvent(new hex_di_InjectionEvent("onPostConstruct",this,target,targetType));
	}
	,__class__: hex_di_Injector
};
var hex_di_InjectorTest = function() { };
$hxClasses["hex.di.InjectorTest"] = hex_di_InjectorTest;
hex_di_InjectorTest.__name__ = ["hex","di","InjectorTest"];
hex_di_InjectorTest.prototype = {
	injector: null
	,receivedInjectorEvents: null
	,runBeforeEachTest: function() {
		this.injector = new hex_di_Injector();
		this.receivedInjectorEvents = [];
	}
	,teardown: function() {
		this.injector = null;
		this.receivedInjectorEvents = null;
	}
	,testUnmapRemovesExistingMapping: function() {
		var injectee = new hex_di_mock_injectees_InterfaceInjectee();
		var value = new hex_di_mock_types_Clazz();
		this.injector.map(hex_di_mock_types_Interface).toValue(value);
		hex_unittest_assertion_Assert.isTrue(this.injector.satisfies(hex_di_mock_types_Interface),"Injector should satisifies mapped interface",{ fileName : "InjectorTest.hx", lineNumber : 69, className : "hex.di.InjectorTest", methodName : "testUnmapRemovesExistingMapping"});
		this.injector.unmap(hex_di_mock_types_Interface);
		hex_unittest_assertion_Assert.isFalse(this.injector.satisfies(hex_di_mock_types_Interface),"Injector shouldn't satisfie mapped interface anymore",{ fileName : "InjectorTest.hx", lineNumber : 71, className : "hex.di.InjectorTest", methodName : "testUnmapRemovesExistingMapping"});
	}
	,testMapToValueWithClassParameter: function() {
		var injectee = new hex_di_mock_injectees_ClassInjectee();
		var injectee2 = new hex_di_mock_injectees_ClassInjectee();
		var value = new hex_di_mock_types_Clazz();
		this.injector.map(hex_di_mock_types_Clazz).toValue(value);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.equals(value,injectee.property,"Mapped value should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 82, className : "hex.di.InjectorTest", methodName : "testMapToValueWithClassParameter"});
		this.injector.injectInto(injectee2);
		hex_unittest_assertion_Assert.equals(injectee.property,injectee2.property,"Injected values should be the same",{ fileName : "InjectorTest.hx", lineNumber : 84, className : "hex.di.InjectorTest", methodName : "testMapToValueWithClassParameter"});
	}
	,testMapToValueWithInterfaceParameter: function() {
		var injectee = new hex_di_mock_injectees_InterfaceInjectee();
		var value = new hex_di_mock_types_Clazz();
		this.injector.map(hex_di_mock_types_Interface).toValue(value);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.equals(value,injectee.property,"Value should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 94, className : "hex.di.InjectorTest", methodName : "testMapToValueWithInterfaceParameter"});
	}
	,testMapToValueWithNamedClassParameter: function() {
		var injectee = new hex_di_mock_injectees_NamedClassInjectee();
		var value = new hex_di_mock_types_Clazz();
		this.injector.map(hex_di_mock_types_Clazz,"Name").toValue(value);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.equals(value,injectee.property,"Named value should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 104, className : "hex.di.InjectorTest", methodName : "testMapToValueWithNamedClassParameter"});
	}
	,testMapToValueWithNamedInterfaceParameter: function() {
		var injectee = new hex_di_mock_injectees_NamedInterfaceInjectee();
		var value = new hex_di_mock_types_Clazz();
		this.injector.map(hex_di_mock_types_Interface,"Name").toValue(value);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.equals(value,injectee.property,"Named value should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 114, className : "hex.di.InjectorTest", methodName : "testMapToValueWithNamedInterfaceParameter"});
	}
	,testMapToValueWithEmptyStringValue: function() {
		var injectee = new hex_di_mock_injectees_StringInjectee();
		var value = "";
		this.injector.map(String).toValue(value);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.equals(value,injectee.property,"Value should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 124, className : "hex.di.InjectorTest", methodName : "testMapToValueWithEmptyStringValue"});
	}
	,testMappedValueIsNotInjectedIntoRecursively: function() {
		var injectee = new hex_di_mock_injectees_RecursiveInterfaceInjectee();
		var value = new hex_di_mock_injectees_InterfaceInjectee();
		this.injector.map(hex_di_mock_injectees_InterfaceInjectee).toValue(value);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNull(value.property,"Value shouldn't have been injected into",{ fileName : "InjectorTest.hx", lineNumber : 134, className : "hex.di.InjectorTest", methodName : "testMappedValueIsNotInjectedIntoRecursively"});
	}
	,testMapMultipleInterfacesToOneSingletonClass: function() {
		var injectee = new hex_di_mock_injectees_MultipleSingletonsOfSameClassInjectee();
		this.injector.map(hex_di_mock_types_Interface).toSingleton(hex_di_mock_types_Clazz);
		this.injector.map(hex_di_mock_types_Interface2).toSingleton(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.property1,"Singleton Value for 'property1' should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 144, className : "hex.di.InjectorTest", methodName : "testMapMultipleInterfacesToOneSingletonClass"});
		hex_unittest_assertion_Assert.isNotNull(injectee.property2,"Singleton Value for 'property2' should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 145, className : "hex.di.InjectorTest", methodName : "testMapMultipleInterfacesToOneSingletonClass"});
		hex_unittest_assertion_Assert.notEquals(injectee.property1,injectee.property2,"Singleton Values 'property1' and 'property2' should not be identical",{ fileName : "InjectorTest.hx", lineNumber : 146, className : "hex.di.InjectorTest", methodName : "testMapMultipleInterfacesToOneSingletonClass"});
	}
	,testMapClassToTypeCreatesNewInstance: function() {
		var injectee = new hex_di_mock_injectees_ClassInjectee();
		var injectee2 = new hex_di_mock_injectees_ClassInjectee();
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.property,"Instance of Class should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 156, className : "hex.di.InjectorTest", methodName : "testMapClassToTypeCreatesNewInstance"});
		this.injector.injectInto(injectee2);
		hex_unittest_assertion_Assert.notEquals(injectee.property,injectee2.property,"Injected values should be different",{ fileName : "InjectorTest.hx", lineNumber : 158, className : "hex.di.InjectorTest", methodName : "testMapClassToTypeCreatesNewInstance"});
	}
	,testMapClassToTypeProduceNewInstancesInjectedInto: function() {
		var injectee = new hex_di_mock_injectees_ComplexClassInjectee();
		var value = new hex_di_mock_types_Clazz();
		this.injector.map(hex_di_mock_types_Clazz).toValue(value);
		this.injector.map(hex_di_mock_types_ComplexClazz).toType(hex_di_mock_types_ComplexClazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.property,"Complex Value should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 169, className : "hex.di.InjectorTest", methodName : "testMapClassToTypeProduceNewInstancesInjectedInto"});
		hex_unittest_assertion_Assert.equals(value,injectee.property.value,"Nested value should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 170, className : "hex.di.InjectorTest", methodName : "testMapClassToTypeProduceNewInstancesInjectedInto"});
	}
	,testMapInterfaceToType: function() {
		var injectee = new hex_di_mock_injectees_InterfaceInjectee();
		this.injector.map(hex_di_mock_types_Interface).toType(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.property,"Instance of Class should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 179, className : "hex.di.InjectorTest", methodName : "testMapInterfaceToType"});
	}
	,testMapClassToTypeByName: function() {
		var injectee = new hex_di_mock_injectees_NamedClassInjectee();
		this.injector.map(hex_di_mock_types_Clazz,"Name").toType(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.property,"Instance of named Class should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 188, className : "hex.di.InjectorTest", methodName : "testMapClassToTypeByName"});
	}
	,testMapInterfaceToTypeByName: function() {
		var injectee = new hex_di_mock_injectees_NamedInterfaceInjectee();
		this.injector.map(hex_di_mock_types_Interface,"Name").toType(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.property,"Instance of named Class should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 197, className : "hex.di.InjectorTest", methodName : "testMapInterfaceToTypeByName"});
	}
	,mapClassToSingletonProvideUniqueInstance: function() {
		var injectee = new hex_di_mock_injectees_ClassInjectee();
		var injectee2 = new hex_di_mock_injectees_ClassInjectee();
		this.injector.map(hex_di_mock_types_Clazz).toSingleton(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.property,"Instance of Class should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 207, className : "hex.di.InjectorTest", methodName : "mapClassToSingletonProvideUniqueInstance"});
		this.injector.injectInto(injectee2);
		hex_unittest_assertion_Assert.equals(injectee.property,injectee2.property,"Injected values should be the same",{ fileName : "InjectorTest.hx", lineNumber : 209, className : "hex.di.InjectorTest", methodName : "mapClassToSingletonProvideUniqueInstance"});
	}
	,testMapInterfaceToSingletonProvideUniqueInstance: function() {
		var injectee = new hex_di_mock_injectees_InterfaceInjectee();
		var injectee2 = new hex_di_mock_injectees_InterfaceInjectee();
		this.injector.map(hex_di_mock_types_Interface).toSingleton(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.property,"Instance of Class should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 219, className : "hex.di.InjectorTest", methodName : "testMapInterfaceToSingletonProvideUniqueInstance"});
		this.injector.injectInto(injectee2);
		hex_unittest_assertion_Assert.equals(injectee.property,injectee2.property,"Injected values should be equal",{ fileName : "InjectorTest.hx", lineNumber : 221, className : "hex.di.InjectorTest", methodName : "testMapInterfaceToSingletonProvideUniqueInstance"});
	}
	,testMapSameInterfaceWithDifferentNamesToDifferentSingletonsProvideDifferentInstances: function() {
		var injectee = new hex_di_mock_injectees_TwoNamedInterfaceFieldsInjectee();
		this.injector.map(hex_di_mock_types_Interface,"Name1").toSingleton(hex_di_mock_types_Clazz);
		this.injector.map(hex_di_mock_types_Interface,"Name2").toSingleton(hex_di_mock_types_Clazz2);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isInstanceOf(injectee.property1,hex_di_mock_types_Clazz,"Property \"property1\" should be of type \"Clazz\"",{ fileName : "InjectorTest.hx", lineNumber : 231, className : "hex.di.InjectorTest", methodName : "testMapSameInterfaceWithDifferentNamesToDifferentSingletonsProvideDifferentInstances"});
		hex_unittest_assertion_Assert.isInstanceOf(injectee.property2,hex_di_mock_types_Clazz2,"Property \"property2\" should be of type \"Clazz2\"",{ fileName : "InjectorTest.hx", lineNumber : 232, className : "hex.di.InjectorTest", methodName : "testMapSameInterfaceWithDifferentNamesToDifferentSingletonsProvideDifferentInstances"});
		hex_unittest_assertion_Assert.notEquals(injectee.property1,injectee.property2,"Properties \"property1\" and \"property2\" should have received different singletons",{ fileName : "InjectorTest.hx", lineNumber : 233, className : "hex.di.InjectorTest", methodName : "testMapSameInterfaceWithDifferentNamesToDifferentSingletonsProvideDifferentInstances"});
	}
	,testSetterInjectionFulfillsDependency: function() {
		var injectee = new hex_di_mock_injectees_SetterInjectee();
		var injectee2 = new hex_di_mock_injectees_SetterInjectee();
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.get_property(),"Instance of Class should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 243, className : "hex.di.InjectorTest", methodName : "testSetterInjectionFulfillsDependency"});
		this.injector.injectInto(injectee2);
		hex_unittest_assertion_Assert.notEquals(injectee.get_property(),injectee2.get_property(),"Injected values should be different",{ fileName : "InjectorTest.hx", lineNumber : 245, className : "hex.di.InjectorTest", methodName : "testSetterInjectionFulfillsDependency"});
	}
	,testOneParameterMethodInjection: function() {
		var injectee = new hex_di_mock_injectees_OneParameterMethodInjectee();
		var injectee2 = new hex_di_mock_injectees_OneParameterMethodInjectee();
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency(),"Instance of Class should have been injected",{ fileName : "InjectorTest.hx", lineNumber : 255, className : "hex.di.InjectorTest", methodName : "testOneParameterMethodInjection"});
		this.injector.injectInto(injectee2);
		hex_unittest_assertion_Assert.notEquals(injectee.getDependency(),injectee2.getDependency(),"Injected values should be different",{ fileName : "InjectorTest.hx", lineNumber : 257, className : "hex.di.InjectorTest", methodName : "testOneParameterMethodInjection"});
	}
	,testOneNamedParameterMethodInjection: function() {
		var injectee = new hex_di_mock_injectees_OneNamedParameterMethodInjectee();
		var injectee2 = new hex_di_mock_injectees_OneNamedParameterMethodInjectee();
		this.injector.map(hex_di_mock_types_Clazz,"namedDep").toType(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency(),"Instance of Class should have been injected for named Clazz parameter",{ fileName : "InjectorTest.hx", lineNumber : 267, className : "hex.di.InjectorTest", methodName : "testOneNamedParameterMethodInjection"});
		this.injector.injectInto(injectee2);
		hex_unittest_assertion_Assert.notEquals(injectee.getDependency(),injectee2.getDependency(),"Injected values should be different",{ fileName : "InjectorTest.hx", lineNumber : 269, className : "hex.di.InjectorTest", methodName : "testOneNamedParameterMethodInjection"});
	}
	,testTwoParametersMethodInjection: function() {
		var injectee = new hex_di_mock_injectees_TwoParametersMethodInjectee();
		var injectee2 = new hex_di_mock_injectees_TwoParametersMethodInjectee();
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		this.injector.map(hex_di_mock_types_Interface).toType(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency(),"Instance of Class should have been injected for unnamed Clazz parameter",{ fileName : "InjectorTest.hx", lineNumber : 280, className : "hex.di.InjectorTest", methodName : "testTwoParametersMethodInjection"});
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency2(),"Instance of Class should have been injected for unnamed Interface parameter",{ fileName : "InjectorTest.hx", lineNumber : 281, className : "hex.di.InjectorTest", methodName : "testTwoParametersMethodInjection"});
		this.injector.injectInto(injectee2);
		hex_unittest_assertion_Assert.notEquals(injectee.getDependency(),injectee2.getDependency(),"Injected values should be different",{ fileName : "InjectorTest.hx", lineNumber : 283, className : "hex.di.InjectorTest", methodName : "testTwoParametersMethodInjection"});
		hex_unittest_assertion_Assert.notEquals(injectee.getDependency2(),injectee2.getDependency2(),"Injected values for Interface should be different",{ fileName : "InjectorTest.hx", lineNumber : 284, className : "hex.di.InjectorTest", methodName : "testTwoParametersMethodInjection"});
	}
	,testTwoNamedParametersMethodInjection: function() {
		var injectee = new hex_di_mock_injectees_TwoNamedParametersMethodInjectee();
		var injectee2 = new hex_di_mock_injectees_TwoNamedParametersMethodInjectee();
		this.injector.map(hex_di_mock_types_Clazz,"namedDep").toType(hex_di_mock_types_Clazz);
		this.injector.map(hex_di_mock_types_Interface,"namedDep2").toType(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency(),"Instance of Class should have been injected for named Clazz parameter",{ fileName : "InjectorTest.hx", lineNumber : 295, className : "hex.di.InjectorTest", methodName : "testTwoNamedParametersMethodInjection"});
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency2(),"Instance of Class should have been injected for named Interface parameter",{ fileName : "InjectorTest.hx", lineNumber : 296, className : "hex.di.InjectorTest", methodName : "testTwoNamedParametersMethodInjection"});
		this.injector.injectInto(injectee2);
		hex_unittest_assertion_Assert.notEquals(injectee.getDependency(),injectee2.getDependency(),"Injected values should be different",{ fileName : "InjectorTest.hx", lineNumber : 298, className : "hex.di.InjectorTest", methodName : "testTwoNamedParametersMethodInjection"});
		hex_unittest_assertion_Assert.notEquals(injectee.getDependency2(),injectee2.getDependency2(),"Injected values for Interface should be different",{ fileName : "InjectorTest.hx", lineNumber : 299, className : "hex.di.InjectorTest", methodName : "testTwoNamedParametersMethodInjection"});
	}
	,testNamedAndUnnamedParametersMethodInjection: function() {
		var injectee = new hex_di_mock_injectees_MixedParametersMethodInjectee();
		var injectee2 = new hex_di_mock_injectees_MixedParametersMethodInjectee();
		this.injector.map(hex_di_mock_types_Clazz,"namedDep").toType(hex_di_mock_types_Clazz);
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		this.injector.map(hex_di_mock_types_Interface,"namedDep2").toType(hex_di_mock_types_Clazz);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency(),"Instance of Class should have been injected for named Clazz parameter",{ fileName : "InjectorTest.hx", lineNumber : 311, className : "hex.di.InjectorTest", methodName : "testNamedAndUnnamedParametersMethodInjection"});
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency2(),"Instance of Class should have been injected for unnamed Clazz parameter",{ fileName : "InjectorTest.hx", lineNumber : 312, className : "hex.di.InjectorTest", methodName : "testNamedAndUnnamedParametersMethodInjection"});
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency3(),"Instance of Class should have been injected for Interface",{ fileName : "InjectorTest.hx", lineNumber : 313, className : "hex.di.InjectorTest", methodName : "testNamedAndUnnamedParametersMethodInjection"});
		this.injector.injectInto(injectee2);
		hex_unittest_assertion_Assert.notEquals(injectee.getDependency(),injectee2.getDependency(),"Injected values for named Clazz should be different",{ fileName : "InjectorTest.hx", lineNumber : 315, className : "hex.di.InjectorTest", methodName : "testNamedAndUnnamedParametersMethodInjection"});
		hex_unittest_assertion_Assert.notEquals(injectee.getDependency2(),injectee2.getDependency2(),"Injected values for unnamed Clazz should be different",{ fileName : "InjectorTest.hx", lineNumber : 316, className : "hex.di.InjectorTest", methodName : "testNamedAndUnnamedParametersMethodInjection"});
		hex_unittest_assertion_Assert.notEquals(injectee.getDependency3(),injectee2.getDependency3(),"Injected values for named Interface should be different",{ fileName : "InjectorTest.hx", lineNumber : 317, className : "hex.di.InjectorTest", methodName : "testNamedAndUnnamedParametersMethodInjection"});
	}
	,testGetMappingResultWithoutProviderThrowsAnException: function() {
		this.injector.map(hex_di_mock_types_Clazz);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,this.injector,($_=this.injector,$bind($_,$_.instantiateUnmapped)),[null],"",{ fileName : "InjectorTest.hx", lineNumber : 324, className : "hex.di.InjectorTest", methodName : "testGetMappingResultWithoutProviderThrowsAnException"});
	}
	,testOneParameterConstructorInjection: function() {
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		var injectee = this.injector.instantiateUnmapped(hex_di_mock_injectees_OneParameterConstructorInjectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency(),"Instance of Class should have been injected for Clazz parameter",{ fileName : "InjectorTest.hx", lineNumber : 332, className : "hex.di.InjectorTest", methodName : "testOneParameterConstructorInjection"});
	}
	,testTwoParametersConstructorInjection: function() {
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		this.injector.map(String).toValue("stringDependency");
		var injectee = this.injector.instantiateUnmapped(hex_di_mock_injectees_TwoParametersConstructorInjectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency(),"Instance of Class should have been injected for named Clazz parameter",{ fileName : "InjectorTest.hx", lineNumber : 341, className : "hex.di.InjectorTest", methodName : "testTwoParametersConstructorInjection"});
		hex_unittest_assertion_Assert.equals("stringDependency",injectee.getDependency2(),"The String 'stringDependency' should have been injected for String parameter",{ fileName : "InjectorTest.hx", lineNumber : 342, className : "hex.di.InjectorTest", methodName : "testTwoParametersConstructorInjection"});
	}
	,testOneNamedParameterConstructorInjection: function() {
		this.injector.map(hex_di_mock_types_Clazz,"namedDependency").toType(hex_di_mock_types_Clazz);
		var injectee = this.injector.instantiateUnmapped(hex_di_mock_injectees_OneNamedParameterConstructorInjectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency(),"Instance of Class should have been injected for named Clazz parameter",{ fileName : "InjectorTest.hx", lineNumber : 350, className : "hex.di.InjectorTest", methodName : "testOneNamedParameterConstructorInjection"});
	}
	,testTwoNamedParametersConstructorInjection: function() {
		this.injector.map(hex_di_mock_types_Clazz,"namedDependency").toType(hex_di_mock_types_Clazz);
		this.injector.map(String,"namedDependency2").toValue("stringDependency");
		var injectee = this.injector.instantiateUnmapped(hex_di_mock_injectees_TwoNamedParametersConstructorInjectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency(),"Instance of Class should have been injected for named Clazz parameter",{ fileName : "InjectorTest.hx", lineNumber : 359, className : "hex.di.InjectorTest", methodName : "testTwoNamedParametersConstructorInjection"});
		hex_unittest_assertion_Assert.equals(injectee.getDependency2(),"stringDependency","The String 'stringDependency' should have been injected for named String parameter",{ fileName : "InjectorTest.hx", lineNumber : 360, className : "hex.di.InjectorTest", methodName : "testTwoNamedParametersConstructorInjection"});
	}
	,testNamedAndUnnamedParametersConstructorInjection: function() {
		this.injector.map(hex_di_mock_types_Clazz,"namedDep").toType(hex_di_mock_types_Clazz);
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		this.injector.map(hex_di_mock_types_Interface,"namedDep2").toType(hex_di_mock_types_Clazz);
		var injectee = this.injector.instantiateUnmapped(hex_di_mock_injectees_MixedParametersConstructorInjectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency(),"Instance of Class should have been injected for named Clazz parameter",{ fileName : "InjectorTest.hx", lineNumber : 370, className : "hex.di.InjectorTest", methodName : "testNamedAndUnnamedParametersConstructorInjection"});
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency2(),"Instance of Class should have been injected for unnamed Clazz parameter",{ fileName : "InjectorTest.hx", lineNumber : 371, className : "hex.di.InjectorTest", methodName : "testNamedAndUnnamedParametersConstructorInjection"});
		hex_unittest_assertion_Assert.isNotNull(injectee.getDependency3(),"Instance of Class should have been injected for Interface",{ fileName : "InjectorTest.hx", lineNumber : 372, className : "hex.di.InjectorTest", methodName : "testNamedAndUnnamedParametersConstructorInjection"});
	}
	,testNamedArrayInjection: function() {
		var ac = [];
		this.injector.map(Array,"namedCollection").toValue(ac);
		var injectee = this.injector.instantiateUnmapped(hex_di_mock_injectees_NamedArrayCollectionInjectee);
		hex_unittest_assertion_Assert.isNotNull(injectee.ac,"Instance 'ac' should have been injected for named ArrayCollection parameter",{ fileName : "InjectorTest.hx", lineNumber : 381, className : "hex.di.InjectorTest", methodName : "testNamedArrayInjection"});
		hex_unittest_assertion_Assert.equals(ac,injectee.ac,"Instance field 'ac' should be identical to local variable 'ac'",{ fileName : "InjectorTest.hx", lineNumber : 382, className : "hex.di.InjectorTest", methodName : "testNamedArrayInjection"});
	}
	,testInjectXmlValue: function() {
		var injectee = new hex_di_mock_injectees_XMLInjectee();
		var value = Xml.parse("<test/>");
		this.injector.map(Xml).toValue(value);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.equals(value,injectee.property,"injected value should be indentical to mapped value",{ fileName : "InjectorTest.hx", lineNumber : 392, className : "hex.di.InjectorTest", methodName : "testInjectXmlValue"});
	}
	,testMissingInterfaceMappingThrowsAnException: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_di_error_MissingMappingException,this.injector,($_=this.injector,$bind($_,$_.injectInto)),[new hex_di_mock_injectees_InterfaceInjectee()],"'injectInto' should throw MissingMappingException",{ fileName : "InjectorTest.hx", lineNumber : 398, className : "hex.di.InjectorTest", methodName : "testMissingInterfaceMappingThrowsAnException"});
	}
	,testMissingClassMappingThrowsAnException: function() {
		var injectee = new hex_di_mock_injectees_ClassInjectee();
		hex_unittest_assertion_Assert.methodCallThrows(hex_di_error_MissingMappingException,this.injector,($_=this.injector,$bind($_,$_.injectInto)),[injectee],"'injectInto' should throw InjectorMissingMappingError",{ fileName : "InjectorTest.hx", lineNumber : 405, className : "hex.di.InjectorTest", methodName : "testMissingClassMappingThrowsAnException"});
	}
	,testMissingNamedClassMappingThrowsAnException: function() {
		var injectee = new hex_di_mock_injectees_NamedClassInjectee();
		hex_unittest_assertion_Assert.methodCallThrows(hex_di_error_MissingMappingException,this.injector,($_=this.injector,$bind($_,$_.injectInto)),[injectee],"'injectInto' should throw InjectorMissingMappingError",{ fileName : "InjectorTest.hx", lineNumber : 412, className : "hex.di.InjectorTest", methodName : "testMissingNamedClassMappingThrowsAnException"});
	}
	,testPostConstructMethodIsCalled: function() {
		var injectee = new hex_di_mock_injectees_ClassInjectee();
		var value = new hex_di_mock_types_Clazz();
		this.injector.map(hex_di_mock_types_Clazz).toValue(value);
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.isTrue(injectee.someProperty,"'postConstruct' tagged method should be called after class instantiation",{ fileName : "InjectorTest.hx", lineNumber : 422, className : "hex.di.InjectorTest", methodName : "testPostConstructMethodIsCalled"});
	}
	,testPostConstructMethodWithArgIsCalled: function() {
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		var injectee = this.injector.instantiateUnmapped(hex_di_mock_injectees_PostConstructWithArgInjectee);
		hex_unittest_assertion_Assert.isInstanceOf(injectee.property,hex_di_mock_types_Clazz,"'postConstruct' tagged method should be called with args after class instantiation",{ fileName : "InjectorTest.hx", lineNumber : 430, className : "hex.di.InjectorTest", methodName : "testPostConstructMethodWithArgIsCalled"});
	}
	,testPostConstructMethodAreCalledInTheRightOrder: function() {
		var injectee = new hex_di_mock_injectees_OrderedPostConstructInjectee();
		this.injector.injectInto(injectee);
		hex_unittest_assertion_Assert.deepEquals([1,2,3,4],injectee.loadOrder,"'postConstruct' tagged method should be called with args after class instantiation in the right order",{ fileName : "InjectorTest.hx", lineNumber : 438, className : "hex.di.InjectorTest", methodName : "testPostConstructMethodAreCalledInTheRightOrder"});
	}
	,testSatisfiesReturnsFalseForUnmappedAndUnnamedInterface: function() {
		hex_unittest_assertion_Assert.isFalse(this.injector.satisfies(hex_di_mock_types_Interface),"'satisfies' should returns false with unmapped type",{ fileName : "InjectorTest.hx", lineNumber : 444, className : "hex.di.InjectorTest", methodName : "testSatisfiesReturnsFalseForUnmappedAndUnnamedInterface"});
	}
	,testSatisfiesReturnsFalseForUnmappedAndUnnamedClass: function() {
		hex_unittest_assertion_Assert.isFalse(this.injector.satisfies(hex_di_mock_types_Clazz),"'satisfies' should returns false with unmapped type",{ fileName : "InjectorTest.hx", lineNumber : 450, className : "hex.di.InjectorTest", methodName : "testSatisfiesReturnsFalseForUnmappedAndUnnamedClass"});
	}
	,testSatisfiesReturnsFalseForUnmappedAndNamedClass: function() {
		hex_unittest_assertion_Assert.isFalse(this.injector.satisfies(hex_di_mock_types_Clazz,"namedClass"),"'satisfies' should returns false with unmapped type",{ fileName : "InjectorTest.hx", lineNumber : 456, className : "hex.di.InjectorTest", methodName : "testSatisfiesReturnsFalseForUnmappedAndNamedClass"});
	}
	,testSatisfiesReturnsTrueForMappedAndUnnamedClass: function() {
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		hex_unittest_assertion_Assert.isTrue(this.injector.satisfies(hex_di_mock_types_Clazz),"'satisfies' should returns true with mapped type",{ fileName : "InjectorTest.hx", lineNumber : 463, className : "hex.di.InjectorTest", methodName : "testSatisfiesReturnsTrueForMappedAndUnnamedClass"});
	}
	,testSatisfiesReturnsTrueForMappedAndNamedClass: function() {
		this.injector.map(hex_di_mock_types_Clazz,"namedClass").toType(hex_di_mock_types_Clazz);
		hex_unittest_assertion_Assert.isTrue(this.injector.satisfies(hex_di_mock_types_Clazz,"namedClass"),"'satisfies' should returns true with mapped named type",{ fileName : "InjectorTest.hx", lineNumber : 470, className : "hex.di.InjectorTest", methodName : "testSatisfiesReturnsTrueForMappedAndNamedClass"});
	}
	,testGetInstanceThrowsAnErrorForUnmappedClass: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_di_error_MissingMappingException,this.injector,($_=this.injector,$bind($_,$_.getInstance)),[hex_di_mock_types_Clazz],"'getInstance' should throw InjectorMissingMappingError",{ fileName : "InjectorTest.hx", lineNumber : 476, className : "hex.di.InjectorTest", methodName : "testGetInstanceThrowsAnErrorForUnmappedClass"});
	}
	,testInstantiateUnmappedWorksWithUnmappedClass: function() {
		hex_unittest_assertion_Assert.isInstanceOf(this.injector.instantiateUnmapped(hex_di_mock_types_Clazz),hex_di_mock_types_Clazz,"'instantiateUnmapped' should work with unmapped types",{ fileName : "InjectorTest.hx", lineNumber : 482, className : "hex.di.InjectorTest", methodName : "testInstantiateUnmappedWorksWithUnmappedClass"});
	}
	,testGetInstanceThrowsAnErrorForUnmappedAndNamedClass: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_di_error_MissingMappingException,this.injector,($_=this.injector,$bind($_,$_.getInstance)),[hex_di_mock_types_Clazz,"namedClass"],"'getInstance' should throw InjectorMissingMappingError",{ fileName : "InjectorTest.hx", lineNumber : 488, className : "hex.di.InjectorTest", methodName : "testGetInstanceThrowsAnErrorForUnmappedAndNamedClass"});
	}
	,testGetInstanceReturnsMappedValueForMappedAndUnnamedClass: function() {
		var clazz = new hex_di_mock_types_Clazz();
		this.injector.map(hex_di_mock_types_Clazz).toValue(clazz);
		hex_unittest_assertion_Assert.equals(this.injector.getInstance(hex_di_mock_types_Clazz),clazz,"'getInstance' should return mapped value",{ fileName : "InjectorTest.hx", lineNumber : 496, className : "hex.di.InjectorTest", methodName : "testGetInstanceReturnsMappedValueForMappedAndUnnamedClass"});
	}
	,testGetInstanceReturnsMappedValueForMappedAndNamedClass: function() {
		var clazz = new hex_di_mock_types_Clazz();
		this.injector.map(hex_di_mock_types_Clazz,"namedClass").toValue(clazz);
		hex_unittest_assertion_Assert.equals(this.injector.getInstance(hex_di_mock_types_Clazz,"namedClass"),clazz,"'getInstance' should return mapped named value",{ fileName : "InjectorTest.hx", lineNumber : 504, className : "hex.di.InjectorTest", methodName : "testGetInstanceReturnsMappedValueForMappedAndNamedClass"});
	}
	,testMapToSingletonTwiceTargetsTheSameInstance: function() {
		this.injector.map(hex_di_mock_types_Clazz).toSingleton(hex_di_mock_types_Clazz);
		var injectee1 = this.injector.instantiateUnmapped(hex_di_mock_injectees_ClassInjectee);
		this.injector.map(hex_di_mock_types_Clazz).toSingleton(hex_di_mock_types_Clazz);
		var injectee2 = this.injector.instantiateUnmapped(hex_di_mock_injectees_ClassInjectee);
		hex_unittest_assertion_Assert.notEquals(injectee1.property,injectee2.property,"injectee1.property is not the same instance as injectee2.property",{ fileName : "InjectorTest.hx", lineNumber : 514, className : "hex.di.InjectorTest", methodName : "testMapToSingletonTwiceTargetsTheSameInstance"});
	}
	,testUnmapSingletonRemovesTheSingletonInstance: function() {
		this.injector.map(hex_di_mock_types_Clazz).toSingleton(hex_di_mock_types_Clazz);
		var injectee1 = this.injector.instantiateUnmapped(hex_di_mock_injectees_ClassInjectee);
		this.injector.unmap(hex_di_mock_types_Clazz);
		this.injector.map(hex_di_mock_types_Clazz).toSingleton(hex_di_mock_types_Clazz);
		var injectee2 = this.injector.instantiateUnmapped(hex_di_mock_injectees_ClassInjectee);
		hex_unittest_assertion_Assert.notEquals(injectee1.property,injectee2.property,"injectee1.property is not the same instance as injectee2.property",{ fileName : "InjectorTest.hx", lineNumber : 525, className : "hex.di.InjectorTest", methodName : "testUnmapSingletonRemovesTheSingletonInstance"});
	}
	,testGetInstanceOnUmappedInterfaceThrowsException: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_di_error_MissingMappingException,this.injector,($_=this.injector,$bind($_,$_.getInstance)),[hex_di_mock_types_Interface],"'getInstance' should throw MissingMappingException",{ fileName : "InjectorTest.hx", lineNumber : 532, className : "hex.di.InjectorTest", methodName : "testGetInstanceOnUmappedInterfaceThrowsException"});
	}
	,testInstantiateClassWithOptionalProperty: function() {
		var injectee = this.injector.instantiateUnmapped(hex_di_mock_injectees_OptionalClassInjectee);
		hex_unittest_assertion_Assert.isNull(injectee.property,"Injectee mustn't contain Clazz instance",{ fileName : "InjectorTest.hx", lineNumber : 539, className : "hex.di.InjectorTest", methodName : "testInstantiateClassWithOptionalProperty"});
	}
	,testInstantiateClassWithOptionalMethodArgument: function() {
		var injectee = this.injector.instantiateUnmapped(hex_di_mock_injectees_OptionalOneRequiredParameterMethodInjectee);
		hex_unittest_assertion_Assert.isNull(injectee.getDependency(),"Injectee mustn't contain Interface instance",{ fileName : "InjectorTest.hx", lineNumber : 546, className : "hex.di.InjectorTest", methodName : "testInstantiateClassWithOptionalMethodArgument"});
	}
	,testInjectorDispatchesPostInstantiateEvent: function() {
		hex_unittest_assertion_Assert.isTrue(this._constructMappedTypeAndListenForEvent("onPostInstantiate"),"InjectionEvent.POST_INSTANTIATE should be dispatched",{ fileName : "InjectorTest.hx", lineNumber : 552, className : "hex.di.InjectorTest", methodName : "testInjectorDispatchesPostInstantiateEvent"});
	}
	,testInjectorDispatchesPreConstructEvent: function() {
		hex_unittest_assertion_Assert.isTrue(this._constructMappedTypeAndListenForEvent("onPreConstruct"),"InjectionEvent.PRE_CONSTRUCT should be dispatched",{ fileName : "InjectorTest.hx", lineNumber : 558, className : "hex.di.InjectorTest", methodName : "testInjectorDispatchesPreConstructEvent"});
	}
	,testInjectorDispatchesPostConstructEvent: function() {
		hex_unittest_assertion_Assert.isTrue(this._constructMappedTypeAndListenForEvent("onPostConstruct"),"InjectionEvent.POST_CONSTRUCT should be dispatched",{ fileName : "InjectorTest.hx", lineNumber : 564, className : "hex.di.InjectorTest", methodName : "testInjectorDispatchesPostConstructEvent"});
	}
	,testInjectorEventsContainsInstanceReference: function() {
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		this.injector.addEventListener("onPostInstantiate",$bind(this,this._assertThatEventHasClazzInstance));
		this.injector.addEventListener("onPreConstruct",$bind(this,this._assertThatEventHasClazzInstance));
		this.injector.addEventListener("onPostConstruct",$bind(this,this._assertThatEventHasClazzInstance));
		var instance = this.injector.getInstance(hex_di_mock_types_Clazz);
	}
	,testInjectIntoDispatchesPreConstructEvent: function() {
		hex_unittest_assertion_Assert.isTrue(this._injectIntoInstanceAndListenForEvent("onPreConstruct"),"InjectionEvent.PRE_CONSTRUCT should be listened",{ fileName : "InjectorTest.hx", lineNumber : 580, className : "hex.di.InjectorTest", methodName : "testInjectIntoDispatchesPreConstructEvent"});
	}
	,testInjectIntoDispatchesPostConstructEvent: function() {
		hex_unittest_assertion_Assert.isTrue(this._injectIntoInstanceAndListenForEvent("onPostConstruct"),"InjectionEvent.POST_CONSTRUCT should be listened",{ fileName : "InjectorTest.hx", lineNumber : 586, className : "hex.di.InjectorTest", methodName : "testInjectIntoDispatchesPostConstructEvent"});
	}
	,_assertThatEventHasClazzInstance: function(e) {
		hex_unittest_assertion_Assert.isInstanceOf(e.instance,hex_di_mock_types_Clazz,"",{ fileName : "InjectorTest.hx", lineNumber : 591, className : "hex.di.InjectorTest", methodName : "_assertThatEventHasClazzInstance"});
	}
	,_injectIntoInstanceAndListenForEvent: function(eventType) {
		var injectee = new hex_di_mock_injectees_ClassInjectee();
		this.injector.map(hex_di_mock_types_Clazz).toValue(new hex_di_mock_types_Clazz());
		this._listenToInjectorEvent(eventType);
		this.injector.injectInto(injectee);
		return this.receivedInjectorEvents.pop() == eventType;
	}
	,_constructMappedTypeAndListenForEvent: function(eventType) {
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		this._listenToInjectorEvent(eventType);
		this.injector.getInstance(hex_di_mock_types_Clazz);
		return this.receivedInjectorEvents.pop() == eventType;
	}
	,_listenToInjectorEvent: function(eventType) {
		this.injector.addEventListener(eventType,$bind(this,this._onInjectorEvent));
	}
	,_onInjectorEvent: function(e) {
		this.receivedInjectorEvents.push(e.type);
	}
	,testUnmapSingletonProviderInvokesPredestroyMethodsOnSingleton: function() {
		this.injector.map(hex_di_mock_types_Clazz).asSingleton();
		var singleton = this.injector.getInstance(hex_di_mock_types_Clazz);
		hex_unittest_assertion_Assert.isFalse(singleton.preDestroyCalled,"singleton.preDestroyCalled should be false",{ fileName : "InjectorTest.hx", lineNumber : 626, className : "hex.di.InjectorTest", methodName : "testUnmapSingletonProviderInvokesPredestroyMethodsOnSingleton"});
		this.injector.unmap(hex_di_mock_types_Clazz);
		hex_unittest_assertion_Assert.isTrue(singleton.preDestroyCalled,"singleton.preDestroyCalled should be true",{ fileName : "InjectorTest.hx", lineNumber : 628, className : "hex.di.InjectorTest", methodName : "testUnmapSingletonProviderInvokesPredestroyMethodsOnSingleton"});
	}
	,testDestroyInstanceInvokesPredestroyMethodsOnInstance: function() {
		var target = new hex_di_mock_types_Clazz();
		hex_unittest_assertion_Assert.isFalse(target.preDestroyCalled,"target.preDestroyCalled should be false",{ fileName : "InjectorTest.hx", lineNumber : 635, className : "hex.di.InjectorTest", methodName : "testDestroyInstanceInvokesPredestroyMethodsOnInstance"});
		this.injector.destroyInstance(target);
		hex_unittest_assertion_Assert.isTrue(target.preDestroyCalled,"target.preDestroyCalled should be true",{ fileName : "InjectorTest.hx", lineNumber : 637, className : "hex.di.InjectorTest", methodName : "testDestroyInstanceInvokesPredestroyMethodsOnInstance"});
	}
	,testTeardownDestroyAllSingletons: function() {
		this.injector.map(hex_di_mock_types_Clazz).asSingleton();
		this.injector.map(hex_di_mock_types_Interface).toSingleton(hex_di_mock_types_Clazz);
		var singleton1 = this.injector.getInstance(hex_di_mock_types_Clazz);
		var singleton2 = this.injector.getInstance(hex_di_mock_types_Interface);
		hex_unittest_assertion_Assert.isFalse(singleton1.preDestroyCalled,"singleton1.preDestroyCalled should be false",{ fileName : "InjectorTest.hx", lineNumber : 648, className : "hex.di.InjectorTest", methodName : "testTeardownDestroyAllSingletons"});
		hex_unittest_assertion_Assert.isFalse(singleton2.preDestroyCalled,"singleton2.preDestroyCalled should be false",{ fileName : "InjectorTest.hx", lineNumber : 649, className : "hex.di.InjectorTest", methodName : "testTeardownDestroyAllSingletons"});
		this.injector.teardown();
		hex_unittest_assertion_Assert.isTrue(singleton1.preDestroyCalled,"singleton1.preDestroyCalled should be true",{ fileName : "InjectorTest.hx", lineNumber : 653, className : "hex.di.InjectorTest", methodName : "testTeardownDestroyAllSingletons"});
		hex_unittest_assertion_Assert.isTrue(singleton2.preDestroyCalled,"singleton2.preDestroyCalled should be true",{ fileName : "InjectorTest.hx", lineNumber : 654, className : "hex.di.InjectorTest", methodName : "testTeardownDestroyAllSingletons"});
	}
	,testTeardownDestroysAllInstancesInjectedInto: function() {
		var target1 = new hex_di_mock_types_Clazz();
		this.injector.injectInto(target1);
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		var target2 = this.injector.getInstance(hex_di_mock_types_Clazz);
		hex_unittest_assertion_Assert.notEquals(target1,target2,"",{ fileName : "InjectorTest.hx", lineNumber : 665, className : "hex.di.InjectorTest", methodName : "testTeardownDestroysAllInstancesInjectedInto"});
		hex_unittest_assertion_Assert.isFalse(target1.preDestroyCalled,"target1.preDestroyCalled should be false",{ fileName : "InjectorTest.hx", lineNumber : 667, className : "hex.di.InjectorTest", methodName : "testTeardownDestroysAllInstancesInjectedInto"});
		hex_unittest_assertion_Assert.isFalse(target2.preDestroyCalled,"target2.preDestroyCalled should be false",{ fileName : "InjectorTest.hx", lineNumber : 668, className : "hex.di.InjectorTest", methodName : "testTeardownDestroysAllInstancesInjectedInto"});
		this.injector.teardown();
		hex_unittest_assertion_Assert.isTrue(target1.preDestroyCalled,"target1.preDestroyCalled should be true",{ fileName : "InjectorTest.hx", lineNumber : 672, className : "hex.di.InjectorTest", methodName : "testTeardownDestroysAllInstancesInjectedInto"});
		hex_unittest_assertion_Assert.isTrue(target2.preDestroyCalled,"target2.preDestroyCalled should be true",{ fileName : "InjectorTest.hx", lineNumber : 673, className : "hex.di.InjectorTest", methodName : "testTeardownDestroysAllInstancesInjectedInto"});
	}
	,testStatisfiesReturnsFalseForUnmappedCommonBaseTypes: function() {
		var baseTypes = [Bool,Dynamic,Array,Class,Int,Float,String];
		var _g1 = 0;
		var _g = baseTypes.length;
		while(_g1 < _g) {
			var i = _g1++;
			hex_unittest_assertion_Assert.isFalse(this.injector.satisfies(baseTypes[i]),"injector.satisfies should return false",{ fileName : "InjectorTest.hx", lineNumber : 682, className : "hex.di.InjectorTest", methodName : "testStatisfiesReturnsFalseForUnmappedCommonBaseTypes"});
		}
	}
	,testMapInjectorToValue: function() {
		this.injector.mapToValue(hex_di_IDependencyInjector,this.injector);
		var injectee = this.injector.instantiateUnmapped(hex_di_mock_injectees_InjectorInjectee);
		hex_unittest_assertion_Assert.equals(this.injector,injectee.injector,"injector should be injected",{ fileName : "InjectorTest.hx", lineNumber : 691, className : "hex.di.InjectorTest", methodName : "testMapInjectorToValue"});
	}
	,testInstantiateUnmappedReturnsNewInstanceWhenMappedInstanceExists: function() {
		var mappedValue = new hex_di_mock_types_Clazz();
		this.injector.map(hex_di_mock_types_Clazz).toValue(mappedValue);
		var instance = this.injector.instantiateUnmapped(hex_di_mock_types_Clazz);
		hex_unittest_assertion_Assert.notEquals(instance,mappedValue,"",{ fileName : "InjectorTest.hx", lineNumber : 700, className : "hex.di.InjectorTest", methodName : "testInstantiateUnmappedReturnsNewInstanceWhenMappedInstanceExists"});
	}
	,testHasMappingReturnsTrueForParentMapping: function() {
		this.injector.map(hex_di_mock_types_Clazz).toValue(new hex_di_mock_types_Clazz());
		var childInjector = this.injector.createChildInjector();
		hex_unittest_assertion_Assert.isTrue(childInjector.hasMapping(hex_di_mock_types_Clazz),"",{ fileName : "InjectorTest.hx", lineNumber : 708, className : "hex.di.InjectorTest", methodName : "testHasMappingReturnsTrueForParentMapping"});
	}
	,testHasMappingReturnsFalseWhenMappingDoesntExist: function() {
		hex_unittest_assertion_Assert.isFalse(this.injector.hasMapping(hex_di_mock_types_Clazz),"",{ fileName : "InjectorTest.hx", lineNumber : 714, className : "hex.di.InjectorTest", methodName : "testHasMappingReturnsFalseWhenMappingDoesntExist"});
	}
	,testHasDirectMappingReturnsFalseForParentMapping: function() {
		this.injector.map(hex_di_mock_types_Clazz).toValue(new hex_di_mock_types_Clazz());
		var childInjector = this.injector.createChildInjector();
		hex_unittest_assertion_Assert.isFalse(childInjector.hasDirectMapping(hex_di_mock_types_Clazz),"",{ fileName : "InjectorTest.hx", lineNumber : 722, className : "hex.di.InjectorTest", methodName : "testHasDirectMappingReturnsFalseForParentMapping"});
	}
	,hasMappingReturnsTrueForTypeLocalMapping: function() {
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		hex_unittest_assertion_Assert.isTrue(this.injector.hasMapping(hex_di_mock_types_Clazz),"",{ fileName : "InjectorTest.hx", lineNumber : 730, className : "hex.di.InjectorTest", methodName : "hasMappingReturnsTrueForTypeLocalMapping"});
	}
	,hasMappingReturnsTrueForValueLocalMapping: function() {
		this.injector.map(hex_di_mock_types_Clazz).toValue(new hex_di_mock_types_Clazz());
		hex_unittest_assertion_Assert.isTrue(this.injector.hasMapping(hex_di_mock_types_Clazz),"",{ fileName : "InjectorTest.hx", lineNumber : 737, className : "hex.di.InjectorTest", methodName : "hasMappingReturnsTrueForValueLocalMapping"});
	}
	,hasDirectMappingReturnsTrueForLocalMapping: function() {
		this.injector.map(hex_di_mock_types_Clazz).toValue(new hex_di_mock_types_Clazz());
		hex_unittest_assertion_Assert.isTrue(this.injector.hasDirectMapping(hex_di_mock_types_Clazz),"",{ fileName : "InjectorTest.hx", lineNumber : 744, className : "hex.di.InjectorTest", methodName : "hasDirectMappingReturnsTrueForLocalMapping"});
	}
	,testGetOrCreateNewInstanceProvidesMappedValue: function() {
		this.injector.map(hex_di_mock_types_Clazz).asSingleton();
		var instance1 = this.injector.getOrCreateNewInstance(hex_di_mock_types_Clazz);
		var instance2 = this.injector.getOrCreateNewInstance(hex_di_mock_types_Clazz);
		hex_unittest_assertion_Assert.equals(instance1,instance2,"",{ fileName : "InjectorTest.hx", lineNumber : 753, className : "hex.di.InjectorTest", methodName : "testGetOrCreateNewInstanceProvidesMappedValue"});
	}
	,testGetOrCreateNewInstanceInstantiatesWhenNoMappingWasFound: function() {
		var instance1 = this.injector.getOrCreateNewInstance(hex_di_mock_types_Clazz);
		hex_unittest_assertion_Assert.isInstanceOf(instance1,hex_di_mock_types_Clazz,"",{ fileName : "InjectorTest.hx", lineNumber : 760, className : "hex.di.InjectorTest", methodName : "testGetOrCreateNewInstanceInstantiatesWhenNoMappingWasFound"});
	}
	,testGetOrCreateNewInstanceInstantiatesEachTimeWhenNoMappingWasFound: function() {
		var instance1 = this.injector.getOrCreateNewInstance(hex_di_mock_types_Clazz);
		var instance2 = this.injector.getOrCreateNewInstance(hex_di_mock_types_Clazz);
		hex_unittest_assertion_Assert.notEquals(instance1,instance2,"",{ fileName : "InjectorTest.hx", lineNumber : 768, className : "hex.di.InjectorTest", methodName : "testGetOrCreateNewInstanceInstantiatesEachTimeWhenNoMappingWasFound"});
	}
	,testTwoParamConstructorInjectionWithConstructorInjectedDependencies: function() {
		this.injector.map(hex_di_mock_types_Clazz).toType(hex_di_mock_types_Clazz);
		this.injector.map(hex_di_mock_injectees_OneParameterConstructorInjectee).toType(hex_di_mock_injectees_OneParameterConstructorInjectee);
		this.injector.map(hex_di_mock_injectees_TwoParametersConstructorInjectee).toType(hex_di_mock_injectees_TwoParametersConstructorInjectee);
		this.injector.map(String).toValue("stringDependency");
		var injectee = this.injector.instantiateUnmapped(hex_di_mock_injectees_TwoParametersConstructorInjecteeWithConstructorInjectedDependencies);
		hex_unittest_assertion_Assert.isNotNull("Instance of Class should have been injected for OneParameterConstructorInjectee parameter",injectee.getDependency1(),{ fileName : "InjectorTest.hx", lineNumber : 780, className : "hex.di.InjectorTest", methodName : "testTwoParamConstructorInjectionWithConstructorInjectedDependencies"});
		hex_unittest_assertion_Assert.isNotNull("Instance of Class should have been injected for TwoParametersConstructorInjectee parameter",injectee.getDependency2(),{ fileName : "InjectorTest.hx", lineNumber : 781, className : "hex.di.InjectorTest", methodName : "testTwoParamConstructorInjectionWithConstructorInjectedDependencies"});
	}
	,__class__: hex_di_InjectorTest
};
var hex_di_annotation_IAnnotationDataProvider = function() { };
$hxClasses["hex.di.annotation.IAnnotationDataProvider"] = hex_di_annotation_IAnnotationDataProvider;
hex_di_annotation_IAnnotationDataProvider.__name__ = ["hex","di","annotation","IAnnotationDataProvider"];
hex_di_annotation_IAnnotationDataProvider.prototype = {
	getClassAnnotationData: null
	,__class__: hex_di_annotation_IAnnotationDataProvider
};
var hex_di_annotation_AnnotationDataProvider = function(type) {
	this._metadataName = Type.getClassName(type);
	this._annotatedClasses = new hex_collection_HashMap();
};
$hxClasses["hex.di.annotation.AnnotationDataProvider"] = hex_di_annotation_AnnotationDataProvider;
hex_di_annotation_AnnotationDataProvider.__name__ = ["hex","di","annotation","AnnotationDataProvider"];
hex_di_annotation_AnnotationDataProvider.__interfaces__ = [hex_di_annotation_IAnnotationDataProvider];
hex_di_annotation_AnnotationDataProvider.prototype = {
	_metadataName: null
	,_annotatedClasses: null
	,getClassAnnotationData: function(type) {
		if(this._annotatedClasses.containsKey(type)) return this._annotatedClasses.get(type); else return this._getClassAnnotationData(type);
	}
	,_getClassAnnotationData: function(type) {
		var meta = Reflect.field(haxe_rtti_Meta.getType(type),this._metadataName);
		if(meta != null) {
			var classAnnotationData = JSON.parse(meta);
			this._annotatedClasses.put(type,classAnnotationData);
			return JSON.parse(meta);
		} else return null;
	}
	,__class__: hex_di_annotation_AnnotationDataProvider
};
var hex_di_annotation_AnnotationReaderTest = function() { };
$hxClasses["hex.di.annotation.AnnotationReaderTest"] = hex_di_annotation_AnnotationReaderTest;
hex_di_annotation_AnnotationReaderTest.__name__ = ["hex","di","annotation","AnnotationReaderTest"];
hex_di_annotation_AnnotationReaderTest.beforeClass = function() {
	hex_di_annotation_AnnotationReaderTest._annotationProvider = new hex_di_annotation_AnnotationDataProvider(hex_di_IInjectorContainer);
};
hex_di_annotation_AnnotationReaderTest.afterClass = function() {
	hex_di_annotation_AnnotationReaderTest._annotationProvider = null;
};
hex_di_annotation_AnnotationReaderTest.prototype = {
	testGetAnnotationDataWithClassName: function() {
		hex_unittest_assertion_Assert.isNotNull(hex_di_annotation_AnnotationReaderTest._annotationProvider,"annotation data map shouldn't be null",{ fileName : "AnnotationReaderTest.hx", lineNumber : 31, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetAnnotationDataWithClassName"});
		hex_unittest_assertion_Assert.isNotNull(hex_di_annotation_AnnotationReaderTest._annotationProvider.getClassAnnotationData(hex_di_annotation_mock_MockInjectorContainer),"'MockInjectorContainer' class should be referenced",{ fileName : "AnnotationReaderTest.hx", lineNumber : 32, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetAnnotationDataWithClassName"});
		var data = hex_di_annotation_AnnotationReaderTest._annotationProvider.getClassAnnotationData(hex_di_annotation_mock_MockInjectorContainer);
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_di_annotation_mock_MockInjectorContainer),data.name,"class name should be the same",{ fileName : "AnnotationReaderTest.hx", lineNumber : 35, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetAnnotationDataWithClassName"});
	}
	,testGetPropertyAnnotation: function() {
		var data = hex_di_annotation_AnnotationReaderTest._annotationProvider.getClassAnnotationData(hex_di_annotation_mock_MockInjectorContainer);
		var property0 = data.props[0];
		hex_unittest_assertion_Assert.isFalse(property0.isOpt,"'isOpt' should equal false",{ fileName : "AnnotationReaderTest.hx", lineNumber : 44, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetPropertyAnnotation"});
		hex_unittest_assertion_Assert.equals("property0",property0.name,"name should be 'property0'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 45, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetPropertyAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_log_ILogger),property0.type,"type should be 'ILogger'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 46, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetPropertyAnnotation"});
		hex_unittest_assertion_Assert.equals("name0",property0.key,"key should be 'name0'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 47, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetPropertyAnnotation"});
		var property1 = data.props[1];
		hex_unittest_assertion_Assert.isFalse(property1.isOpt,"'isOpt' should equal false",{ fileName : "AnnotationReaderTest.hx", lineNumber : 50, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetPropertyAnnotation"});
		hex_unittest_assertion_Assert.equals("property1",property1.name,"name should be 'property1'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 51, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetPropertyAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_domain_Domain),property1.type,"type should be 'Domain'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 52, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetPropertyAnnotation"});
		hex_unittest_assertion_Assert.equals("",property1.key,"key should be empty String",{ fileName : "AnnotationReaderTest.hx", lineNumber : 53, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetPropertyAnnotation"});
		var property2 = data.props[2];
		hex_unittest_assertion_Assert.isTrue(property2.isOpt,"'isOpt' should equal true",{ fileName : "AnnotationReaderTest.hx", lineNumber : 56, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetPropertyAnnotation"});
		hex_unittest_assertion_Assert.equals("property2",property2.name,"name should be 'property2'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 57, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetPropertyAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(String),property2.type,"type should be 'String'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 58, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetPropertyAnnotation"});
		hex_unittest_assertion_Assert.equals("name2",property2.key,"key should be 'name2'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 59, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetPropertyAnnotation"});
	}
	,testGetConstructorAnnotation: function() {
		var data = hex_di_annotation_AnnotationReaderTest._annotationProvider.getClassAnnotationData(hex_di_annotation_mock_MockInjectorContainer);
		hex_unittest_assertion_Assert.equals("new",data.ctor.name,"constructor's name should be 'new'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 66, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
		hex_unittest_assertion_Assert.isFalse(data.ctor.isPost,"constructor can't be set to post constructor",{ fileName : "AnnotationReaderTest.hx", lineNumber : 67, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
		hex_unittest_assertion_Assert.isFalse(data.ctor.isPre,"constructor can't be set to pre destroy",{ fileName : "AnnotationReaderTest.hx", lineNumber : 68, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
		hex_unittest_assertion_Assert.equals(0,data.ctor.order,"constructor order should always equal zero",{ fileName : "AnnotationReaderTest.hx", lineNumber : 69, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
		var arg0 = data.ctor.args[0];
		hex_unittest_assertion_Assert.isFalse(arg0.isOpt,"'isOpt' should equal false",{ fileName : "AnnotationReaderTest.hx", lineNumber : 72, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_log_ILogger),arg0.type,"type should be 'ILogger'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 73, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
		hex_unittest_assertion_Assert.equals("name0",arg0.key,"key should be 'name0'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 74, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
		var arg1 = data.ctor.args[1];
		hex_unittest_assertion_Assert.isFalse(arg1.isOpt,"'isOpt' should equal false",{ fileName : "AnnotationReaderTest.hx", lineNumber : 77, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_domain_Domain),arg1.type,"type should be 'Domain'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 78, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
		hex_unittest_assertion_Assert.equals("",arg1.key,"key should be empty String",{ fileName : "AnnotationReaderTest.hx", lineNumber : 79, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
		var arg2 = data.ctor.args[2];
		hex_unittest_assertion_Assert.isTrue(arg2.isOpt,"'isOpt' should equal true",{ fileName : "AnnotationReaderTest.hx", lineNumber : 82, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(String),arg2.type,"type should be 'String'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 83, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
		hex_unittest_assertion_Assert.equals("name2",arg2.key,"key should be 'name2'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 84, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetConstructorAnnotation"});
	}
	,testGetMethodAnnotation: function() {
		var data = hex_di_annotation_AnnotationReaderTest._annotationProvider.getClassAnnotationData(hex_di_annotation_mock_MockInjectorContainer);
		var method0 = data.methods[0];
		hex_unittest_assertion_Assert.equals("beforeInit",method0.name,"method name should be the same",{ fileName : "AnnotationReaderTest.hx", lineNumber : 94, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isTrue(method0.isPost,"method should be a post constructor one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 95, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isFalse(method0.isPre,"method should not be a pre destroy one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 96, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(2,method0.order,"method execution order should equal 2",{ fileName : "AnnotationReaderTest.hx", lineNumber : 97, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(0,method0.args.length,"method args length should equal 0",{ fileName : "AnnotationReaderTest.hx", lineNumber : 98, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		var method1 = data.methods[1];
		hex_unittest_assertion_Assert.equals("preInit",method1.name,"method name should be the same",{ fileName : "AnnotationReaderTest.hx", lineNumber : 102, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isTrue(method1.isPost,"method should be a post constructor",{ fileName : "AnnotationReaderTest.hx", lineNumber : 103, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isFalse(method1.isPre,"method should not be a pre destroy one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 104, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(0,method1.order,"method execution order should equal 0",{ fileName : "AnnotationReaderTest.hx", lineNumber : 105, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(1,method1.args.length,"method args length should equal 1",{ fileName : "AnnotationReaderTest.hx", lineNumber : 106, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		var arg0 = method1.args[0];
		hex_unittest_assertion_Assert.isFalse(arg0.isOpt,"'isOpt' should equal false",{ fileName : "AnnotationReaderTest.hx", lineNumber : 109, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_domain_Domain),arg0.type,"type should be 'Domain'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 110, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals("",arg0.key,"key should be empty String",{ fileName : "AnnotationReaderTest.hx", lineNumber : 111, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		var method2 = data.methods[2];
		hex_unittest_assertion_Assert.equals("init",method2.name,"method name should be the same",{ fileName : "AnnotationReaderTest.hx", lineNumber : 115, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isTrue(method2.isPost,"method should be a post constructor",{ fileName : "AnnotationReaderTest.hx", lineNumber : 116, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isFalse(method2.isPre,"method should not be a pre destroy one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 117, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(1,method2.order,"method execution order should equal 1",{ fileName : "AnnotationReaderTest.hx", lineNumber : 118, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(3,method2.args.length,"method args length should equal 3",{ fileName : "AnnotationReaderTest.hx", lineNumber : 119, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		arg0 = method2.args[0];
		hex_unittest_assertion_Assert.isFalse(arg0.isOpt,"'isOpt' should equal false",{ fileName : "AnnotationReaderTest.hx", lineNumber : 122, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_log_ILogger),arg0.type,"type should be 'ILogger'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 123, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals("name0",arg0.key,"key should be 'name0'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 124, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		var arg1 = method2.args[1];
		hex_unittest_assertion_Assert.isFalse(arg1.isOpt,"'isOpt' should equal false",{ fileName : "AnnotationReaderTest.hx", lineNumber : 127, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_domain_Domain),arg1.type,"type should be 'Domain'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 128, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals("",arg1.key,"key should be empty String",{ fileName : "AnnotationReaderTest.hx", lineNumber : 129, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		var arg2 = method2.args[2];
		hex_unittest_assertion_Assert.isTrue(arg2.isOpt,"'isOpt' should equal true",{ fileName : "AnnotationReaderTest.hx", lineNumber : 132, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(String),arg2.type,"type should be 'String'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 133, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals("name2",arg2.key,"key should be 'name2'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 134, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		var method3 = data.methods[3];
		hex_unittest_assertion_Assert.equals("setLogger",method3.name,"method name should be the same",{ fileName : "AnnotationReaderTest.hx", lineNumber : 138, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isFalse(method3.isPre,"method should not be a pre destroy one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 139, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isFalse(method3.isPost,"method should not be a post constructor",{ fileName : "AnnotationReaderTest.hx", lineNumber : 140, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(0,method3.order,"method execution order should equal 0",{ fileName : "AnnotationReaderTest.hx", lineNumber : 141, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(1,method3.args.length,"method args length should equal 1",{ fileName : "AnnotationReaderTest.hx", lineNumber : 142, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		arg0 = method3.args[0];
		hex_unittest_assertion_Assert.isFalse(arg0.isOpt,"'isOpt' should equal false",{ fileName : "AnnotationReaderTest.hx", lineNumber : 145, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_log_ILogger),arg0.type,"type should be 'ILogger'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 146, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals("",arg0.key,"key should be empty String",{ fileName : "AnnotationReaderTest.hx", lineNumber : 147, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		var method4 = data.methods[4];
		hex_unittest_assertion_Assert.equals("setDomain",method4.name,"method name should be the same",{ fileName : "AnnotationReaderTest.hx", lineNumber : 151, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isFalse(method4.isPost,"method should not be a post constructor",{ fileName : "AnnotationReaderTest.hx", lineNumber : 152, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isFalse(method4.isPre,"method should not be a pre destroy one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 153, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(0,method4.order,"method execution order should equal 0",{ fileName : "AnnotationReaderTest.hx", lineNumber : 154, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(1,method4.args.length,"method args length should equal 1",{ fileName : "AnnotationReaderTest.hx", lineNumber : 155, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		arg0 = method4.args[0];
		hex_unittest_assertion_Assert.isFalse(arg0.isOpt,"'isOpt' should equal false",{ fileName : "AnnotationReaderTest.hx", lineNumber : 158, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_domain_Domain),arg0.type,"type should be 'domain'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 159, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals("name",arg0.key,"key should equal 'name'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 160, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		var method5 = data.methods[5];
		hex_unittest_assertion_Assert.equals("beforeDestroy",method5.name,"method name should be the same",{ fileName : "AnnotationReaderTest.hx", lineNumber : 164, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isFalse(method5.isPost,"method should not be a post constructor one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 165, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isTrue(method5.isPre,"method should be a pre destroy one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 166, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(2,method5.order,"method execution order should equal 2",{ fileName : "AnnotationReaderTest.hx", lineNumber : 167, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(0,method5.args.length,"method args length should equal 0",{ fileName : "AnnotationReaderTest.hx", lineNumber : 168, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		var method6 = data.methods[6];
		hex_unittest_assertion_Assert.equals("preDestroy",method6.name,"method name should be the same",{ fileName : "AnnotationReaderTest.hx", lineNumber : 172, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isFalse(method5.isPost,"method should not be a post constructor one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 173, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isTrue(method5.isPre,"method should be a pre destroy one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 174, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(1,method6.order,"method execution order should equal 1",{ fileName : "AnnotationReaderTest.hx", lineNumber : 175, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(1,method6.args.length,"method args length should equal 1",{ fileName : "AnnotationReaderTest.hx", lineNumber : 176, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		arg0 = method6.args[0];
		hex_unittest_assertion_Assert.isFalse(arg0.isOpt,"'isOpt' should equal false",{ fileName : "AnnotationReaderTest.hx", lineNumber : 179, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_domain_Domain),arg0.type,"type should be 'Domain'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 180, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals("",arg0.key,"key should be empty String",{ fileName : "AnnotationReaderTest.hx", lineNumber : 181, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		var method7 = data.methods[7];
		hex_unittest_assertion_Assert.equals("destroy",method7.name,"method name should be the same",{ fileName : "AnnotationReaderTest.hx", lineNumber : 185, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isFalse(method5.isPost,"method should not be a post constructor one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 186, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isTrue(method5.isPre,"method should be a pre destroy one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 187, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(0,method7.order,"method execution order should equal 0",{ fileName : "AnnotationReaderTest.hx", lineNumber : 188, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(3,method7.args.length,"method args length should equal 3",{ fileName : "AnnotationReaderTest.hx", lineNumber : 189, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		arg0 = method7.args[0];
		hex_unittest_assertion_Assert.isFalse(arg0.isOpt,"'isOpt' should equal false",{ fileName : "AnnotationReaderTest.hx", lineNumber : 192, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_log_ILogger),arg0.type,"type should be 'ILogger'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 193, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals("name0",arg0.key,"key should be 'name0'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 194, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		arg1 = method7.args[1];
		hex_unittest_assertion_Assert.isFalse(arg1.isOpt,"'isOpt' should equal false",{ fileName : "AnnotationReaderTest.hx", lineNumber : 197, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(hex_domain_Domain),arg1.type,"type should be 'Domain'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 198, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals("",arg1.key,"key should be empty String",{ fileName : "AnnotationReaderTest.hx", lineNumber : 199, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		arg2 = method7.args[2];
		hex_unittest_assertion_Assert.isTrue(arg2.isOpt,"'isOpt' should equal true",{ fileName : "AnnotationReaderTest.hx", lineNumber : 202, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(Type.getClassName(String),arg2.type,"type should be 'String'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 203, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals("name2",arg2.key,"key should be 'name2'",{ fileName : "AnnotationReaderTest.hx", lineNumber : 204, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		var method8 = data.methods[8];
		hex_unittest_assertion_Assert.equals("testDestroy",method8.name,"method name should be the same",{ fileName : "AnnotationReaderTest.hx", lineNumber : 208, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isFalse(method8.isPost,"method should not be a post constructor one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 209, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isTrue(method8.isPre,"method should be a pre destroy one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 210, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(0,method8.order,"method execution order should equal 0",{ fileName : "AnnotationReaderTest.hx", lineNumber : 211, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(0,method8.args.length,"method args length should equal 0",{ fileName : "AnnotationReaderTest.hx", lineNumber : 212, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		var method9 = data.methods[9];
		hex_unittest_assertion_Assert.equals("testConstruct",method9.name,"method name should be the same",{ fileName : "AnnotationReaderTest.hx", lineNumber : 216, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isTrue(method9.isPost,"method should be a post constructor one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 217, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.isFalse(method9.isPre,"method should not be a pre destroy one",{ fileName : "AnnotationReaderTest.hx", lineNumber : 218, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(0,method9.order,"method execution order should equal 0",{ fileName : "AnnotationReaderTest.hx", lineNumber : 219, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
		hex_unittest_assertion_Assert.equals(0,method9.args.length,"method args length should equal 0",{ fileName : "AnnotationReaderTest.hx", lineNumber : 220, className : "hex.di.annotation.AnnotationReaderTest", methodName : "testGetMethodAnnotation"});
	}
	,__class__: hex_di_annotation_AnnotationReaderTest
};
var hex_di_annotation_AnnotationSuite = function() {
	this.list = [hex_di_annotation_AnnotationReaderTest];
};
$hxClasses["hex.di.annotation.AnnotationSuite"] = hex_di_annotation_AnnotationSuite;
hex_di_annotation_AnnotationSuite.__name__ = ["hex","di","annotation","AnnotationSuite"];
hex_di_annotation_AnnotationSuite.prototype = {
	list: null
	,__class__: hex_di_annotation_AnnotationSuite
};
var hex_di_annotation_mock_MockInjectorContainer = function(a0,a1,a2) {
	if(a2 == null) a2 = "hello";
};
$hxClasses["hex.di.annotation.mock.MockInjectorContainer"] = hex_di_annotation_mock_MockInjectorContainer;
hex_di_annotation_mock_MockInjectorContainer.__name__ = ["hex","di","annotation","mock","MockInjectorContainer"];
hex_di_annotation_mock_MockInjectorContainer.prototype = {
	property0: null
	,property1: null
	,property2: null
	,beforeInit: function() {
	}
	,preInit: function(domain) {
	}
	,init: function(a0,a1,a2) {
		if(a2 == null) a2 = "hello";
	}
	,setLogger: function(logger) {
	}
	,setDomain: function(logger) {
	}
	,beforeDestroy: function() {
	}
	,preDestroy: function(domain) {
	}
	,destroy: function(a0,a1,a2) {
		if(a2 == null) a2 = "hello";
	}
	,testDestroy: function() {
	}
	,testConstruct: function() {
	}
	,__class__: hex_di_annotation_mock_MockInjectorContainer
};
var hex_di_error_InjectorException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.di.error.InjectorException"] = hex_di_error_InjectorException;
hex_di_error_InjectorException.__name__ = ["hex","di","error","InjectorException"];
hex_di_error_InjectorException.__super__ = hex_error_Exception;
hex_di_error_InjectorException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_di_error_InjectorException
});
var hex_di_error_MissingMappingException = function(message,posInfos) {
	hex_di_error_InjectorException.call(this,message,posInfos);
};
$hxClasses["hex.di.error.MissingMappingException"] = hex_di_error_MissingMappingException;
hex_di_error_MissingMappingException.__name__ = ["hex","di","error","MissingMappingException"];
hex_di_error_MissingMappingException.__super__ = hex_di_error_InjectorException;
hex_di_error_MissingMappingException.prototype = $extend(hex_di_error_InjectorException.prototype,{
	__class__: hex_di_error_MissingMappingException
});
var hex_di_mapping_InjectionMapping = function(injector,type,name,mappingID) {
	this._injector = injector;
	this._type = type;
	this._name = name;
	this._mappingID = mappingID;
};
$hxClasses["hex.di.mapping.InjectionMapping"] = hex_di_mapping_InjectionMapping;
hex_di_mapping_InjectionMapping.__name__ = ["hex","di","mapping","InjectionMapping"];
hex_di_mapping_InjectionMapping.prototype = {
	_injector: null
	,_type: null
	,_name: null
	,_mappingID: null
	,provider: null
	,getResult: function() {
		if(this.provider != null) return this.provider.getResult(this._injector);
		throw new js__$Boot_HaxeError(new hex_error_NullPointerException("can't retrieve result, mapping with id '" + this._mappingID + "' has no provider",{ fileName : "InjectionMapping.hx", lineNumber : 37, className : "hex.di.mapping.InjectionMapping", methodName : "getResult"}));
	}
	,asSingleton: function() {
		return this.toSingleton(this._type);
	}
	,toSingleton: function(type) {
		return this._toProvider(new hex_di_provider_SingletonProvider(type,this._injector));
	}
	,toType: function(type) {
		return this._toProvider(new hex_di_provider_ClassProvider(type));
	}
	,toValue: function(value) {
		return this._toProvider(new hex_di_provider_ValueProvider(value,this._injector));
	}
	,_toProvider: function(provider) {
		if(this.provider != null) haxe_Log.trace("Warning: Injector already has a mapping for " + this._mappingID + ".\n " + "If you have overridden this mapping intentionally you can use " + "\"injector.unmap()\" prior to your replacement mapping in order to " + "avoid seeing this message.",{ fileName : "InjectionMapping.hx", lineNumber : 64, className : "hex.di.mapping.InjectionMapping", methodName : "_toProvider"});
		this.provider = provider;
		return this;
	}
	,__class__: hex_di_mapping_InjectionMapping
};
var hex_di_mock_injectees_ClassInjectee = function() {
	this.someProperty = false;
};
$hxClasses["hex.di.mock.injectees.ClassInjectee"] = hex_di_mock_injectees_ClassInjectee;
hex_di_mock_injectees_ClassInjectee.__name__ = ["hex","di","mock","injectees","ClassInjectee"];
hex_di_mock_injectees_ClassInjectee.prototype = {
	property: null
	,someProperty: null
	,doSomeStuff: function() {
		this.someProperty = true;
	}
	,__class__: hex_di_mock_injectees_ClassInjectee
};
var hex_di_mock_injectees_ComplexClassInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.ComplexClassInjectee"] = hex_di_mock_injectees_ComplexClassInjectee;
hex_di_mock_injectees_ComplexClassInjectee.__name__ = ["hex","di","mock","injectees","ComplexClassInjectee"];
hex_di_mock_injectees_ComplexClassInjectee.prototype = {
	property: null
	,__class__: hex_di_mock_injectees_ComplexClassInjectee
};
var hex_di_mock_injectees_InjectorInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.InjectorInjectee"] = hex_di_mock_injectees_InjectorInjectee;
hex_di_mock_injectees_InjectorInjectee.__name__ = ["hex","di","mock","injectees","InjectorInjectee"];
hex_di_mock_injectees_InjectorInjectee.prototype = {
	injector: null
	,__class__: hex_di_mock_injectees_InjectorInjectee
};
var hex_di_mock_injectees_InterfaceInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.InterfaceInjectee"] = hex_di_mock_injectees_InterfaceInjectee;
hex_di_mock_injectees_InterfaceInjectee.__name__ = ["hex","di","mock","injectees","InterfaceInjectee"];
hex_di_mock_injectees_InterfaceInjectee.prototype = {
	property: null
	,__class__: hex_di_mock_injectees_InterfaceInjectee
};
var hex_di_mock_injectees_MixedParametersConstructorInjectee = function(dependency,dependency2,dependency3) {
	this.m_dependency = dependency;
	this.m_dependency2 = dependency2;
	this.m_dependency3 = dependency3;
};
$hxClasses["hex.di.mock.injectees.MixedParametersConstructorInjectee"] = hex_di_mock_injectees_MixedParametersConstructorInjectee;
hex_di_mock_injectees_MixedParametersConstructorInjectee.__name__ = ["hex","di","mock","injectees","MixedParametersConstructorInjectee"];
hex_di_mock_injectees_MixedParametersConstructorInjectee.prototype = {
	m_dependency: null
	,m_dependency2: null
	,m_dependency3: null
	,getDependency: function() {
		return this.m_dependency;
	}
	,getDependency2: function() {
		return this.m_dependency2;
	}
	,getDependency3: function() {
		return this.m_dependency3;
	}
	,__class__: hex_di_mock_injectees_MixedParametersConstructorInjectee
};
var hex_di_mock_injectees_MixedParametersMethodInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.MixedParametersMethodInjectee"] = hex_di_mock_injectees_MixedParametersMethodInjectee;
hex_di_mock_injectees_MixedParametersMethodInjectee.__name__ = ["hex","di","mock","injectees","MixedParametersMethodInjectee"];
hex_di_mock_injectees_MixedParametersMethodInjectee.prototype = {
	m_dependency: null
	,m_dependency2: null
	,m_dependency3: null
	,setDependencies: function(dependency,dependency2,dependency3) {
		this.m_dependency = dependency;
		this.m_dependency2 = dependency2;
		this.m_dependency3 = dependency3;
	}
	,getDependency: function() {
		return this.m_dependency;
	}
	,getDependency2: function() {
		return this.m_dependency2;
	}
	,getDependency3: function() {
		return this.m_dependency3;
	}
	,__class__: hex_di_mock_injectees_MixedParametersMethodInjectee
};
var hex_di_mock_injectees_MultipleSingletonsOfSameClassInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.MultipleSingletonsOfSameClassInjectee"] = hex_di_mock_injectees_MultipleSingletonsOfSameClassInjectee;
hex_di_mock_injectees_MultipleSingletonsOfSameClassInjectee.__name__ = ["hex","di","mock","injectees","MultipleSingletonsOfSameClassInjectee"];
hex_di_mock_injectees_MultipleSingletonsOfSameClassInjectee.prototype = {
	property1: null
	,property2: null
	,__class__: hex_di_mock_injectees_MultipleSingletonsOfSameClassInjectee
};
var hex_di_mock_injectees_NamedArrayCollectionInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.NamedArrayCollectionInjectee"] = hex_di_mock_injectees_NamedArrayCollectionInjectee;
hex_di_mock_injectees_NamedArrayCollectionInjectee.__name__ = ["hex","di","mock","injectees","NamedArrayCollectionInjectee"];
hex_di_mock_injectees_NamedArrayCollectionInjectee.prototype = {
	ac: null
	,__class__: hex_di_mock_injectees_NamedArrayCollectionInjectee
};
var hex_di_mock_injectees_NamedClassInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.NamedClassInjectee"] = hex_di_mock_injectees_NamedClassInjectee;
hex_di_mock_injectees_NamedClassInjectee.__name__ = ["hex","di","mock","injectees","NamedClassInjectee"];
hex_di_mock_injectees_NamedClassInjectee.prototype = {
	property: null
	,__class__: hex_di_mock_injectees_NamedClassInjectee
};
var hex_di_mock_injectees_NamedInterfaceInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.NamedInterfaceInjectee"] = hex_di_mock_injectees_NamedInterfaceInjectee;
hex_di_mock_injectees_NamedInterfaceInjectee.__name__ = ["hex","di","mock","injectees","NamedInterfaceInjectee"];
hex_di_mock_injectees_NamedInterfaceInjectee.prototype = {
	property: null
	,__class__: hex_di_mock_injectees_NamedInterfaceInjectee
};
var hex_di_mock_injectees_OneNamedParameterConstructorInjectee = function(dependency) {
	this.m_dependency = dependency;
};
$hxClasses["hex.di.mock.injectees.OneNamedParameterConstructorInjectee"] = hex_di_mock_injectees_OneNamedParameterConstructorInjectee;
hex_di_mock_injectees_OneNamedParameterConstructorInjectee.__name__ = ["hex","di","mock","injectees","OneNamedParameterConstructorInjectee"];
hex_di_mock_injectees_OneNamedParameterConstructorInjectee.prototype = {
	m_dependency: null
	,getDependency: function() {
		return this.m_dependency;
	}
	,__class__: hex_di_mock_injectees_OneNamedParameterConstructorInjectee
};
var hex_di_mock_injectees_OneNamedParameterMethodInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.OneNamedParameterMethodInjectee"] = hex_di_mock_injectees_OneNamedParameterMethodInjectee;
hex_di_mock_injectees_OneNamedParameterMethodInjectee.__name__ = ["hex","di","mock","injectees","OneNamedParameterMethodInjectee"];
hex_di_mock_injectees_OneNamedParameterMethodInjectee.prototype = {
	m_dependency: null
	,setDependency: function(dependency) {
		this.m_dependency = dependency;
	}
	,getDependency: function() {
		return this.m_dependency;
	}
	,__class__: hex_di_mock_injectees_OneNamedParameterMethodInjectee
};
var hex_di_mock_injectees_OneParameterConstructorInjectee = function(dependency) {
	this.m_dependency = dependency;
};
$hxClasses["hex.di.mock.injectees.OneParameterConstructorInjectee"] = hex_di_mock_injectees_OneParameterConstructorInjectee;
hex_di_mock_injectees_OneParameterConstructorInjectee.__name__ = ["hex","di","mock","injectees","OneParameterConstructorInjectee"];
hex_di_mock_injectees_OneParameterConstructorInjectee.prototype = {
	m_dependency: null
	,getDependency: function() {
		return this.m_dependency;
	}
	,__class__: hex_di_mock_injectees_OneParameterConstructorInjectee
};
var hex_di_mock_injectees_OneParameterMethodInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.OneParameterMethodInjectee"] = hex_di_mock_injectees_OneParameterMethodInjectee;
hex_di_mock_injectees_OneParameterMethodInjectee.__name__ = ["hex","di","mock","injectees","OneParameterMethodInjectee"];
hex_di_mock_injectees_OneParameterMethodInjectee.prototype = {
	m_dependency: null
	,setDependency: function(dependency) {
		this.m_dependency = dependency;
	}
	,getDependency: function() {
		return this.m_dependency;
	}
	,__class__: hex_di_mock_injectees_OneParameterMethodInjectee
};
var hex_di_mock_injectees_OptionalClassInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.OptionalClassInjectee"] = hex_di_mock_injectees_OptionalClassInjectee;
hex_di_mock_injectees_OptionalClassInjectee.__name__ = ["hex","di","mock","injectees","OptionalClassInjectee"];
hex_di_mock_injectees_OptionalClassInjectee.prototype = {
	property: null
	,__class__: hex_di_mock_injectees_OptionalClassInjectee
};
var hex_di_mock_injectees_OptionalOneRequiredParameterMethodInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.OptionalOneRequiredParameterMethodInjectee"] = hex_di_mock_injectees_OptionalOneRequiredParameterMethodInjectee;
hex_di_mock_injectees_OptionalOneRequiredParameterMethodInjectee.__name__ = ["hex","di","mock","injectees","OptionalOneRequiredParameterMethodInjectee"];
hex_di_mock_injectees_OptionalOneRequiredParameterMethodInjectee.prototype = {
	m_dependency: null
	,setDependency: function(dependency) {
		this.m_dependency = dependency;
	}
	,getDependency: function() {
		return this.m_dependency;
	}
	,__class__: hex_di_mock_injectees_OptionalOneRequiredParameterMethodInjectee
};
var hex_di_mock_injectees_OrderedPostConstructInjectee = function() {
	this.loadOrder = [];
};
$hxClasses["hex.di.mock.injectees.OrderedPostConstructInjectee"] = hex_di_mock_injectees_OrderedPostConstructInjectee;
hex_di_mock_injectees_OrderedPostConstructInjectee.__name__ = ["hex","di","mock","injectees","OrderedPostConstructInjectee"];
hex_di_mock_injectees_OrderedPostConstructInjectee.prototype = {
	loadOrder: null
	,methodTwo: function() {
		this.loadOrder.push(2);
	}
	,methodFour: function() {
		this.loadOrder.push(4);
	}
	,methodThree: function() {
		this.loadOrder.push(3);
	}
	,methodOne: function() {
		this.loadOrder.push(1);
	}
	,__class__: hex_di_mock_injectees_OrderedPostConstructInjectee
};
var hex_di_mock_injectees_PostConstructWithArgInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.PostConstructWithArgInjectee"] = hex_di_mock_injectees_PostConstructWithArgInjectee;
hex_di_mock_injectees_PostConstructWithArgInjectee.__name__ = ["hex","di","mock","injectees","PostConstructWithArgInjectee"];
hex_di_mock_injectees_PostConstructWithArgInjectee.prototype = {
	property: null
	,doSomeStuff: function(arg) {
		this.property = arg;
	}
	,__class__: hex_di_mock_injectees_PostConstructWithArgInjectee
};
var hex_di_mock_injectees_RecursiveInterfaceInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.RecursiveInterfaceInjectee"] = hex_di_mock_injectees_RecursiveInterfaceInjectee;
hex_di_mock_injectees_RecursiveInterfaceInjectee.__name__ = ["hex","di","mock","injectees","RecursiveInterfaceInjectee"];
hex_di_mock_injectees_RecursiveInterfaceInjectee.prototype = {
	interfaceInjectee: null
	,__class__: hex_di_mock_injectees_RecursiveInterfaceInjectee
};
var hex_di_mock_injectees_SetterInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.SetterInjectee"] = hex_di_mock_injectees_SetterInjectee;
hex_di_mock_injectees_SetterInjectee.__name__ = ["hex","di","mock","injectees","SetterInjectee"];
hex_di_mock_injectees_SetterInjectee.prototype = {
	property: null
	,get_property: function() {
		return this.property;
	}
	,set_property: function(value) {
		this.property = value;
		return value;
	}
	,__class__: hex_di_mock_injectees_SetterInjectee
	,__properties__: {set_property:"set_property",get_property:"get_property"}
};
var hex_di_mock_injectees_StringInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.StringInjectee"] = hex_di_mock_injectees_StringInjectee;
hex_di_mock_injectees_StringInjectee.__name__ = ["hex","di","mock","injectees","StringInjectee"];
hex_di_mock_injectees_StringInjectee.prototype = {
	property: null
	,__class__: hex_di_mock_injectees_StringInjectee
};
var hex_di_mock_injectees_TwoNamedInterfaceFieldsInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.TwoNamedInterfaceFieldsInjectee"] = hex_di_mock_injectees_TwoNamedInterfaceFieldsInjectee;
hex_di_mock_injectees_TwoNamedInterfaceFieldsInjectee.__name__ = ["hex","di","mock","injectees","TwoNamedInterfaceFieldsInjectee"];
hex_di_mock_injectees_TwoNamedInterfaceFieldsInjectee.prototype = {
	property1: null
	,property2: null
	,__class__: hex_di_mock_injectees_TwoNamedInterfaceFieldsInjectee
};
var hex_di_mock_injectees_TwoNamedParametersConstructorInjectee = function(dependency,dependency2) {
	this.m_dependency = dependency;
	this.m_dependency2 = dependency2;
};
$hxClasses["hex.di.mock.injectees.TwoNamedParametersConstructorInjectee"] = hex_di_mock_injectees_TwoNamedParametersConstructorInjectee;
hex_di_mock_injectees_TwoNamedParametersConstructorInjectee.__name__ = ["hex","di","mock","injectees","TwoNamedParametersConstructorInjectee"];
hex_di_mock_injectees_TwoNamedParametersConstructorInjectee.prototype = {
	m_dependency: null
	,m_dependency2: null
	,getDependency: function() {
		return this.m_dependency;
	}
	,getDependency2: function() {
		return this.m_dependency2;
	}
	,__class__: hex_di_mock_injectees_TwoNamedParametersConstructorInjectee
};
var hex_di_mock_injectees_TwoNamedParametersMethodInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.TwoNamedParametersMethodInjectee"] = hex_di_mock_injectees_TwoNamedParametersMethodInjectee;
hex_di_mock_injectees_TwoNamedParametersMethodInjectee.__name__ = ["hex","di","mock","injectees","TwoNamedParametersMethodInjectee"];
hex_di_mock_injectees_TwoNamedParametersMethodInjectee.prototype = {
	m_dependency: null
	,m_dependency2: null
	,setDependencies: function(dependency,dependency2) {
		this.m_dependency = dependency;
		this.m_dependency2 = dependency2;
	}
	,getDependency: function() {
		return this.m_dependency;
	}
	,getDependency2: function() {
		return this.m_dependency2;
	}
	,__class__: hex_di_mock_injectees_TwoNamedParametersMethodInjectee
};
var hex_di_mock_injectees_TwoParametersConstructorInjectee = function(dependency,dependency2) {
	this.m_dependency = dependency;
	this.m_dependency2 = dependency2;
};
$hxClasses["hex.di.mock.injectees.TwoParametersConstructorInjectee"] = hex_di_mock_injectees_TwoParametersConstructorInjectee;
hex_di_mock_injectees_TwoParametersConstructorInjectee.__name__ = ["hex","di","mock","injectees","TwoParametersConstructorInjectee"];
hex_di_mock_injectees_TwoParametersConstructorInjectee.prototype = {
	m_dependency: null
	,m_dependency2: null
	,getDependency: function() {
		return this.m_dependency;
	}
	,getDependency2: function() {
		return this.m_dependency2;
	}
	,__class__: hex_di_mock_injectees_TwoParametersConstructorInjectee
};
var hex_di_mock_injectees_TwoParametersConstructorInjecteeWithConstructorInjectedDependencies = function(dependency1,dependency2) {
	this.m_dependency1 = dependency1;
	this.m_dependency2 = dependency2;
};
$hxClasses["hex.di.mock.injectees.TwoParametersConstructorInjecteeWithConstructorInjectedDependencies"] = hex_di_mock_injectees_TwoParametersConstructorInjecteeWithConstructorInjectedDependencies;
hex_di_mock_injectees_TwoParametersConstructorInjecteeWithConstructorInjectedDependencies.__name__ = ["hex","di","mock","injectees","TwoParametersConstructorInjecteeWithConstructorInjectedDependencies"];
hex_di_mock_injectees_TwoParametersConstructorInjecteeWithConstructorInjectedDependencies.prototype = {
	m_dependency1: null
	,m_dependency2: null
	,getDependency1: function() {
		return this.m_dependency1;
	}
	,getDependency2: function() {
		return this.m_dependency2;
	}
	,__class__: hex_di_mock_injectees_TwoParametersConstructorInjecteeWithConstructorInjectedDependencies
};
var hex_di_mock_injectees_TwoParametersMethodInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.TwoParametersMethodInjectee"] = hex_di_mock_injectees_TwoParametersMethodInjectee;
hex_di_mock_injectees_TwoParametersMethodInjectee.__name__ = ["hex","di","mock","injectees","TwoParametersMethodInjectee"];
hex_di_mock_injectees_TwoParametersMethodInjectee.prototype = {
	m_dependency: null
	,m_dependency2: null
	,setDependencies: function(dependency,dependency2) {
		this.m_dependency = dependency;
		this.m_dependency2 = dependency2;
	}
	,getDependency: function() {
		return this.m_dependency;
	}
	,getDependency2: function() {
		return this.m_dependency2;
	}
	,__class__: hex_di_mock_injectees_TwoParametersMethodInjectee
};
var hex_di_mock_injectees_XMLInjectee = function() {
};
$hxClasses["hex.di.mock.injectees.XMLInjectee"] = hex_di_mock_injectees_XMLInjectee;
hex_di_mock_injectees_XMLInjectee.__name__ = ["hex","di","mock","injectees","XMLInjectee"];
hex_di_mock_injectees_XMLInjectee.prototype = {
	property: null
	,__class__: hex_di_mock_injectees_XMLInjectee
};
var hex_di_mock_types_Interface2 = function() { };
$hxClasses["hex.di.mock.types.Interface2"] = hex_di_mock_types_Interface2;
hex_di_mock_types_Interface2.__name__ = ["hex","di","mock","types","Interface2"];
var hex_di_mock_types_Interface = function() { };
$hxClasses["hex.di.mock.types.Interface"] = hex_di_mock_types_Interface;
hex_di_mock_types_Interface.__name__ = ["hex","di","mock","types","Interface"];
var hex_di_mock_types_Clazz = function() {
	this.preDestroyCalled = false;
};
$hxClasses["hex.di.mock.types.Clazz"] = hex_di_mock_types_Clazz;
hex_di_mock_types_Clazz.__name__ = ["hex","di","mock","types","Clazz"];
hex_di_mock_types_Clazz.__interfaces__ = [hex_di_mock_types_Interface2,hex_di_mock_types_Interface];
hex_di_mock_types_Clazz.prototype = {
	preDestroyCalled: null
	,preDestroy: function() {
		this.preDestroyCalled = true;
	}
	,__class__: hex_di_mock_types_Clazz
};
var hex_di_mock_types_Clazz2 = function() {
};
$hxClasses["hex.di.mock.types.Clazz2"] = hex_di_mock_types_Clazz2;
hex_di_mock_types_Clazz2.__name__ = ["hex","di","mock","types","Clazz2"];
hex_di_mock_types_Clazz2.__interfaces__ = [hex_di_mock_types_Interface2,hex_di_mock_types_Interface];
hex_di_mock_types_Clazz2.prototype = {
	__class__: hex_di_mock_types_Clazz2
};
var hex_di_mock_types_ComplexInterface = function() { };
$hxClasses["hex.di.mock.types.ComplexInterface"] = hex_di_mock_types_ComplexInterface;
hex_di_mock_types_ComplexInterface.__name__ = ["hex","di","mock","types","ComplexInterface"];
var hex_di_mock_types_ComplexClazz = function() {
};
$hxClasses["hex.di.mock.types.ComplexClazz"] = hex_di_mock_types_ComplexClazz;
hex_di_mock_types_ComplexClazz.__name__ = ["hex","di","mock","types","ComplexClazz"];
hex_di_mock_types_ComplexClazz.__interfaces__ = [hex_di_mock_types_ComplexInterface];
hex_di_mock_types_ComplexClazz.prototype = {
	value: null
	,__class__: hex_di_mock_types_ComplexClazz
};
var hex_di_provider_IDependencyProvider = function() { };
$hxClasses["hex.di.provider.IDependencyProvider"] = hex_di_provider_IDependencyProvider;
hex_di_provider_IDependencyProvider.__name__ = ["hex","di","provider","IDependencyProvider"];
hex_di_provider_IDependencyProvider.prototype = {
	getResult: null
	,destroy: null
	,__class__: hex_di_provider_IDependencyProvider
};
var hex_di_provider_ClassProvider = function(type) {
	this._type = type;
};
$hxClasses["hex.di.provider.ClassProvider"] = hex_di_provider_ClassProvider;
hex_di_provider_ClassProvider.__name__ = ["hex","di","provider","ClassProvider"];
hex_di_provider_ClassProvider.__interfaces__ = [hex_di_provider_IDependencyProvider];
hex_di_provider_ClassProvider.prototype = {
	_type: null
	,getResult: function(injector) {
		return injector.instantiateUnmapped(this._type);
	}
	,destroy: function() {
	}
	,__class__: hex_di_provider_ClassProvider
};
var hex_di_provider_SingletonProvider = function(type,injector) {
	this._isDestroyed = false;
	this._type = type;
	this._injector = injector;
};
$hxClasses["hex.di.provider.SingletonProvider"] = hex_di_provider_SingletonProvider;
hex_di_provider_SingletonProvider.__name__ = ["hex","di","provider","SingletonProvider"];
hex_di_provider_SingletonProvider.__interfaces__ = [hex_di_provider_IDependencyProvider];
hex_di_provider_SingletonProvider.prototype = {
	_isDestroyed: null
	,_type: null
	,_value: null
	,_injector: null
	,getResult: function(injector) {
		if(this._isDestroyed) throw new js__$Boot_HaxeError(new hex_di_error_InjectorException("Forbidden usage of unmapped singleton provider for type '" + Type.getClassName(this._value) + "'",{ fileName : "SingletonProvider.hx", lineNumber : 28, className : "hex.di.provider.SingletonProvider", methodName : "getResult"})); else if(this._value == null) this._value = this._injector.instantiateUnmapped(this._type);
		return this._value;
	}
	,destroy: function() {
		this._isDestroyed = true;
		if(this._value != null) this._injector.destroyInstance(this._value);
		this._injector = null;
		this._value = null;
	}
	,__class__: hex_di_provider_SingletonProvider
};
var hex_di_provider_ValueProvider = function(value,injector) {
	this._value = value;
	this._injector = injector;
};
$hxClasses["hex.di.provider.ValueProvider"] = hex_di_provider_ValueProvider;
hex_di_provider_ValueProvider.__name__ = ["hex","di","provider","ValueProvider"];
hex_di_provider_ValueProvider.__interfaces__ = [hex_di_provider_IDependencyProvider];
hex_di_provider_ValueProvider.prototype = {
	_value: null
	,_injector: null
	,getResult: function(injector) {
		return this._value;
	}
	,destroy: function() {
		this._injector.destroyInstance(this._value);
		this._injector = null;
		this._value = null;
	}
	,__class__: hex_di_provider_ValueProvider
};
var hex_di_reflect_ArgumentInjectionVO = function(type,injectionName,isOptional) {
	if(isOptional == null) isOptional = false;
	this.isOptional = false;
	this.type = type;
	this.injectionName = injectionName;
	this.isOptional = isOptional;
};
$hxClasses["hex.di.reflect.ArgumentInjectionVO"] = hex_di_reflect_ArgumentInjectionVO;
hex_di_reflect_ArgumentInjectionVO.__name__ = ["hex","di","reflect","ArgumentInjectionVO"];
hex_di_reflect_ArgumentInjectionVO.prototype = {
	type: null
	,injectionName: null
	,isOptional: null
	,__class__: hex_di_reflect_ArgumentInjectionVO
};
var hex_di_reflect_ClassDescription = function(constructorInjection,injections,postConstruct,preDestroy) {
	this.constructorInjection = constructorInjection;
	this.injections = injections;
	this.postConstruct = postConstruct;
	this.preDestroy = preDestroy;
	if(this.postConstruct.length > 0) haxe_ds_ArraySort.sort(this.postConstruct,$bind(this,this._sort));
	if(this.preDestroy.length > 0) haxe_ds_ArraySort.sort(this.preDestroy,$bind(this,this._sort));
};
$hxClasses["hex.di.reflect.ClassDescription"] = hex_di_reflect_ClassDescription;
hex_di_reflect_ClassDescription.__name__ = ["hex","di","reflect","ClassDescription"];
hex_di_reflect_ClassDescription.__interfaces__ = [hex_di_IInjectable];
hex_di_reflect_ClassDescription.prototype = {
	constructorInjection: null
	,injections: null
	,postConstruct: null
	,preDestroy: null
	,_sort: function(a,b) {
		return a.order - b.order;
	}
	,applyInjection: function(target,injector) {
		var _g = 0;
		var _g1 = this.injections;
		while(_g < _g1.length) {
			var injection = _g1[_g];
			++_g;
			injection.applyInjection(target,injector);
		}
		var _g2 = 0;
		var _g11 = this.postConstruct;
		while(_g2 < _g11.length) {
			var injection1 = _g11[_g2];
			++_g2;
			injection1.applyInjection(target,injector);
		}
		return target;
	}
	,__class__: hex_di_reflect_ClassDescription
};
var hex_di_reflect_IClassDescriptionProvider = function() { };
$hxClasses["hex.di.reflect.IClassDescriptionProvider"] = hex_di_reflect_IClassDescriptionProvider;
hex_di_reflect_IClassDescriptionProvider.__name__ = ["hex","di","reflect","IClassDescriptionProvider"];
hex_di_reflect_IClassDescriptionProvider.prototype = {
	getClassDescription: null
	,__class__: hex_di_reflect_IClassDescriptionProvider
};
var hex_di_reflect_ClassDescriptionProvider = function(classAnnotationDataProvider) {
	this._classAnnotationDataProvider = classAnnotationDataProvider;
	this._classDescription = new hex_collection_HashMap();
};
$hxClasses["hex.di.reflect.ClassDescriptionProvider"] = hex_di_reflect_ClassDescriptionProvider;
hex_di_reflect_ClassDescriptionProvider.__name__ = ["hex","di","reflect","ClassDescriptionProvider"];
hex_di_reflect_ClassDescriptionProvider.__interfaces__ = [hex_di_reflect_IClassDescriptionProvider];
hex_di_reflect_ClassDescriptionProvider.prototype = {
	_classAnnotationDataProvider: null
	,_classDescription: null
	,getClassDescription: function(type) {
		if(this._classDescription.containsKey(type)) return this._classDescription.get(type); else return this._getClassDescription(type);
	}
	,_getClassDescription: function(type) {
		var classAnnotationData = this._classAnnotationDataProvider.getClassAnnotationData(type);
		if(classAnnotationData != null) {
			var injections = [];
			var postConstruct = [];
			var preDestroy = [];
			var _g = 0;
			var _g1 = classAnnotationData.props;
			while(_g < _g1.length) {
				var prop = _g1[_g];
				++_g;
				injections.push(new hex_di_reflect_PropertyInjection(prop.name,prop.type,prop.key,prop.isOpt));
			}
			var _g2 = 0;
			var _g11 = classAnnotationData.methods;
			while(_g2 < _g11.length) {
				var method = _g11[_g2];
				++_g2;
				var $arguments = [];
				var _g21 = 0;
				var _g3 = method.args;
				while(_g21 < _g3.length) {
					var arg = _g3[_g21];
					++_g21;
					$arguments.push(new hex_di_reflect_ArgumentInjectionVO(Type.resolveClass(arg.type),arg.key,arg.isOpt));
				}
				if(method.isPost) postConstruct.push(new hex_di_reflect_OrderedInjection(method.name,$arguments,method.order)); else if(method.isPre) preDestroy.push(new hex_di_reflect_OrderedInjection(method.name,$arguments,method.order)); else injections.push(new hex_di_reflect_MethodInjection(method.name,$arguments));
			}
			var ctor = classAnnotationData.ctor;
			var ctorArguments = [];
			var _g4 = 0;
			var _g12 = ctor.args;
			while(_g4 < _g12.length) {
				var arg1 = _g12[_g4];
				++_g4;
				ctorArguments.push(new hex_di_reflect_ArgumentInjectionVO(Type.resolveClass(arg1.type),arg1.key,arg1.isOpt));
			}
			var constructorInjection = new hex_di_reflect_ConstructorInjection(ctorArguments);
			var classDescription = new hex_di_reflect_ClassDescription(constructorInjection,injections,postConstruct,preDestroy);
			return classDescription;
		} else return null;
	}
	,__class__: hex_di_reflect_ClassDescriptionProvider
};
var hex_di_reflect_MethodInjection = function(methodName,args) {
	this.methodName = methodName;
	this.args = args;
};
$hxClasses["hex.di.reflect.MethodInjection"] = hex_di_reflect_MethodInjection;
hex_di_reflect_MethodInjection.__name__ = ["hex","di","reflect","MethodInjection"];
hex_di_reflect_MethodInjection.__interfaces__ = [hex_di_IInjectable];
hex_di_reflect_MethodInjection.prototype = {
	methodName: null
	,args: null
	,applyInjection: function(target,injector) {
		Reflect.callMethod(target,Reflect.field(target,this.methodName),this._gatherArgs(target,injector));
		return target;
	}
	,_gatherArgs: function(target,injector) {
		var args = [];
		var _g = 0;
		var _g1 = this.args;
		while(_g < _g1.length) {
			var arg = _g1[_g];
			++_g;
			var provider = injector.getProvider(arg.type,arg.injectionName);
			if(provider != null) args.push(provider.getResult(injector)); else if(!arg.isOptional) this._throwMissingMappingException(target,arg.type,arg.injectionName,injector);
		}
		return args;
	}
	,_throwMissingMappingException: function(target,type,injectionName,injector) {
		throw new js__$Boot_HaxeError(new hex_di_error_MissingMappingException("'" + hex_log_Stringifier.stringify(injector) + "' is missing a mapping to inject argument into method named '" + this.methodName + "' with type '" + Type.getClassName(type) + "' inside instance of '" + hex_log_Stringifier.stringify(target) + "'. Target dependency: '" + Type.getClassName(type) + "|" + injectionName + "'",{ fileName : "MethodInjection.hx", lineNumber : 52, className : "hex.di.reflect.MethodInjection", methodName : "_throwMissingMappingException"}));
	}
	,__class__: hex_di_reflect_MethodInjection
};
var hex_di_reflect_ConstructorInjection = function(args) {
	hex_di_reflect_MethodInjection.call(this,"new",args);
};
$hxClasses["hex.di.reflect.ConstructorInjection"] = hex_di_reflect_ConstructorInjection;
hex_di_reflect_ConstructorInjection.__name__ = ["hex","di","reflect","ConstructorInjection"];
hex_di_reflect_ConstructorInjection.__super__ = hex_di_reflect_MethodInjection;
hex_di_reflect_ConstructorInjection.prototype = $extend(hex_di_reflect_MethodInjection.prototype,{
	createInstance: function(type,injector) {
		return Type.createInstance(type,this._gatherArgs(type,injector));
	}
	,_throwMissingMappingException: function(target,type,injectionName,injector) {
		throw new js__$Boot_HaxeError(new hex_di_error_MissingMappingException("'" + hex_log_Stringifier.stringify(injector) + "' is missing a mapping to inject argument" + " with type '" + Type.getClassName(type) + "' into constructor of class '" + hex_log_Stringifier.stringify(target) + "'. Target dependency: '" + Type.getClassName(type) + "|" + injectionName + "'",{ fileName : "ConstructorInjection.hx", lineNumber : 26, className : "hex.di.reflect.ConstructorInjection", methodName : "_throwMissingMappingException"}));
	}
	,__class__: hex_di_reflect_ConstructorInjection
});
var hex_di_reflect_OrderedInjection = function(methodName,args,order) {
	if(order == null) order = 0;
	hex_di_reflect_MethodInjection.call(this,methodName,args);
	this.order = order;
};
$hxClasses["hex.di.reflect.OrderedInjection"] = hex_di_reflect_OrderedInjection;
hex_di_reflect_OrderedInjection.__name__ = ["hex","di","reflect","OrderedInjection"];
hex_di_reflect_OrderedInjection.__super__ = hex_di_reflect_MethodInjection;
hex_di_reflect_OrderedInjection.prototype = $extend(hex_di_reflect_MethodInjection.prototype,{
	order: null
	,__class__: hex_di_reflect_OrderedInjection
});
var hex_di_reflect_PropertyInjection = function(propertyName,propertyType,injectionName,isOptional) {
	if(isOptional == null) isOptional = false;
	if(injectionName == null) injectionName = "";
	this.propertyName = propertyName;
	this.propertyType = Type.resolveClass(propertyType);
	this.injectionName = injectionName;
	this.isOptional = isOptional;
};
$hxClasses["hex.di.reflect.PropertyInjection"] = hex_di_reflect_PropertyInjection;
hex_di_reflect_PropertyInjection.__name__ = ["hex","di","reflect","PropertyInjection"];
hex_di_reflect_PropertyInjection.__interfaces__ = [hex_di_IInjectable];
hex_di_reflect_PropertyInjection.prototype = {
	propertyName: null
	,propertyType: null
	,injectionName: null
	,isOptional: null
	,applyInjection: function(target,injector) {
		var provider = injector.getProvider(this.propertyType,this.injectionName);
		if(provider != null) Reflect.setProperty(target,this.propertyName,provider.getResult(injector)); else if(!this.isOptional) throw new js__$Boot_HaxeError(new hex_di_error_MissingMappingException("'" + hex_log_Stringifier.stringify(injector) + "' is missing a mapping to inject into property named '" + this.propertyName + "' with type '" + Type.getClassName(this.propertyType) + "' inside instance of '" + hex_log_Stringifier.stringify(target) + "'. Target dependency: '" + Type.getClassName(this.propertyType) + "|" + this.injectionName + "'",{ fileName : "PropertyInjection.hx", lineNumber : 37, className : "hex.di.reflect.PropertyInjection", methodName : "applyInjection"}));
		return target;
	}
	,__class__: hex_di_reflect_PropertyInjection
};
var hex_domain_IApplicationDomainDispatcher = function() { };
$hxClasses["hex.domain.IApplicationDomainDispatcher"] = hex_domain_IApplicationDomainDispatcher;
hex_domain_IApplicationDomainDispatcher.__name__ = ["hex","domain","IApplicationDomainDispatcher"];
hex_domain_IApplicationDomainDispatcher.__interfaces__ = [hex_domain_IDomainDispatcher];
var hex_domain_Domain = function(domainName) {
	if(domainName == null) throw new js__$Boot_HaxeError(new hex_error_NullPointerException("Domain's name can't be null",{ fileName : "Domain.hx", lineNumber : 20, className : "hex.domain.Domain", methodName : "new"})); else if(hex_domain_Domain._domainNames.exists(domainName)) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("Domain has already been registered with name '" + domainName + "'",{ fileName : "Domain.hx", lineNumber : 24, className : "hex.domain.Domain", methodName : "new"})); else {
		hex_domain_Domain._domainNames.set(domainName,this);
		this._domainName = domainName;
	}
};
$hxClasses["hex.domain.Domain"] = hex_domain_Domain;
hex_domain_Domain.__name__ = ["hex","domain","Domain"];
hex_domain_Domain.getDomain = function(domainName) {
	if(!hex_domain_Domain._domainNames.exists(domainName)) return null; else return hex_domain_Domain._domainNames.get(domainName);
};
hex_domain_Domain.prototype = {
	_domainName: null
	,getName: function() {
		return this._domainName;
	}
	,toString: function() {
		return hex_log_Stringifier.stringify(this) + " with name '" + this.getName() + "'";
	}
	,__class__: hex_domain_Domain
};
var hex_domain_DomainUtil = function() {
};
$hxClasses["hex.domain.DomainUtil"] = hex_domain_DomainUtil;
hex_domain_DomainUtil.__name__ = ["hex","domain","DomainUtil"];
hex_domain_DomainUtil.getDomain = function(domainName,type) {
	var domain = null;
	if(hex_domain_DomainUtil._domain.exists(domainName)) domain = hex_domain_DomainUtil._domain.get(domainName); else {
		domain = Type.createInstance(type,[domainName]);
		hex_domain_DomainUtil._domain.set(domainName,domain);
	}
	return domain;
};
hex_domain_DomainUtil.prototype = {
	__class__: hex_domain_DomainUtil
};
var hex_domain_TopLevelDomain = function(domainName) {
	hex_domain_Domain.call(this,domainName);
};
$hxClasses["hex.domain.TopLevelDomain"] = hex_domain_TopLevelDomain;
hex_domain_TopLevelDomain.__name__ = ["hex","domain","TopLevelDomain"];
hex_domain_TopLevelDomain.__super__ = hex_domain_Domain;
hex_domain_TopLevelDomain.prototype = $extend(hex_domain_Domain.prototype,{
	__class__: hex_domain_TopLevelDomain
});
var hex_event_IDispatcher = function() { };
$hxClasses["hex.event.IDispatcher"] = hex_event_IDispatcher;
hex_event_IDispatcher.__name__ = ["hex","event","IDispatcher"];
hex_event_IDispatcher.prototype = {
	dispatch: null
	,addHandler: null
	,removeHandler: null
	,addListener: null
	,removeListener: null
	,removeAllListeners: null
	,isEmpty: null
	,isRegistered: null
	,hasHandler: null
	,__class__: hex_event_IDispatcher
};
var hex_event_Dispatcher = function() {
	this._isSealed = false;
	this._cachedMethodCalls = [];
	this._listeners = new haxe_ds_ObjectMap();
};
$hxClasses["hex.event.Dispatcher"] = hex_event_Dispatcher;
hex_event_Dispatcher.__name__ = ["hex","event","Dispatcher"];
hex_event_Dispatcher.__interfaces__ = [hex_event_IDispatcher];
hex_event_Dispatcher.prototype = {
	_isSealed: null
	,_cachedMethodCalls: null
	,_listeners: null
	,dispatch: function(messageType,data) {
		this._seal(true);
		var parameters = null;
		var iterator = this._listeners.keys();
		while(iterator.hasNext()) {
			var listener = iterator.next();
			var m = this._listeners.h[listener.__id__];
			if(Lambda.count(m) > 0) {
				if(m.h.__keys__[messageType.__id__] != null) {
					var handler = m.h[messageType.__id__];
					handler.call(data);
				}
			} else {
				var messageName = messageType.name;
				var callback = Reflect.field(listener,messageName);
				if(callback != null && messageName != "handleMessage") callback.apply(listener,data); else {
					callback = Reflect.field(listener,"handleMessage");
					if(callback != null) {
						if(parameters == null) {
							parameters = [messageType];
							if(data != null) parameters = parameters.concat(data);
						}
						callback.apply(listener,parameters);
					} else {
						var msg = hex_log_Stringifier.stringify(this) + ".dispatch failed. " + " You must implement '" + messageType.name + "' or 'handleMessage' method in '" + hex_log_Stringifier.stringify(listener) + "' instance.";
						throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException(msg,{ fileName : "Dispatcher.hx", lineNumber : 74, className : "hex.event.Dispatcher", methodName : "dispatch"}));
					}
				}
			}
		}
		this._seal(false);
	}
	,addHandler: function(messageType,scope,callback) {
		if(!this._isSealed) {
			if((function($this) {
				var $r;
				var key = scope;
				$r = $this._listeners.h.__keys__[key.__id__] != null;
				return $r;
			}(this))) {
				var m;
				var key1 = scope;
				m = this._listeners.h[key1.__id__];
				if(Lambda.count(m) == 0) {
					var msg = hex_log_Stringifier.stringify(this) + ".addHandler failed. " + hex_log_Stringifier.stringify(scope) + " is already registered for all message types.";
					throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(msg,{ fileName : "Dispatcher.hx", lineNumber : 95, className : "hex.event.Dispatcher", methodName : "addHandler"}));
				} else if(m.h.__keys__[messageType.__id__] != null) {
					var handler = m.h[messageType.__id__];
					return handler.add(callback);
				} else {
					var handler1 = new hex_event_CallbackHandler(scope,callback);
					m.set(messageType,handler1);
					return true;
				}
			} else {
				var m1 = new haxe_ds_ObjectMap();
				var handler2 = new hex_event_CallbackHandler(scope,callback);
				m1.set(messageType,handler2);
				var key2 = scope;
				this._listeners.set(key2,m1);
				return true;
			}
		} else {
			this._cachedMethodCalls.push((function(f,a1,a2,a3) {
				return function() {
					return f(a1,a2,a3);
				};
			})($bind(this,this.addHandler),messageType,scope,callback));
			return false;
		}
	}
	,removeHandler: function(messageType,scope,callback) {
		if(!this._isSealed) {
			if((function($this) {
				var $r;
				var key = scope;
				$r = $this._listeners.h.__keys__[key.__id__] != null;
				return $r;
			}(this))) {
				var m;
				var key1 = scope;
				m = this._listeners.h[key1.__id__];
				if(Lambda.count(m) == 0) {
					var msg = hex_log_Stringifier.stringify(this) + ".removeHandler failed. " + hex_log_Stringifier.stringify(scope) + " is registered for all message types." + " Use 'removeListener' to unsubscribe.";
					throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(msg,{ fileName : "Dispatcher.hx", lineNumber : 139, className : "hex.event.Dispatcher", methodName : "removeHandler"}));
				} else if(m.h.__keys__[messageType.__id__] != null) {
					var handler = m.h[messageType.__id__];
					var b = handler.remove(callback);
					if(handler.isEmpty()) {
						m.remove(messageType);
						if(Lambda.count(m) == 0) {
							var key2 = scope;
							this._listeners.remove(key2);
						}
					}
					return b;
				} else return false;
			} else return false;
		} else {
			this._cachedMethodCalls.push((function(f,a1,a2,a3) {
				return function() {
					return f(a1,a2,a3);
				};
			})($bind(this,this.removeHandler),messageType,scope,callback));
			return false;
		}
	}
	,addListener: function(listener) {
		if(!this._isSealed) {
			if(this._listeners.h.__keys__[listener.__id__] != null) {
				var m = this._listeners.h[listener.__id__];
				if(Lambda.count(m) > 0) {
					var msg = hex_log_Stringifier.stringify(this) + ".addListener failed. " + hex_log_Stringifier.stringify(listener) + " is already registered to ";
					var iterator = m.keys();
					while(iterator.hasNext()) msg += "'" + Std.string(iterator.next()) + "' ";
					msg += "message types.";
					throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(msg,{ fileName : "Dispatcher.hx", lineNumber : 192, className : "hex.event.Dispatcher", methodName : "addListener"}));
				} else return false;
			} else {
				var value = new haxe_ds_ObjectMap();
				this._listeners.set(listener,value);
				return true;
			}
		} else {
			this._cachedMethodCalls.push((function(f,a1) {
				return function() {
					return f(a1);
				};
			})($bind(this,this.addListener),listener));
			return false;
		}
	}
	,removeListener: function(listener) {
		if(!this._isSealed) {
			if(this._listeners.h.__keys__[listener.__id__] != null) {
				this._listeners.remove(listener);
				return true;
			} else return false;
		} else {
			this._cachedMethodCalls.push((function(f,a1) {
				return function() {
					return f(a1);
				};
			})($bind(this,this.removeListener),listener));
			return false;
		}
	}
	,removeAllListeners: function() {
		if(!this._isSealed) this._listeners = new haxe_ds_ObjectMap(); else this._cachedMethodCalls.push((function(f) {
			return function() {
				f();
			};
		})($bind(this,this.removeAllListeners)));
	}
	,isEmpty: function() {
		return Lambda.count(this._listeners) == 0;
	}
	,isRegistered: function(listener,messageType) {
		if(this._listeners.h.__keys__[listener.__id__] != null) {
			if(messageType == null) return true; else {
				var m = this._listeners.h[listener.__id__];
				return m.h.__keys__[messageType.__id__] != null;
			}
		} else return false;
	}
	,hasHandler: function(messageType,scope) {
		if(scope == null) {
			var iterator = this._listeners.keys();
			while(iterator.hasNext()) {
				var listener = iterator.next();
				var m = this._listeners.h[listener.__id__];
				if(Lambda.count(m) == 0) return true; else if(m.h.__keys__[messageType.__id__] != null) return true;
			}
			return false;
		} else if((function($this) {
			var $r;
			var key = scope;
			$r = $this._listeners.h.__keys__[key.__id__] != null;
			return $r;
		}(this))) {
			var m1;
			var key1 = scope;
			m1 = this._listeners.h[key1.__id__];
			if(Lambda.count(m1) == 0) return true; else if(m1.h.__keys__[messageType.__id__] != null) return true;
			return false;
		} else return false;
	}
	,_seal: function(isSealed) {
		if(isSealed != this._isSealed) {
			this._isSealed = isSealed;
			if(!this._isSealed && this._cachedMethodCalls.length > 0) {
				var _g = 0;
				var _g1 = this._cachedMethodCalls;
				while(_g < _g1.length) {
					var cachedMethodCall = _g1[_g];
					++_g;
					cachedMethodCall();
				}
				this._cachedMethodCalls = [];
			}
		}
	}
	,__class__: hex_event_Dispatcher
};
var hex_domain_ApplicationDomainDispatcher = function() {
	hex_domain_DomainDispatcher.call(this,hex_domain_TopLevelDomain.DOMAIN,hex_event_Dispatcher);
};
$hxClasses["hex.domain.ApplicationDomainDispatcher"] = hex_domain_ApplicationDomainDispatcher;
hex_domain_ApplicationDomainDispatcher.__name__ = ["hex","domain","ApplicationDomainDispatcher"];
hex_domain_ApplicationDomainDispatcher.__interfaces__ = [hex_domain_IApplicationDomainDispatcher];
hex_domain_ApplicationDomainDispatcher.getInstance = function() {
	return hex_domain_ApplicationDomainDispatcher._Instance;
};
hex_domain_ApplicationDomainDispatcher.__super__ = hex_domain_DomainDispatcher;
hex_domain_ApplicationDomainDispatcher.prototype = $extend(hex_domain_DomainDispatcher.prototype,{
	getDomainDispatcher: function(domain) {
		if(domain != hex_domain_NoDomain.DOMAIN) return hex_domain_DomainDispatcher.prototype.getDomainDispatcher.call(this,domain); else return null;
	}
	,__class__: hex_domain_ApplicationDomainDispatcher
});
var hex_domain_CoreDomainSuite = function() {
	this.list = [hex_domain_DomainTest];
};
$hxClasses["hex.domain.CoreDomainSuite"] = hex_domain_CoreDomainSuite;
hex_domain_CoreDomainSuite.__name__ = ["hex","domain","CoreDomainSuite"];
hex_domain_CoreDomainSuite.prototype = {
	list: null
	,__class__: hex_domain_CoreDomainSuite
};
var hex_domain_DefaultDomain = function(domainName) {
	hex_domain_Domain.call(this,domainName);
};
$hxClasses["hex.domain.DefaultDomain"] = hex_domain_DefaultDomain;
hex_domain_DefaultDomain.__name__ = ["hex","domain","DefaultDomain"];
hex_domain_DefaultDomain.__super__ = hex_domain_Domain;
hex_domain_DefaultDomain.prototype = $extend(hex_domain_Domain.prototype,{
	__class__: hex_domain_DefaultDomain
});
var hex_domain_DomainExpert = function() {
	this._registeredDomains = new haxe_ds_IntMap();
	this._subscribedModules = new haxe_ds_ObjectMap();
	this._removedModules = new haxe_ds_StringMap();
};
$hxClasses["hex.domain.DomainExpert"] = hex_domain_DomainExpert;
hex_domain_DomainExpert.__name__ = ["hex","domain","DomainExpert"];
hex_domain_DomainExpert.getInstance = function() {
	return hex_domain_DomainExpert._Instance;
};
hex_domain_DomainExpert.prototype = {
	_registeredDomains: null
	,_subscribedModules: null
	,_removedModules: null
	,getDomainFor: function(module) {
		if(!(this._subscribedModules.h.__keys__[module.__id__] != null)) {
			if(this._registeredDomains.h.hasOwnProperty(hex_domain_DomainExpert._DomainIndex)) {
				var moduleDomain = this._registeredDomains.h[hex_domain_DomainExpert._DomainIndex];
				this._registeredDomains.remove(hex_domain_DomainExpert._DomainIndex);
				hex_domain_DomainExpert._DomainIndex++;
				var key = moduleDomain.getName();
				this._removedModules.set(key,false);
				this._subscribedModules.set(module,moduleDomain);
				return moduleDomain;
			} else {
				var key1 = Type.getClassName(module == null?null:js_Boot.getClass(module)) + hex_core_HashCodeFactory.getKey(module);
				if(this._removedModules.exists(key1) && this._removedModules.get(key1)) return null; else {
					var domain = hex_domain_DomainUtil.getDomain(key1,hex_domain_Domain);
					this._removedModules.set(key1,false);
					this._subscribedModules.set(module,domain);
					return domain;
				}
			}
		} else return this._subscribedModules.h[module.__id__];
	}
	,registerDomain: function(domain) {
		this._registeredDomains.h[hex_domain_DomainExpert._DomainIndex] = domain;
	}
	,releaseDomain: function(module) {
		if(module.get_isReleased()) {
			var key = Type.getClassName(module == null?null:js_Boot.getClass(module)) + hex_core_HashCodeFactory.getKey(module);
			if(this._removedModules.exists(key)) this._removedModules.set(key,true); else {
				var key1 = module.getDomain().getName();
				this._removedModules.set(key1,true);
			}
			this._subscribedModules.remove(module);
		} else throw new js__$Boot_HaxeError(new hex_error_IllegalStateException("Illegal call, '" + Std.string(module) + "' is not released.",{ fileName : "DomainExpert.hx", lineNumber : 93, className : "hex.domain.DomainExpert", methodName : "releaseDomain"}));
	}
	,__class__: hex_domain_DomainExpert
};
var hex_domain_DomainTest = function() { };
$hxClasses["hex.domain.DomainTest"] = hex_domain_DomainTest;
hex_domain_DomainTest.__name__ = ["hex","domain","DomainTest"];
hex_domain_DomainTest.prototype = {
	testConstructor: function() {
		var domain = new hex_domain_Domain("testConstructor");
		hex_unittest_assertion_Assert.equals("testConstructor",domain.getName(),"'name' property should be the same passed to constructor",{ fileName : "DomainTest.hx", lineNumber : 18, className : "hex.domain.DomainTest", methodName : "testConstructor"});
	}
	,testConstructorNullException: function() {
		hex_unittest_assertion_Assert.constructorCallThrows(hex_error_NullPointerException,hex_domain_Domain,[],"",{ fileName : "DomainTest.hx", lineNumber : 24, className : "hex.domain.DomainTest", methodName : "testConstructorNullException"});
	}
	,testConstructorWithNameValues: function() {
		var domain = new hex_domain_Domain("testConstructorWithNameValues");
		hex_unittest_assertion_Assert.constructorCallThrows(hex_error_IllegalArgumentException,hex_domain_Domain,["testConstructorWithNameValues"],"",{ fileName : "DomainTest.hx", lineNumber : 31, className : "hex.domain.DomainTest", methodName : "testConstructorWithNameValues"});
	}
	,__class__: hex_domain_DomainTest
};
var hex_domain_NoDomain = function(domainName) {
	hex_domain_Domain.call(this,domainName);
};
$hxClasses["hex.domain.NoDomain"] = hex_domain_NoDomain;
hex_domain_NoDomain.__name__ = ["hex","domain","NoDomain"];
hex_domain_NoDomain.__super__ = hex_domain_Domain;
hex_domain_NoDomain.prototype = $extend(hex_domain_Domain.prototype,{
	__class__: hex_domain_NoDomain
});
var hex_error_IllegalStateException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.error.IllegalStateException"] = hex_error_IllegalStateException;
hex_error_IllegalStateException.__name__ = ["hex","error","IllegalStateException"];
hex_error_IllegalStateException.__super__ = hex_error_Exception;
hex_error_IllegalStateException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_error_IllegalStateException
});
var hex_error_NoSuchElementException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.error.NoSuchElementException"] = hex_error_NoSuchElementException;
hex_error_NoSuchElementException.__name__ = ["hex","error","NoSuchElementException"];
hex_error_NoSuchElementException.__super__ = hex_error_Exception;
hex_error_NoSuchElementException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_error_NoSuchElementException
});
var hex_error_PrivateConstructorException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.error.PrivateConstructorException"] = hex_error_PrivateConstructorException;
hex_error_PrivateConstructorException.__name__ = ["hex","error","PrivateConstructorException"];
hex_error_PrivateConstructorException.__super__ = hex_error_Exception;
hex_error_PrivateConstructorException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_error_PrivateConstructorException
});
var hex_error_UnsupportedOperationException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.error.UnsupportedOperationException"] = hex_error_UnsupportedOperationException;
hex_error_UnsupportedOperationException.__name__ = ["hex","error","UnsupportedOperationException"];
hex_error_UnsupportedOperationException.__super__ = hex_error_Exception;
hex_error_UnsupportedOperationException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_error_UnsupportedOperationException
});
var hex_error_VirtualMethodException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.error.VirtualMethodException"] = hex_error_VirtualMethodException;
hex_error_VirtualMethodException.__name__ = ["hex","error","VirtualMethodException"];
hex_error_VirtualMethodException.__super__ = hex_error_Exception;
hex_error_VirtualMethodException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_error_VirtualMethodException
});
var hex_event_IAdapterStrategy = function() { };
$hxClasses["hex.event.IAdapterStrategy"] = hex_event_IAdapterStrategy;
hex_event_IAdapterStrategy.__name__ = ["hex","event","IAdapterStrategy"];
hex_event_IAdapterStrategy.prototype = {
	adapt: null
	,__class__: hex_event_IAdapterStrategy
};
var hex_event_AdapterStrategy = function(target,method) {
	this._target = target;
	this._method = method;
};
$hxClasses["hex.event.AdapterStrategy"] = hex_event_AdapterStrategy;
hex_event_AdapterStrategy.__name__ = ["hex","event","AdapterStrategy"];
hex_event_AdapterStrategy.__interfaces__ = [hex_event_IAdapterStrategy];
hex_event_AdapterStrategy.prototype = {
	_target: null
	,_method: null
	,adapt: function(args) {
		return Reflect.callMethod(this._target,this._method,args);
	}
	,__class__: hex_event_AdapterStrategy
};
var hex_event_BasicEventTest = function() { };
$hxClasses["hex.event.BasicEventTest"] = hex_event_BasicEventTest;
hex_event_BasicEventTest.__name__ = ["hex","event","BasicEventTest"];
hex_event_BasicEventTest.prototype = {
	testType: function() {
		var type = "type";
		var e = new hex_event_BasicEvent(type,{ });
		hex_unittest_assertion_Assert.equals(type,e.type,"'type' property should be the same passed to constructor",{ fileName : "BasicEventTest.hx", lineNumber : 17, className : "hex.event.BasicEventTest", methodName : "testType"});
	}
	,testTarget: function() {
		var target = new hex_event__$BasicEventTest_MockTarget();
		var e = new hex_event_BasicEvent("",target);
		hex_unittest_assertion_Assert.equals(target,e.target,"'target' property should be the same passed to constructor",{ fileName : "BasicEventTest.hx", lineNumber : 26, className : "hex.event.BasicEventTest", methodName : "testTarget"});
	}
	,testClone: function() {
		var type = "type";
		var target = new hex_event__$BasicEventTest_MockTarget();
		var e = new hex_event_BasicEvent(type,target);
		var clonedEvent = e.clone();
		hex_unittest_assertion_Assert.equals(type,clonedEvent.type,"'clone' method should return cloned event with same 'type' property",{ fileName : "BasicEventTest.hx", lineNumber : 37, className : "hex.event.BasicEventTest", methodName : "testClone"});
		hex_unittest_assertion_Assert.equals(target,clonedEvent.target,"'clone' method should return cloned event with same 'target' property",{ fileName : "BasicEventTest.hx", lineNumber : 38, className : "hex.event.BasicEventTest", methodName : "testClone"});
	}
	,__class__: hex_event_BasicEventTest
};
var hex_event__$BasicEventTest_MockTarget = function() {
};
$hxClasses["hex.event._BasicEventTest.MockTarget"] = hex_event__$BasicEventTest_MockTarget;
hex_event__$BasicEventTest_MockTarget.__name__ = ["hex","event","_BasicEventTest","MockTarget"];
hex_event__$BasicEventTest_MockTarget.prototype = {
	__class__: hex_event__$BasicEventTest_MockTarget
};
var hex_event_BasicHandler = function(scope,callback) {
	this.scope = scope;
	this.callback = callback;
};
$hxClasses["hex.event.BasicHandler"] = hex_event_BasicHandler;
hex_event_BasicHandler.__name__ = ["hex","event","BasicHandler"];
hex_event_BasicHandler.prototype = {
	scope: null
	,callback: null
	,__class__: hex_event_BasicHandler
};
var hex_event_CallbackAdapter = function() {
};
$hxClasses["hex.event.CallbackAdapter"] = hex_event_CallbackAdapter;
hex_event_CallbackAdapter.__name__ = ["hex","event","CallbackAdapter"];
hex_event_CallbackAdapter.prototype = {
	_callbackTarget: null
	,_callbackMethod: null
	,_adapterTarget: null
	,_adapterMethod: null
	,setCallBackMethod: function(callbackTarget,callbackMethod) {
		this._callbackTarget = callbackTarget;
		this._callbackMethod = callbackMethod;
	}
	,setAdapterMethod: function(adapterTarget,adapterMethod) {
		this._adapterTarget = adapterTarget;
		this._adapterMethod = adapterMethod;
	}
	,getCallbackAdapter: function() {
		var adapterTarget = null;
		var adapterMethod = null;
		var callbackTarget = this._callbackTarget;
		var callbackMethod = this._callbackMethod;
		if(this._adapterTarget != null && this._adapterMethod != null) {
			adapterTarget = this._adapterMethod;
			adapterMethod = this._adapterMethod;
		}
		var f = function(rest) {
			var result = null;
			if(adapterTarget != null && adapterMethod != null) result = Reflect.callMethod(adapterTarget,adapterMethod,rest);
			Reflect.callMethod(callbackTarget,callbackMethod,[result]);
		};
		return Reflect.makeVarArgs(f);
	}
	,__class__: hex_event_CallbackAdapter
};
var hex_event_CallbackAdapterTest = function() { };
$hxClasses["hex.event.CallbackAdapterTest"] = hex_event_CallbackAdapterTest;
hex_event_CallbackAdapterTest.__name__ = ["hex","event","CallbackAdapterTest"];
hex_event_CallbackAdapterTest.prototype = {
	_callbackAdapter: null
	,testGetCallbackAdapter: function() {
		this._callbackAdapter = new hex_event_CallbackAdapter();
		this._callbackAdapter.setCallBackMethod(this,$bind(this,this.simpleCallbackTest));
		this._callbackAdapter.setAdapterMethod(this,$bind(this,this.simpleAdapter));
		this.triggerCallbackAdapter(this._callbackAdapter.getCallbackAdapter());
	}
	,triggerCallbackAdapter: function(callbackAdapter) {
		callbackAdapter("hello");
	}
	,simpleAdapter: function(s) {
		return 1;
	}
	,simpleCallbackTest: function(i) {
		hex_unittest_assertion_Assert.equals(1,i,"'getCallbackAdapter' should return 1",{ fileName : "CallbackAdapterTest.hx", lineNumber : 36, className : "hex.event.CallbackAdapterTest", methodName : "simpleCallbackTest"});
	}
	,__class__: hex_event_CallbackAdapterTest
};
var hex_event_CallbackHandler = function(scope,callback) {
	this.callbacks = [];
	this.scope = scope;
	this.callbacks.push(callback);
};
$hxClasses["hex.event.CallbackHandler"] = hex_event_CallbackHandler;
hex_event_CallbackHandler.__name__ = ["hex","event","CallbackHandler"];
hex_event_CallbackHandler.prototype = {
	scope: null
	,callbacks: null
	,call: function(data) {
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			Reflect.callMethod(this.scope,callback,data);
		}
	}
	,add: function(callback) {
		if((function($this) {
			var $r;
			var x = callback;
			$r = HxOverrides.indexOf($this.callbacks,x,0);
			return $r;
		}(this)) == -1) {
			this.callbacks.push(callback);
			return true;
		} else return false;
	}
	,remove: function(callback) {
		var index;
		var x = callback;
		index = HxOverrides.indexOf(this.callbacks,x,0);
		if(index != -1) {
			this.callbacks.splice(index,1);
			return true;
		} else return false;
	}
	,isEmpty: function() {
		return this.callbacks.length == 0;
	}
	,__class__: hex_event_CallbackHandler
};
var hex_event_ClassAdapter = function() {
};
$hxClasses["hex.event.ClassAdapter"] = hex_event_ClassAdapter;
hex_event_ClassAdapter.__name__ = ["hex","event","ClassAdapter"];
hex_event_ClassAdapter.prototype = {
	_annotationProvider: null
	,_callbackTarget: null
	,_callbackMethod: null
	,_adapterClass: null
	,_adapterInstance: null
	,_factoryTarget: null
	,_factoryMethod: null
	,setCallBackMethod: function(callbackTarget,callbackMethod) {
		this._callbackTarget = callbackTarget;
		this._callbackMethod = callbackMethod;
	}
	,setAdapterClass: function(adapterClass) {
		this._adapterClass = adapterClass;
	}
	,setFactoryMethod: function(factoryTarget,factoryMethod) {
		this._factoryTarget = factoryTarget;
		this._factoryMethod = factoryMethod;
	}
	,setAnnotationProvider: function(annotationProvider) {
		this._annotationProvider = annotationProvider;
	}
	,getCallbackAdapter: function() {
		var annotationProvider = this._annotationProvider;
		var callbackTarget = this._callbackTarget;
		var callbackMethod = this._callbackMethod;
		var adapterInstance = null;
		var adapterClass = null;
		var factoryTarget = null;
		var factoryMethod = null;
		var isEventAdapterStrategyMacro = false;
		if(this._adapterClass != null) {
			adapterClass = this._adapterClass;
			factoryTarget = this._factoryTarget;
			factoryMethod = this._factoryMethod;
			isEventAdapterStrategyMacro = hex_util_ClassUtil.classExtendsOrImplements(this._adapterClass,hex_event_MacroAdapterStrategy);
			if(!isEventAdapterStrategyMacro) adapterInstance = this._factoryMethod != null?this._adapterInstance = this._factoryMethod(this._adapterClass):this._adapterInstance = Type.createInstance(this._adapterClass,[]);
		}
		var f = function(rest) {
			var result = null;
			if(isEventAdapterStrategyMacro) {
				var aSyncCommand;
				if(factoryTarget != null && factoryMethod != null) aSyncCommand = factoryMethod(adapterClass); else aSyncCommand = Type.createInstance(adapterClass,[]);
				if(js_Boot.__instanceof(aSyncCommand,hex_event_IAdapterStrategy) == false) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("adapterInstance class should extend AdapterStrategy. Check if you passed the correct class",{ fileName : "ClassAdapter.hx", lineNumber : 105, className : "hex.event.ClassAdapter", methodName : "getCallbackAdapter"}));
				if(js_Boot.__instanceof(aSyncCommand,hex_core_IAnnotationParsable)) annotationProvider.parse(aSyncCommand);
				adapterInstance = aSyncCommand;
				$bind(aSyncCommand,aSyncCommand.adapt).apply(aSyncCommand,rest);
				aSyncCommand.preExecute();
				var handler = new hex_event__$ClassAdapter_MacroAdapterStrategyHandler(callbackTarget,callbackMethod);
				aSyncCommand.addCompleteHandler(handler,$bind(handler,handler.onAsyncCommandComplete));
				aSyncCommand.execute();
				return;
			} else if(adapterInstance != null) {
				if(js_Boot.__instanceof(adapterInstance,hex_core_IAnnotationParsable)) annotationProvider.parse(adapterInstance);
				if(js_Boot.__instanceof(adapterInstance,hex_event_IAdapterStrategy) == false) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("adapterInstance class should extend AdapterStrategy. Check if you passed the correct class",{ fileName : "ClassAdapter.hx", lineNumber : 133, className : "hex.event.ClassAdapter", methodName : "getCallbackAdapter"}));
				result = $bind(adapterInstance,adapterInstance.adapt).apply(adapterInstance,[rest]);
			}
			Reflect.callMethod(callbackTarget,callbackMethod,(result instanceof Array) && result.__enum__ == null?result:[result]);
		};
		return Reflect.makeVarArgs(f);
	}
	,__class__: hex_event_ClassAdapter
};
var hex_event__$ClassAdapter_MacroAdapterStrategyHandler = function(scope,callback) {
	this.scope = scope;
	this.callback = callback;
};
$hxClasses["hex.event._ClassAdapter.MacroAdapterStrategyHandler"] = hex_event__$ClassAdapter_MacroAdapterStrategyHandler;
hex_event__$ClassAdapter_MacroAdapterStrategyHandler.__name__ = ["hex","event","_ClassAdapter","MacroAdapterStrategyHandler"];
hex_event__$ClassAdapter_MacroAdapterStrategyHandler.prototype = {
	scope: null
	,callback: null
	,onAsyncCommandComplete: function(command) {
		if(this.callback != null) Reflect.callMethod(this.scope,this.callback,[command.getResult()]);
	}
	,__class__: hex_event__$ClassAdapter_MacroAdapterStrategyHandler
};
var hex_event_ClassAdapterTest = function() { };
$hxClasses["hex.event.ClassAdapterTest"] = hex_event_ClassAdapterTest;
hex_event_ClassAdapterTest.__name__ = ["hex","event","ClassAdapterTest"];
hex_event_ClassAdapterTest.prototype = {
	_classAdapter: null
	,_scopeValue: null
	,testSimpleCallToGetCallbackAdapter: function() {
		this._classAdapter = new hex_event_ClassAdapter();
		this._classAdapter.setCallBackMethod(this,$bind(this,this.simpleCallbackTest));
		this._classAdapter.setAdapterClass(hex_event__$ClassAdapterTest_MockAdapterClass);
		this.triggerCallbackAdapter(this._classAdapter.getCallbackAdapter());
	}
	,triggerCallbackAdapter: function(callbackAdapter) {
		callbackAdapter("hello",4);
	}
	,simpleCallbackTest: function(s1,i1,s,i) {
		hex_unittest_assertion_Assert.equals("test",s1,"'getCallbackAdapter' should return 'test'",{ fileName : "ClassAdapterTest.hx", lineNumber : 37, className : "hex.event.ClassAdapterTest", methodName : "simpleCallbackTest"});
		hex_unittest_assertion_Assert.equals(1,i1,"'getCallbackAdapter' should return 1",{ fileName : "ClassAdapterTest.hx", lineNumber : 38, className : "hex.event.ClassAdapterTest", methodName : "simpleCallbackTest"});
		hex_unittest_assertion_Assert.equals("hello",s,"'getCallbackAdapter' should return 'hello'",{ fileName : "ClassAdapterTest.hx", lineNumber : 39, className : "hex.event.ClassAdapterTest", methodName : "simpleCallbackTest"});
		hex_unittest_assertion_Assert.equals(4,i,"'getCallbackAdapter' should return 4",{ fileName : "ClassAdapterTest.hx", lineNumber : 40, className : "hex.event.ClassAdapterTest", methodName : "simpleCallbackTest"});
	}
	,testCallToGetCallbackAdapterWithFactory: function() {
		this._classAdapter = new hex_event_ClassAdapter();
		this._classAdapter.setCallBackMethod(this,$bind(this,this.factoryCallbackTest));
		this._classAdapter.setAdapterClass(hex_event__$ClassAdapterTest_MockAdapterClassForFactory);
		this._classAdapter.setFactoryMethod(this,$bind(this,this.factoryForAdapterClass));
		this._scopeValue = 3;
		this.triggerCallbackAdapterWithFactory(this._classAdapter.getCallbackAdapter());
	}
	,factoryForAdapterClass: function(adapterClass) {
		return Type.createInstance(adapterClass,[this._scopeValue]);
	}
	,triggerCallbackAdapterWithFactory: function(callbackAdapter) {
		callbackAdapter("mundo",6);
	}
	,factoryCallbackTest: function(s1,i1,s,i) {
		hex_unittest_assertion_Assert.equals("test3",s1,"'getCallbackAdapter' should return 'test3'",{ fileName : "ClassAdapterTest.hx", lineNumber : 66, className : "hex.event.ClassAdapterTest", methodName : "factoryCallbackTest"});
		hex_unittest_assertion_Assert.equals(4,i1,"'getCallbackAdapter' should return 4",{ fileName : "ClassAdapterTest.hx", lineNumber : 67, className : "hex.event.ClassAdapterTest", methodName : "factoryCallbackTest"});
		hex_unittest_assertion_Assert.equals("mundo3",s,"'getCallbackAdapter' should return 'mundo'",{ fileName : "ClassAdapterTest.hx", lineNumber : 68, className : "hex.event.ClassAdapterTest", methodName : "factoryCallbackTest"});
		hex_unittest_assertion_Assert.equals(9,i,"'getCallbackAdapter' should return 9",{ fileName : "ClassAdapterTest.hx", lineNumber : 69, className : "hex.event.ClassAdapterTest", methodName : "factoryCallbackTest"});
	}
	,testCallToGetCallbackAdapterWithAdapterMacro: function() {
		this._classAdapter = new hex_event_ClassAdapter();
		this._classAdapter.setCallBackMethod(this,$bind(this,this.macroCallbackTest));
		this._classAdapter.setAdapterClass(hex_event__$ClassAdapterTest_MockMacroAdapterStrategy);
		this._classAdapter.setFactoryMethod(this,$bind(this,this.factoryForMacroClass));
		this.triggerCallbackAdapterWithMacro(this._classAdapter.getCallbackAdapter());
	}
	,triggerCallbackAdapterWithMacro: function(callbackAdapter) {
		var data0 = new hex_event__$ClassAdapterTest_MockValueObject("hola");
		var data1 = new hex_event__$ClassAdapterTest_MockValueObject("mundo");
		callbackAdapter([data0,data1]);
	}
	,factoryForMacroClass: function(adapterClass) {
		var m = Type.createInstance(adapterClass,[]);
		var me = new hex_control_macro_MacroExecutor();
		me.injector = new hex_di_Injector();
		m.macroExecutor = me;
		return m;
	}
	,macroCallbackTest: function(args) {
		hex_unittest_assertion_Assert.equals("hola!",args[0].value,"'getCallbackAdapter' should return 'hola'",{ fileName : "ClassAdapterTest.hx", lineNumber : 101, className : "hex.event.ClassAdapterTest", methodName : "macroCallbackTest"});
		hex_unittest_assertion_Assert.equals("mundo!",args[1].value,"'getCallbackAdapter' should return 'mundo'",{ fileName : "ClassAdapterTest.hx", lineNumber : 102, className : "hex.event.ClassAdapterTest", methodName : "macroCallbackTest"});
	}
	,__class__: hex_event_ClassAdapterTest
};
var hex_event__$ClassAdapterTest_MockAdapterClass = function() {
};
$hxClasses["hex.event._ClassAdapterTest.MockAdapterClass"] = hex_event__$ClassAdapterTest_MockAdapterClass;
hex_event__$ClassAdapterTest_MockAdapterClass.__name__ = ["hex","event","_ClassAdapterTest","MockAdapterClass"];
hex_event__$ClassAdapterTest_MockAdapterClass.__interfaces__ = [hex_event_IAdapterStrategy];
hex_event__$ClassAdapterTest_MockAdapterClass.prototype = {
	adapt: function(args) {
		return ["test",1,args[0],args[1]];
	}
	,__class__: hex_event__$ClassAdapterTest_MockAdapterClass
};
var hex_event__$ClassAdapterTest_MockAdapterClassForFactory = function(value) {
	this._value = value;
};
$hxClasses["hex.event._ClassAdapterTest.MockAdapterClassForFactory"] = hex_event__$ClassAdapterTest_MockAdapterClassForFactory;
hex_event__$ClassAdapterTest_MockAdapterClassForFactory.__name__ = ["hex","event","_ClassAdapterTest","MockAdapterClassForFactory"];
hex_event__$ClassAdapterTest_MockAdapterClassForFactory.__interfaces__ = [hex_event_IAdapterStrategy];
hex_event__$ClassAdapterTest_MockAdapterClassForFactory.prototype = {
	_value: null
	,adapt: function(args) {
		return ["test" + this._value,1 + this._value,args[0] + this._value,args[1] + this._value];
	}
	,__class__: hex_event__$ClassAdapterTest_MockAdapterClassForFactory
};
var hex_event_MacroAdapterStrategy = function(target,method) {
	this._target = target;
	this._method = method;
	hex_control_macro_Macro.call(this);
};
$hxClasses["hex.event.MacroAdapterStrategy"] = hex_event_MacroAdapterStrategy;
hex_event_MacroAdapterStrategy.__name__ = ["hex","event","MacroAdapterStrategy"];
hex_event_MacroAdapterStrategy.__interfaces__ = [hex_event_IAdapterStrategy];
hex_event_MacroAdapterStrategy.__super__ = hex_control_macro_Macro;
hex_event_MacroAdapterStrategy.prototype = $extend(hex_control_macro_Macro.prototype,{
	_target: null
	,_method: null
	,_result: null
	,adapt: function(args) {
		return Reflect.callMethod(this._target,this._method,args);
	}
	,getResult: function() {
		return this._result;
	}
	,__class__: hex_event_MacroAdapterStrategy
});
var hex_event__$ClassAdapterTest_MockMacroAdapterStrategy = function() {
	hex_event_MacroAdapterStrategy.call(this,this,$bind(this,this.onAdapt));
};
$hxClasses["hex.event._ClassAdapterTest.MockMacroAdapterStrategy"] = hex_event__$ClassAdapterTest_MockMacroAdapterStrategy;
hex_event__$ClassAdapterTest_MockMacroAdapterStrategy.__name__ = ["hex","event","_ClassAdapterTest","MockMacroAdapterStrategy"];
hex_event__$ClassAdapterTest_MockMacroAdapterStrategy.__super__ = hex_event_MacroAdapterStrategy;
hex_event__$ClassAdapterTest_MockMacroAdapterStrategy.prototype = $extend(hex_event_MacroAdapterStrategy.prototype,{
	data0: null
	,data1: null
	,_prepare: function() {
		this.add(hex_event__$ClassAdapterTest_MockAsyncCommand).withPayloads([new hex_control_payload_ExecutionPayload(this.data0,hex_event__$ClassAdapterTest_MockValueObject)]);
		this.add(hex_event__$ClassAdapterTest_MockAsyncCommand).withPayloads([new hex_control_payload_ExecutionPayload(this.data1,hex_event__$ClassAdapterTest_MockValueObject)]);
	}
	,onAdapt: function(data0,data1) {
		this.data0 = data0;
		this.data1 = data1;
	}
	,getResult: function() {
		return [this.data0,this.data1];
	}
	,__class__: hex_event__$ClassAdapterTest_MockMacroAdapterStrategy
});
var hex_event__$ClassAdapterTest_MockValueObject = function(value) {
	this.value = value;
};
$hxClasses["hex.event._ClassAdapterTest.MockValueObject"] = hex_event__$ClassAdapterTest_MockValueObject;
hex_event__$ClassAdapterTest_MockValueObject.__name__ = ["hex","event","_ClassAdapterTest","MockValueObject"];
hex_event__$ClassAdapterTest_MockValueObject.prototype = {
	value: null
	,__class__: hex_event__$ClassAdapterTest_MockValueObject
};
var hex_event__$ClassAdapterTest_MockAsyncCommand = function() {
	hex_control_async_AsyncCommand.call(this);
};
$hxClasses["hex.event._ClassAdapterTest.MockAsyncCommand"] = hex_event__$ClassAdapterTest_MockAsyncCommand;
hex_event__$ClassAdapterTest_MockAsyncCommand.__name__ = ["hex","event","_ClassAdapterTest","MockAsyncCommand"];
hex_event__$ClassAdapterTest_MockAsyncCommand.__super__ = hex_control_async_AsyncCommand;
hex_event__$ClassAdapterTest_MockAsyncCommand.prototype = $extend(hex_control_async_AsyncCommand.prototype,{
	data: null
	,execute: function(request) {
		this.data.value += "!";
		this._handleComplete();
	}
	,__class__: hex_event__$ClassAdapterTest_MockAsyncCommand
});
var hex_event_CompositeClosureDispatcherTest = function() { };
$hxClasses["hex.event.CompositeClosureDispatcherTest"] = hex_event_CompositeClosureDispatcherTest;
hex_event_CompositeClosureDispatcherTest.__name__ = ["hex","event","CompositeClosureDispatcherTest"];
hex_event_CompositeClosureDispatcherTest.prototype = {
	_dispatcher: null
	,setUp: function() {
		this._dispatcher = new hex_event_CompositeDispatcher();
	}
	,tearDown: function() {
		this._dispatcher = null;
	}
	,__class__: hex_event_CompositeClosureDispatcherTest
};
var hex_event_CompositeDispatcher = function() {
	this._isSealed = false;
	this._cachedMethodCalls = [];
	this._dispatchers = [];
};
$hxClasses["hex.event.CompositeDispatcher"] = hex_event_CompositeDispatcher;
hex_event_CompositeDispatcher.__name__ = ["hex","event","CompositeDispatcher"];
hex_event_CompositeDispatcher.__interfaces__ = [hex_event_IDispatcher];
hex_event_CompositeDispatcher.prototype = {
	_dispatchers: null
	,_isSealed: null
	,_cachedMethodCalls: null
	,dispatch: function(messageType,data) {
		this._seal(true);
		var _g = 0;
		var _g1 = this._dispatchers;
		while(_g < _g1.length) {
			var dispatcher = _g1[_g];
			++_g;
			dispatcher.dispatch(messageType,data);
		}
		this._seal(false);
	}
	,addHandler: function(messageType,scope,callback) {
		if(!this._isSealed) {
			var b = false;
			var _g = 0;
			var _g1 = this._dispatchers;
			while(_g < _g1.length) {
				var dispatcher = _g1[_g];
				++_g;
				b = dispatcher.addHandler(messageType,scope,callback) || b;
			}
			return b;
		} else {
			this._cachedMethodCalls.push((function(f,a1,a2,a3) {
				return function() {
					return f(a1,a2,a3);
				};
			})($bind(this,this.addHandler),messageType,scope,callback));
			return false;
		}
	}
	,removeHandler: function(messageType,scope,callback) {
		if(!this._isSealed) {
			var b = false;
			var _g = 0;
			var _g1 = this._dispatchers;
			while(_g < _g1.length) {
				var dispatcher = _g1[_g];
				++_g;
				b = dispatcher.removeHandler(messageType,scope,callback) || b;
			}
			return b;
		} else {
			this._cachedMethodCalls.push((function(f,a1,a2,a3) {
				return function() {
					return f(a1,a2,a3);
				};
			})($bind(this,this.removeHandler),messageType,scope,callback));
			return false;
		}
	}
	,addListener: function(listener) {
		throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException("'addListener' is not supported in '" + hex_log_Stringifier.stringify(this) + "'",{ fileName : "CompositeDispatcher.hx", lineNumber : 75, className : "hex.event.CompositeDispatcher", methodName : "addListener"}));
	}
	,removeListener: function(listener) {
		throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException("'removeListener' is not supported in '" + hex_log_Stringifier.stringify(this) + "'",{ fileName : "CompositeDispatcher.hx", lineNumber : 80, className : "hex.event.CompositeDispatcher", methodName : "removeListener"}));
	}
	,removeAllListeners: function() {
		if(!this._isSealed) {
			var _g = 0;
			var _g1 = this._dispatchers;
			while(_g < _g1.length) {
				var dispatcher = _g1[_g];
				++_g;
				dispatcher.removeAllListeners();
			}
		} else this._cachedMethodCalls.push((function(f) {
			return function() {
				f();
			};
		})($bind(this,this.removeAllListeners)));
	}
	,isEmpty: function() {
		var _g = 0;
		var _g1 = this._dispatchers;
		while(_g < _g1.length) {
			var dispatcher = _g1[_g];
			++_g;
			if(!dispatcher.isEmpty()) return false;
		}
		return true;
	}
	,isRegistered: function(listener,messageType) {
		throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException("'isRegistered' is not supported in '" + hex_log_Stringifier.stringify(this) + "'",{ fileName : "CompositeDispatcher.hx", lineNumber : 112, className : "hex.event.CompositeDispatcher", methodName : "isRegistered"}));
	}
	,hasHandler: function(messageType,scope) {
		var b = false;
		var _g = 0;
		var _g1 = this._dispatchers;
		while(_g < _g1.length) {
			var dispatcher = _g1[_g];
			++_g;
			b = dispatcher.hasHandler(messageType,scope) || b;
		}
		return b;
	}
	,add: function(dispatcher) {
		if(!this._isSealed) {
			if(HxOverrides.indexOf(this._dispatchers,dispatcher,0) == -1) {
				this._dispatchers.push(dispatcher);
				return true;
			} else return false;
		} else {
			this._cachedMethodCalls.push((function(f,a1) {
				return function() {
					return f(a1);
				};
			})($bind(this,this.add),dispatcher));
			return false;
		}
	}
	,remove: function(dispatcher) {
		if(!this._isSealed) {
			var index = HxOverrides.indexOf(this._dispatchers,dispatcher,0);
			if(index != -1) {
				this._dispatchers.splice(index,1);
				return true;
			} else return false;
		} else {
			this._cachedMethodCalls.push((function(f,a1) {
				return function() {
					return f(a1);
				};
			})($bind(this,this.remove),dispatcher));
			return false;
		}
	}
	,_seal: function(isSealed) {
		if(isSealed != this._isSealed) {
			this._isSealed = isSealed;
			if(!this._isSealed && this._cachedMethodCalls.length > 0) {
				var _g = 0;
				var _g1 = this._cachedMethodCalls;
				while(_g < _g1.length) {
					var cachedMethodCall = _g1[_g];
					++_g;
					cachedMethodCall();
				}
				this._cachedMethodCalls = [];
			}
		}
	}
	,__class__: hex_event_CompositeDispatcher
};
var hex_event_CoreEventSuite = function() {
	this.list = [hex_event_DynamicDispatcherTest,hex_event_BasicEventTest,hex_event_CompositeClosureDispatcherTest,hex_event_DispatcherTest,hex_event_EventDispatcherTest,hex_event_LightweightListenerDispatcherTest,hex_event_LightweightClosureDispatcherTest];
};
$hxClasses["hex.event.CoreEventSuite"] = hex_event_CoreEventSuite;
hex_event_CoreEventSuite.__name__ = ["hex","event","CoreEventSuite"];
hex_event_CoreEventSuite.prototype = {
	list: null
	,__class__: hex_event_CoreEventSuite
};
var hex_event_DispatcherTest = function() { };
$hxClasses["hex.event.DispatcherTest"] = hex_event_DispatcherTest;
hex_event_DispatcherTest.__name__ = ["hex","event","DispatcherTest"];
hex_event_DispatcherTest.prototype = {
	_dispatcher: null
	,_listener: null
	,setUp: function() {
		this._dispatcher = new hex_event_Dispatcher();
		this._listener = new hex_event__$DispatcherTest_MockEventListener();
	}
	,tearDown: function() {
		this._dispatcher = null;
		this._listener = null;
	}
	,testAddListener: function() {
		var messageType = new hex_event_MessageType("onMessage");
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.addListener(this._listener),"'addListener' call should return true",{ fileName : "DispatcherTest.hx", lineNumber : 34, className : "hex.event.DispatcherTest", methodName : "testAddListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.addListener(this._listener),"Same 'addListener' calls should return false second time",{ fileName : "DispatcherTest.hx", lineNumber : 35, className : "hex.event.DispatcherTest", methodName : "testAddListener"});
		this._dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,1,"Message should be received once",{ fileName : "DispatcherTest.hx", lineNumber : 39, className : "hex.event.DispatcherTest", methodName : "testAddListener"});
		hex_unittest_assertion_Assert.deepEquals(["something",7],this._listener.lastDataReceived,"Message content received should be the same that was dispatched",{ fileName : "DispatcherTest.hx", lineNumber : 40, className : "hex.event.DispatcherTest", methodName : "testAddListener"});
		this._dispatcher.dispatch(messageType,["somethingElse",13]);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,2,"Message should be received twice",{ fileName : "DispatcherTest.hx", lineNumber : 44, className : "hex.event.DispatcherTest", methodName : "testAddListener"});
		hex_unittest_assertion_Assert.deepEquals(["somethingElse",13],this._listener.lastDataReceived,"Message content received should be the same that was dispatched",{ fileName : "DispatcherTest.hx", lineNumber : 45, className : "hex.event.DispatcherTest", methodName : "testAddListener"});
		this._dispatcher.removeListener(this._listener);
		this._dispatcher.addHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage)));
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,this._dispatcher,($_=this._dispatcher,$bind($_,$_.addListener)),[this._listener],"'addListener' should throw IllegalArgumentException when 'addHandler' was used previously on the same target",{ fileName : "DispatcherTest.hx", lineNumber : 50, className : "hex.event.DispatcherTest", methodName : "testAddListener"});
	}
	,testRemoveListener: function() {
		var messageType = new hex_event_MessageType();
		this._dispatcher.addListener(this._listener);
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.removeListener(this._listener),"'removeListener' call should return true",{ fileName : "DispatcherTest.hx", lineNumber : 59, className : "hex.event.DispatcherTest", methodName : "testRemoveListener"});
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,0,"Message should not been received",{ fileName : "DispatcherTest.hx", lineNumber : 64, className : "hex.event.DispatcherTest", methodName : "testRemoveListener"});
		hex_unittest_assertion_Assert.isNull(this._listener.lastDataReceived,"Message should null",{ fileName : "DispatcherTest.hx", lineNumber : 65, className : "hex.event.DispatcherTest", methodName : "testRemoveListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.removeListener(this._listener),"Same 'removeListener' call should return false second time",{ fileName : "DispatcherTest.hx", lineNumber : 66, className : "hex.event.DispatcherTest", methodName : "testRemoveListener"});
		this._dispatcher.addHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage)));
		this._dispatcher.removeListener(this._listener);
		this._dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,0,"Message should not be received",{ fileName : "DispatcherTest.hx", lineNumber : 72, className : "hex.event.DispatcherTest", methodName : "testRemoveListener"});
		hex_unittest_assertion_Assert.isNull(this._listener.lastDataReceived,"Message received should be null",{ fileName : "DispatcherTest.hx", lineNumber : 73, className : "hex.event.DispatcherTest", methodName : "testRemoveListener"});
	}
	,testAddHandler: function() {
		var messageType = new hex_event_MessageType();
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.addHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage))),"'addHandler' call should return true",{ fileName : "DispatcherTest.hx", lineNumber : 81, className : "hex.event.DispatcherTest", methodName : "testAddHandler"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.addHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage))),"Same 'addHandler' calls should return false second time",{ fileName : "DispatcherTest.hx", lineNumber : 82, className : "hex.event.DispatcherTest", methodName : "testAddHandler"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.addHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onSameMessage))),"'addHandler' call should return true",{ fileName : "DispatcherTest.hx", lineNumber : 83, className : "hex.event.DispatcherTest", methodName : "testAddHandler"});
		this._dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,2,"Message should be received twice",{ fileName : "DispatcherTest.hx", lineNumber : 87, className : "hex.event.DispatcherTest", methodName : "testAddHandler"});
		hex_unittest_assertion_Assert.deepEquals(["something",7],this._listener.lastDataReceived,"Message content received should be the same that was dispatched",{ fileName : "DispatcherTest.hx", lineNumber : 88, className : "hex.event.DispatcherTest", methodName : "testAddHandler"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.removeHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onSameMessage))),"'removeHandler' call should return true",{ fileName : "DispatcherTest.hx", lineNumber : 90, className : "hex.event.DispatcherTest", methodName : "testAddHandler"});
		this._dispatcher.dispatch(messageType,["somethingElse",13]);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,3,"Message should be received twice",{ fileName : "DispatcherTest.hx", lineNumber : 94, className : "hex.event.DispatcherTest", methodName : "testAddHandler"});
		hex_unittest_assertion_Assert.deepEquals(["somethingElse",13],this._listener.lastDataReceived,"Message content should be the same that was dispatched",{ fileName : "DispatcherTest.hx", lineNumber : 95, className : "hex.event.DispatcherTest", methodName : "testAddHandler"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.removeHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage))),"'removeHandler' call should return true",{ fileName : "DispatcherTest.hx", lineNumber : 97, className : "hex.event.DispatcherTest", methodName : "testAddHandler"});
		this._dispatcher.addListener(this._listener);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,this._dispatcher,($_=this._dispatcher,$bind($_,$_.addHandler)),[messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage))],"'addHandler' should throw IllegalArgumentException when addListener was used previously",{ fileName : "DispatcherTest.hx", lineNumber : 99, className : "hex.event.DispatcherTest", methodName : "testAddHandler"});
	}
	,testRemoveHandler: function() {
		var messageType = new hex_event_MessageType();
		this._dispatcher.addHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage)));
		this._dispatcher.addHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onSameMessage)));
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.removeHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage))),"'removeHandler' call should return true",{ fileName : "DispatcherTest.hx", lineNumber : 109, className : "hex.event.DispatcherTest", methodName : "testRemoveHandler"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.removeHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage))),"'removeHandler' call should return false second time",{ fileName : "DispatcherTest.hx", lineNumber : 110, className : "hex.event.DispatcherTest", methodName : "testRemoveHandler"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.removeHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onSameMessage))),"'removeHandler' call should return true",{ fileName : "DispatcherTest.hx", lineNumber : 111, className : "hex.event.DispatcherTest", methodName : "testRemoveHandler"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.removeHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onSameMessage))),"'removeHandler' call should return false second time",{ fileName : "DispatcherTest.hx", lineNumber : 112, className : "hex.event.DispatcherTest", methodName : "testRemoveHandler"});
		this._dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,0,"Message should be received once",{ fileName : "DispatcherTest.hx", lineNumber : 116, className : "hex.event.DispatcherTest", methodName : "testRemoveHandler"});
		hex_unittest_assertion_Assert.isNull(this._listener.lastDataReceived,"Message received should be null",{ fileName : "DispatcherTest.hx", lineNumber : 117, className : "hex.event.DispatcherTest", methodName : "testRemoveHandler"});
	}
	,testIsEmptyWithAddHandler: function() {
		var messageType = new hex_event_MessageType();
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 125, className : "hex.event.DispatcherTest", methodName : "testIsEmptyWithAddHandler"});
		this._dispatcher.addHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage)));
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isEmpty(),"'isEmpty' should return false",{ fileName : "DispatcherTest.hx", lineNumber : 127, className : "hex.event.DispatcherTest", methodName : "testIsEmptyWithAddHandler"});
		this._dispatcher.removeHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage)));
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 129, className : "hex.event.DispatcherTest", methodName : "testIsEmptyWithAddHandler"});
	}
	,testIsEmptyWithAddListener: function() {
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 135, className : "hex.event.DispatcherTest", methodName : "testIsEmptyWithAddListener"});
		this._dispatcher.addListener(this._listener);
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isEmpty(),"'isEmpty' should return false",{ fileName : "DispatcherTest.hx", lineNumber : 137, className : "hex.event.DispatcherTest", methodName : "testIsEmptyWithAddListener"});
		this._dispatcher.removeListener(this._listener);
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 139, className : "hex.event.DispatcherTest", methodName : "testIsEmptyWithAddListener"});
	}
	,testDispatch: function() {
		var messageType = new hex_event_MessageType();
		var dispatcher = new hex_event_Dispatcher();
		var mockListener = new hex_event__$DispatcherTest_MockListener();
		dispatcher.addListener(mockListener);
		var message = new hex_event_MessageType();
		dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(mockListener.eventReceivedCount,1,"Message should be received once",{ fileName : "DispatcherTest.hx", lineNumber : 154, className : "hex.event.DispatcherTest", methodName : "testDispatch"});
		hex_unittest_assertion_Assert.deepEquals(["something",7],mockListener.lastEventReceived,"Message content should be the same that was dispatched",{ fileName : "DispatcherTest.hx", lineNumber : 155, className : "hex.event.DispatcherTest", methodName : "testDispatch"});
		var anotherMessageType = new hex_event_MessageType();
		dispatcher.dispatch(anotherMessageType,["somethingElse",13]);
		hex_unittest_assertion_Assert.equals(mockListener.eventReceivedCount,2,"Message should have been received twice",{ fileName : "DispatcherTest.hx", lineNumber : 160, className : "hex.event.DispatcherTest", methodName : "testDispatch"});
		hex_unittest_assertion_Assert.deepEquals(["somethingElse",13],mockListener.lastEventReceived,"Message content received should be the same that was dispatched",{ fileName : "DispatcherTest.hx", lineNumber : 161, className : "hex.event.DispatcherTest", methodName : "testDispatch"});
	}
	,testRemoveAllListeners: function() {
		var messageType = new hex_event_MessageType();
		this._dispatcher.addListener(this._listener);
		this._dispatcher.removeAllListeners();
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 171, className : "hex.event.DispatcherTest", methodName : "testRemoveAllListeners"});
		this._dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,0,"Message should not have been received",{ fileName : "DispatcherTest.hx", lineNumber : 174, className : "hex.event.DispatcherTest", methodName : "testRemoveAllListeners"});
		hex_unittest_assertion_Assert.isNull(this._listener.lastDataReceived,"Message received should be null",{ fileName : "DispatcherTest.hx", lineNumber : 175, className : "hex.event.DispatcherTest", methodName : "testRemoveAllListeners"});
	}
	,testIsRegistered: function() {
		var messageType = new hex_event_MessageType();
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return false",{ fileName : "DispatcherTest.hx", lineNumber : 183, className : "hex.event.DispatcherTest", methodName : "testIsRegistered"});
		this._dispatcher.addListener(this._listener);
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 185, className : "hex.event.DispatcherTest", methodName : "testIsRegistered"});
		this._dispatcher.removeAllListeners();
		this._dispatcher.addHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage)));
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 189, className : "hex.event.DispatcherTest", methodName : "testIsRegistered"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isRegistered(this._listener,messageType),"'isRegistered' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 190, className : "hex.event.DispatcherTest", methodName : "testIsRegistered"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isRegistered(this._listener,new hex_event_MessageType()),"'isRegistered' should return false",{ fileName : "DispatcherTest.hx", lineNumber : 191, className : "hex.event.DispatcherTest", methodName : "testIsRegistered"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isRegistered(new hex_event__$DispatcherTest_MockEventListener(),messageType),"'isRegistered' should return false",{ fileName : "DispatcherTest.hx", lineNumber : 192, className : "hex.event.DispatcherTest", methodName : "testIsRegistered"});
	}
	,testHasHandler: function() {
		var messageType = new hex_event_MessageType();
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasHandler(messageType),"'hasHandler' should return false",{ fileName : "DispatcherTest.hx", lineNumber : 200, className : "hex.event.DispatcherTest", methodName : "testHasHandler"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasHandler(messageType,this._listener),"'hasHandler' should return false",{ fileName : "DispatcherTest.hx", lineNumber : 201, className : "hex.event.DispatcherTest", methodName : "testHasHandler"});
		this._dispatcher.addListener(this._listener);
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasHandler(messageType),"'hasHandler' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 203, className : "hex.event.DispatcherTest", methodName : "testHasHandler"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasHandler(messageType,this._listener),"'hasHandler' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 204, className : "hex.event.DispatcherTest", methodName : "testHasHandler"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasHandler(new hex_event_MessageType()),"'hasHandler' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 205, className : "hex.event.DispatcherTest", methodName : "testHasHandler"});
		this._dispatcher.removeAllListeners();
		this._dispatcher.addHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage)));
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasHandler(messageType),"'hasHandler' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 209, className : "hex.event.DispatcherTest", methodName : "testHasHandler"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasHandler(messageType,this._listener),"'hasHandler' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 210, className : "hex.event.DispatcherTest", methodName : "testHasHandler"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasHandler(new hex_event_MessageType()),"'hasHandler' should return false",{ fileName : "DispatcherTest.hx", lineNumber : 211, className : "hex.event.DispatcherTest", methodName : "testHasHandler"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasHandler(new hex_event_MessageType(),($_=new hex_event__$DispatcherTest_MockEventListener(),$bind($_,$_.onMessage))),"'hasHandler' should return false",{ fileName : "DispatcherTest.hx", lineNumber : 212, className : "hex.event.DispatcherTest", methodName : "testHasHandler"});
	}
	,testSealActivationOnRemoveListener: function() {
		var messageType = new hex_event_MessageType();
		var mockEventListener = new hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveListener(this._dispatcher,this._listener);
		this._dispatcher.addListener(mockEventListener);
		this._dispatcher.addListener(this._listener);
		this._dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(1,this._listener.eventReceivedCount,"Event should be received once",{ fileName : "DispatcherTest.hx", lineNumber : 225, className : "hex.event.DispatcherTest", methodName : "testSealActivationOnRemoveListener"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 226, className : "hex.event.DispatcherTest", methodName : "testSealActivationOnRemoveListener"});
	}
	,testSealActivationOnAddListener: function() {
		var messageType = new hex_event_MessageType();
		var mockEventListener = new hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddListener(this._dispatcher,this._listener);
		this._dispatcher.addListener(mockEventListener);
		var mockListener = new hex_event__$DispatcherTest_MockEventListener();
		this._dispatcher.addListener(mockListener);
		this._dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(0,this._listener.eventReceivedCount,"Message shouldn't be received",{ fileName : "DispatcherTest.hx", lineNumber : 240, className : "hex.event.DispatcherTest", methodName : "testSealActivationOnAddListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return false",{ fileName : "DispatcherTest.hx", lineNumber : 241, className : "hex.event.DispatcherTest", methodName : "testSealActivationOnAddListener"});
	}
	,testSealActivationOnRemoveHandler: function() {
		var messageType = new hex_event_MessageType();
		var mockEventListener = new hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener(this._dispatcher,this._listener,messageType);
		this._dispatcher.addHandler(messageType,mockEventListener,$bind(mockEventListener,mockEventListener.onMessage));
		this._dispatcher.addHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage)));
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasHandler(messageType,this._listener),"'hasHandler' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 252, className : "hex.event.DispatcherTest", methodName : "testSealActivationOnRemoveHandler"});
		this._dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(1,this._listener.eventReceivedCount,"Message should have beeen received once",{ fileName : "DispatcherTest.hx", lineNumber : 255, className : "hex.event.DispatcherTest", methodName : "testSealActivationOnRemoveHandler"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasHandler(messageType,this._listener),"'hasHandler' should return false",{ fileName : "DispatcherTest.hx", lineNumber : 256, className : "hex.event.DispatcherTest", methodName : "testSealActivationOnRemoveHandler"});
	}
	,testSealActivationOnAddHandler: function() {
		var messageType = new hex_event_MessageType();
		var mockEventListener = new hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddEventListener(this._dispatcher,this._listener,messageType);
		this._dispatcher.addHandler(messageType,mockEventListener,$bind(mockEventListener,mockEventListener.onMessage));
		var mockListener = new hex_event__$DispatcherTest_MockEventListener();
		this._dispatcher.addHandler(messageType,mockListener,$bind(mockListener,mockListener.onMessage));
		this._dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(0,this._listener.eventReceivedCount,"Message shouldn't have been received",{ fileName : "DispatcherTest.hx", lineNumber : 270, className : "hex.event.DispatcherTest", methodName : "testSealActivationOnAddHandler"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasHandler(messageType,this._listener),"'hasHandler' should return true",{ fileName : "DispatcherTest.hx", lineNumber : 271, className : "hex.event.DispatcherTest", methodName : "testSealActivationOnAddHandler"});
	}
	,testSealActivationOnRemoveAllListeners: function() {
		var messageType = new hex_event_MessageType();
		var mockEventListener = new hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners(this._dispatcher,this._listener);
		this._dispatcher.addHandler(messageType,mockEventListener,$bind(mockEventListener,mockEventListener.onMessage));
		this._dispatcher.addHandler(messageType,this._listener,($_=this._listener,$bind($_,$_.onMessage)));
		this._dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(1,this._listener.eventReceivedCount,"Message should have been received once",{ fileName : "DispatcherTest.hx", lineNumber : 284, className : "hex.event.DispatcherTest", methodName : "testSealActivationOnRemoveAllListeners"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasHandler(messageType,($_=this._listener,$bind($_,$_.onMessage))),"'hasHandler' should return false",{ fileName : "DispatcherTest.hx", lineNumber : 285, className : "hex.event.DispatcherTest", methodName : "testSealActivationOnRemoveAllListeners"});
	}
	,testDispatchWithHandleMessageCallback: function() {
		var messageType = new hex_event_MessageType();
		var dispatcher = new hex_event_Dispatcher();
		var mockListener = new hex_event__$DispatcherTest_MockHandleMessageListener();
		var anotherMockListener = new hex_event__$DispatcherTest_MockHandleMessageListener();
		dispatcher.addListener(mockListener);
		dispatcher.addListener(anotherMockListener);
		var message = new hex_event_MessageType("messageTypeName");
		dispatcher.dispatch(messageType,["something",7]);
		hex_unittest_assertion_Assert.equals(mockListener.eventReceivedCount,1,"Message should be received once",{ fileName : "DispatcherTest.hx", lineNumber : 302, className : "hex.event.DispatcherTest", methodName : "testDispatchWithHandleMessageCallback"});
		hex_unittest_assertion_Assert.equals(messageType,mockListener.messageTypeReceived,"MessageType received should be the same",{ fileName : "DispatcherTest.hx", lineNumber : 303, className : "hex.event.DispatcherTest", methodName : "testDispatchWithHandleMessageCallback"});
		hex_unittest_assertion_Assert.deepEquals(["something",7],mockListener.lastDataReceived,"Message content should be the same that was dispatched",{ fileName : "DispatcherTest.hx", lineNumber : 304, className : "hex.event.DispatcherTest", methodName : "testDispatchWithHandleMessageCallback"});
		hex_unittest_assertion_Assert.equals(anotherMockListener.eventReceivedCount,1,"Message should be received once",{ fileName : "DispatcherTest.hx", lineNumber : 306, className : "hex.event.DispatcherTest", methodName : "testDispatchWithHandleMessageCallback"});
		hex_unittest_assertion_Assert.equals(messageType,anotherMockListener.messageTypeReceived,"MessageType received should be the same",{ fileName : "DispatcherTest.hx", lineNumber : 307, className : "hex.event.DispatcherTest", methodName : "testDispatchWithHandleMessageCallback"});
		hex_unittest_assertion_Assert.deepEquals(["something",7],anotherMockListener.lastDataReceived,"Message content should be the same that was dispatched",{ fileName : "DispatcherTest.hx", lineNumber : 308, className : "hex.event.DispatcherTest", methodName : "testDispatchWithHandleMessageCallback"});
		dispatcher.removeListener(anotherMockListener);
		var anotherMessageType = new hex_event_MessageType("anotherMessageTypeName");
		dispatcher.dispatch(anotherMessageType,["somethingElse",13]);
		hex_unittest_assertion_Assert.equals(mockListener.eventReceivedCount,2,"Message should have been received twice",{ fileName : "DispatcherTest.hx", lineNumber : 314, className : "hex.event.DispatcherTest", methodName : "testDispatchWithHandleMessageCallback"});
		hex_unittest_assertion_Assert.equals(anotherMessageType,mockListener.messageTypeReceived,"MessageType received should be the same",{ fileName : "DispatcherTest.hx", lineNumber : 315, className : "hex.event.DispatcherTest", methodName : "testDispatchWithHandleMessageCallback"});
		hex_unittest_assertion_Assert.deepEquals(["somethingElse",13],mockListener.lastDataReceived,"Message content received should be the same that was dispatched",{ fileName : "DispatcherTest.hx", lineNumber : 316, className : "hex.event.DispatcherTest", methodName : "testDispatchWithHandleMessageCallback"});
		hex_unittest_assertion_Assert.equals(anotherMockListener.eventReceivedCount,1,"Message should be received once",{ fileName : "DispatcherTest.hx", lineNumber : 318, className : "hex.event.DispatcherTest", methodName : "testDispatchWithHandleMessageCallback"});
		hex_unittest_assertion_Assert.equals(messageType,anotherMockListener.messageTypeReceived,"MessageType received should be the same",{ fileName : "DispatcherTest.hx", lineNumber : 319, className : "hex.event.DispatcherTest", methodName : "testDispatchWithHandleMessageCallback"});
		hex_unittest_assertion_Assert.deepEquals(["something",7],anotherMockListener.lastDataReceived,"Message content should be the same that was dispatched",{ fileName : "DispatcherTest.hx", lineNumber : 320, className : "hex.event.DispatcherTest", methodName : "testDispatchWithHandleMessageCallback"});
	}
	,__class__: hex_event_DispatcherTest
};
var hex_event__$DispatcherTest_MockHandleMessageListener = function() {
	this.lastDataReceived = null;
	this.eventReceivedCount = 0;
};
$hxClasses["hex.event._DispatcherTest.MockHandleMessageListener"] = hex_event__$DispatcherTest_MockHandleMessageListener;
hex_event__$DispatcherTest_MockHandleMessageListener.__name__ = ["hex","event","_DispatcherTest","MockHandleMessageListener"];
hex_event__$DispatcherTest_MockHandleMessageListener.prototype = {
	messageTypeReceived: null
	,eventReceivedCount: null
	,lastDataReceived: null
	,handleMessage: function(messageType,s,i) {
		this.eventReceivedCount++;
		this.messageTypeReceived = messageType;
		this.lastDataReceived = [s,i];
	}
	,__class__: hex_event__$DispatcherTest_MockHandleMessageListener
};
var hex_event__$DispatcherTest_IMockListener = function() { };
$hxClasses["hex.event._DispatcherTest.IMockListener"] = hex_event__$DispatcherTest_IMockListener;
hex_event__$DispatcherTest_IMockListener.__name__ = ["hex","event","_DispatcherTest","IMockListener"];
hex_event__$DispatcherTest_IMockListener.prototype = {
	onMessage: null
	,__class__: hex_event__$DispatcherTest_IMockListener
};
var hex_event__$DispatcherTest_MockListener = function() {
	this.lastEventReceived = null;
	this.eventReceivedCount = 0;
};
$hxClasses["hex.event._DispatcherTest.MockListener"] = hex_event__$DispatcherTest_MockListener;
hex_event__$DispatcherTest_MockListener.__name__ = ["hex","event","_DispatcherTest","MockListener"];
hex_event__$DispatcherTest_MockListener.__interfaces__ = [hex_event__$DispatcherTest_IMockListener];
hex_event__$DispatcherTest_MockListener.prototype = {
	messageTypeReceived: null
	,eventReceivedCount: null
	,lastEventReceived: null
	,handleMessage: function(messageType,s,i) {
		this.messageTypeReceived = messageType;
		this.eventReceivedCount++;
		this.lastEventReceived = [s,i];
	}
	,onMessage: function(s,i) {
	}
	,__class__: hex_event__$DispatcherTest_MockListener
};
var hex_event__$DispatcherTest_MockEventListener = function() {
	this.lastDataReceived = null;
	this.eventReceivedCount = 0;
};
$hxClasses["hex.event._DispatcherTest.MockEventListener"] = hex_event__$DispatcherTest_MockEventListener;
hex_event__$DispatcherTest_MockEventListener.__name__ = ["hex","event","_DispatcherTest","MockEventListener"];
hex_event__$DispatcherTest_MockEventListener.__interfaces__ = [hex_event__$DispatcherTest_IMockListener];
hex_event__$DispatcherTest_MockEventListener.prototype = {
	messageTypeReceived: null
	,eventReceivedCount: null
	,lastDataReceived: null
	,onMessage: function(s,i) {
		this.eventReceivedCount++;
		this.lastDataReceived = [s,i];
	}
	,onSameMessage: function(s,i) {
		this.eventReceivedCount++;
		this.lastDataReceived = [s,i];
	}
	,handleMessage: function(messageType,s,i) {
		this.messageTypeReceived = messageType;
		this.eventReceivedCount++;
		this.lastDataReceived = [s,i];
	}
	,emptyMethod: function() {
	}
	,__class__: hex_event__$DispatcherTest_MockEventListener
};
var hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveListener = function(dispatcher,listener) {
	hex_event__$DispatcherTest_MockEventListener.call(this);
	this.dispatcher = dispatcher;
	this.listener = listener;
};
$hxClasses["hex.event._DispatcherTest.MockEventListenerForTestingSealingOnRemoveListener"] = hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveListener;
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveListener.__name__ = ["hex","event","_DispatcherTest","MockEventListenerForTestingSealingOnRemoveListener"];
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveListener.__super__ = hex_event__$DispatcherTest_MockEventListener;
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveListener.prototype = $extend(hex_event__$DispatcherTest_MockEventListener.prototype,{
	dispatcher: null
	,listener: null
	,onMessage: function(s,i) {
		hex_event__$DispatcherTest_MockEventListener.prototype.onMessage.call(this,s,i);
		this.dispatcher.removeListener(this.listener);
	}
	,__class__: hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveListener
});
var hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddListener = function(dispatcher,listener) {
	hex_event__$DispatcherTest_MockEventListener.call(this);
	this.dispatcher = dispatcher;
	this.listener = listener;
};
$hxClasses["hex.event._DispatcherTest.MockEventListenerForTestingSealingOnAddListener"] = hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddListener;
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddListener.__name__ = ["hex","event","_DispatcherTest","MockEventListenerForTestingSealingOnAddListener"];
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddListener.__super__ = hex_event__$DispatcherTest_MockEventListener;
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddListener.prototype = $extend(hex_event__$DispatcherTest_MockEventListener.prototype,{
	dispatcher: null
	,listener: null
	,onMessage: function(s,i) {
		hex_event__$DispatcherTest_MockEventListener.prototype.onMessage.call(this,s,i);
		this.dispatcher.addListener(this.listener);
	}
	,__class__: hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddListener
});
var hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener = function(dispatcher,listener,messageType) {
	hex_event__$DispatcherTest_MockEventListener.call(this);
	this.dispatcher = dispatcher;
	this.listener = listener;
	this.messageType = messageType;
};
$hxClasses["hex.event._DispatcherTest.MockEventListenerForTestingSealingOnRemoveEventListener"] = hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener;
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener.__name__ = ["hex","event","_DispatcherTest","MockEventListenerForTestingSealingOnRemoveEventListener"];
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener.__super__ = hex_event__$DispatcherTest_MockEventListener;
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener.prototype = $extend(hex_event__$DispatcherTest_MockEventListener.prototype,{
	dispatcher: null
	,listener: null
	,messageType: null
	,onMessage: function(s,i) {
		hex_event__$DispatcherTest_MockEventListener.prototype.onMessage.call(this,s,i);
		this.dispatcher.removeHandler(this.messageType,this.listener,($_=this.listener,$bind($_,$_.onMessage)));
	}
	,__class__: hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener
});
var hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddEventListener = function(dispatcher,listener,messageType) {
	hex_event__$DispatcherTest_MockEventListener.call(this);
	this.dispatcher = dispatcher;
	this.listener = listener;
	this.messageType = messageType;
};
$hxClasses["hex.event._DispatcherTest.MockEventListenerForTestingSealingOnAddEventListener"] = hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddEventListener;
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddEventListener.__name__ = ["hex","event","_DispatcherTest","MockEventListenerForTestingSealingOnAddEventListener"];
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddEventListener.__super__ = hex_event__$DispatcherTest_MockEventListener;
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddEventListener.prototype = $extend(hex_event__$DispatcherTest_MockEventListener.prototype,{
	dispatcher: null
	,listener: null
	,messageType: null
	,onMessage: function(s,i) {
		hex_event__$DispatcherTest_MockEventListener.prototype.onMessage.call(this,s,i);
		this.dispatcher.addHandler(this.messageType,this.listener,($_=this.listener,$bind($_,$_.onMessage)));
	}
	,__class__: hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnAddEventListener
});
var hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners = function(dispatcher,listener) {
	hex_event__$DispatcherTest_MockEventListener.call(this);
	this.dispatcher = dispatcher;
	this.listener = listener;
};
$hxClasses["hex.event._DispatcherTest.MockEventListenerForTestingSealingOnRemoveAllListeners"] = hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners;
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners.__name__ = ["hex","event","_DispatcherTest","MockEventListenerForTestingSealingOnRemoveAllListeners"];
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners.__super__ = hex_event__$DispatcherTest_MockEventListener;
hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners.prototype = $extend(hex_event__$DispatcherTest_MockEventListener.prototype,{
	dispatcher: null
	,listener: null
	,onMessage: function(s,i) {
		hex_event__$DispatcherTest_MockEventListener.prototype.onMessage.call(this,s,i);
		this.dispatcher.removeAllListeners();
	}
	,__class__: hex_event__$DispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners
});
var hex_event_DynamicDispatcherTest = function() { };
$hxClasses["hex.event.DynamicDispatcherTest"] = hex_event_DynamicDispatcherTest;
hex_event_DynamicDispatcherTest.__name__ = ["hex","event","DynamicDispatcherTest"];
var hex_event_IEventDispatcher = function() { };
$hxClasses["hex.event.IEventDispatcher"] = hex_event_IEventDispatcher;
hex_event_IEventDispatcher.__name__ = ["hex","event","IEventDispatcher"];
hex_event_IEventDispatcher.prototype = {
	dispatchEvent: null
	,addEventListener: null
	,removeEventListener: null
	,addListener: null
	,removeListener: null
	,removeAllListeners: null
	,isEmpty: null
	,isRegistered: null
	,hasEventListener: null
	,__class__: hex_event_IEventDispatcher
};
var hex_event_EventDispatcher = function() {
	this._isSealed = false;
	this._cachedMethodCalls = [];
	this._listeners = [];
	this._closures = new haxe_ds_StringMap();
	this._closureSize = 0;
};
$hxClasses["hex.event.EventDispatcher"] = hex_event_EventDispatcher;
hex_event_EventDispatcher.__name__ = ["hex","event","EventDispatcher"];
hex_event_EventDispatcher.__interfaces__ = [hex_event_IEventDispatcher];
hex_event_EventDispatcher.prototype = {
	_isSealed: null
	,_cachedMethodCalls: null
	,_listeners: null
	,_closures: null
	,_closureSize: null
	,dispatchEvent: function(e) {
		this._seal(true);
		var eventType = e.type;
		var listeners = this._listeners.slice();
		var _g = 0;
		while(_g < listeners.length) {
			var listener = listeners[_g];
			++_g;
			var callback = Reflect.field(listener,eventType);
			if(callback != null) callback.apply(listener,[e]); else {
				var handleEvent = Reflect.field(listener,"handleEvent");
				if(handleEvent != null) handleEvent.apply(listener,[e]); else {
					var msg = hex_log_Stringifier.stringify(this) + ".dispatchEvent failed. " + " You must implement '" + eventType + "' method or 'handleEvent' method in '" + hex_log_Stringifier.stringify(listener) + "' instance.";
					throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException(msg,{ fileName : "EventDispatcher.hx", lineNumber : 54, className : "hex.event.EventDispatcher", methodName : "dispatchEvent"}));
				}
			}
		}
		if(this._closures.exists(eventType)) {
			var callbacks;
			var _this = this._closures.get(eventType);
			callbacks = _this.slice();
			var _g1 = 0;
			while(_g1 < callbacks.length) {
				var f = callbacks[_g1];
				++_g1;
				f(e);
			}
		}
		this._seal(false);
	}
	,addEventListener: function(eventType,callback) {
		if(!this._isSealed) {
			if(!this._closures.exists(eventType)) this._closures.set(eventType,[]);
			var callbacks = this._closures.get(eventType);
			var index = HxOverrides.indexOf(callbacks,callback,0);
			if(index == -1) {
				callbacks.push(callback);
				this._closureSize++;
				return true;
			} else return false;
		} else {
			this._cachedMethodCalls.push((function(f,a1,a2) {
				return function() {
					return f(a1,a2);
				};
			})($bind(this,this.addEventListener),eventType,callback));
			return false;
		}
	}
	,removeEventListener: function(eventType,callback) {
		if(!this._isSealed) {
			if(!this._closures.exists(eventType)) return false;
			var callbacks = this._closures.get(eventType);
			var index = HxOverrides.indexOf(callbacks,callback,0);
			if(index == -1) return false; else {
				callbacks.splice(index,1);
				this._closureSize--;
				if(callbacks.length == 0) this._closures.remove(eventType);
				return true;
			}
		} else {
			this._cachedMethodCalls.push((function(f,a1,a2) {
				return function() {
					return f(a1,a2);
				};
			})($bind(this,this.removeEventListener),eventType,callback));
			return false;
		}
	}
	,addListener: function(listener) {
		if(!this._isSealed) {
			var index = HxOverrides.indexOf(this._listeners,listener,0);
			if(index == -1) {
				this._listeners.push(listener);
				return true;
			} else return false;
		} else {
			this._cachedMethodCalls.push((function(f,a1) {
				return function() {
					return f(a1);
				};
			})($bind(this,this.addListener),listener));
			return false;
		}
	}
	,removeListener: function(listener) {
		if(!this._isSealed) {
			var index = HxOverrides.indexOf(this._listeners,listener,0);
			if(index == -1) return false; else {
				this._listeners.splice(index,1);
				return true;
			}
		} else {
			this._cachedMethodCalls.push((function(f,a1) {
				return function() {
					return f(a1);
				};
			})($bind(this,this.removeListener),listener));
			return false;
		}
	}
	,removeAllListeners: function() {
		if(!this._isSealed) {
			this._listeners = [];
			this._closures = new haxe_ds_StringMap();
			this._closureSize = 0;
		} else this._cachedMethodCalls.push((function(f) {
			return function() {
				f();
			};
		})($bind(this,this.removeAllListeners)));
	}
	,isEmpty: function() {
		return this._listeners.length == 0 && this._closureSize == 0;
	}
	,isRegistered: function(listener,eventType) {
		return HxOverrides.indexOf(this._listeners,listener,0) != -1;
	}
	,hasEventListener: function(eventType,callback) {
		if(!this._closures.exists(eventType)) return false;
		if(callback == null) return true; else return (function($this) {
			var $r;
			var _this = $this._closures.get(eventType);
			$r = HxOverrides.indexOf(_this,callback,0);
			return $r;
		}(this)) != -1;
	}
	,_seal: function(isSealed) {
		if(isSealed != this._isSealed) {
			this._isSealed = isSealed;
			if(!this._isSealed && this._cachedMethodCalls.length > 0) {
				var _g = 0;
				var _g1 = this._cachedMethodCalls;
				while(_g < _g1.length) {
					var cachedMethodCall = _g1[_g];
					++_g;
					cachedMethodCall();
				}
				this._cachedMethodCalls = [];
			}
		}
	}
	,__class__: hex_event_EventDispatcher
};
var hex_event_EventDispatcherTest = function() { };
$hxClasses["hex.event.EventDispatcherTest"] = hex_event_EventDispatcherTest;
hex_event_EventDispatcherTest.__name__ = ["hex","event","EventDispatcherTest"];
hex_event_EventDispatcherTest.prototype = {
	_dispatcher: null
	,_listener: null
	,setUp: function() {
		this._dispatcher = new hex_event_EventDispatcher();
		this._listener = new hex_event__$EventDispatcherTest_MockEventListener();
	}
	,tearDown: function() {
		this._dispatcher = null;
		this._listener = null;
	}
	,testAddListener: function() {
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.addListener(this._listener),"'addListener' call should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 33, className : "hex.event.EventDispatcherTest", methodName : "testAddListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.addListener(this._listener),"Same 'addListener' calls should return false second time",{ fileName : "EventDispatcherTest.hx", lineNumber : 34, className : "hex.event.EventDispatcherTest", methodName : "testAddListener"});
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,1,"Event should be received once",{ fileName : "EventDispatcherTest.hx", lineNumber : 38, className : "hex.event.EventDispatcherTest", methodName : "testAddListener"});
		hex_unittest_assertion_Assert.equals(this._listener.lastEventReceived,event,"Event received should be the same that was dispatched",{ fileName : "EventDispatcherTest.hx", lineNumber : 39, className : "hex.event.EventDispatcherTest", methodName : "testAddListener"});
		var anotherEvent = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(anotherEvent);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,2,"Event should be received twice",{ fileName : "EventDispatcherTest.hx", lineNumber : 44, className : "hex.event.EventDispatcherTest", methodName : "testAddListener"});
		hex_unittest_assertion_Assert.equals(this._listener.lastEventReceived,anotherEvent,"Event received should be the same that was dispatched",{ fileName : "EventDispatcherTest.hx", lineNumber : 45, className : "hex.event.EventDispatcherTest", methodName : "testAddListener"});
	}
	,testRemoveListener: function() {
		this._dispatcher.addListener(this._listener);
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.removeListener(this._listener),"'removeListener' call should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 52, className : "hex.event.EventDispatcherTest", methodName : "testRemoveListener"});
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,0,"Event should not been received",{ fileName : "EventDispatcherTest.hx", lineNumber : 57, className : "hex.event.EventDispatcherTest", methodName : "testRemoveListener"});
		hex_unittest_assertion_Assert.isNull(this._listener.lastEventReceived,"Event received should be null",{ fileName : "EventDispatcherTest.hx", lineNumber : 58, className : "hex.event.EventDispatcherTest", methodName : "testRemoveListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.removeListener(this._listener),"Same 'removeListener' call should return false second time",{ fileName : "EventDispatcherTest.hx", lineNumber : 59, className : "hex.event.EventDispatcherTest", methodName : "testRemoveListener"});
	}
	,testAddEventListener: function() {
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'addEventListener' call should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 65, className : "hex.event.EventDispatcherTest", methodName : "testAddEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"Same 'addEventListener' calls should return false second time",{ fileName : "EventDispatcherTest.hx", lineNumber : 66, className : "hex.event.EventDispatcherTest", methodName : "testAddEventListener"});
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,1,"Event should be received once",{ fileName : "EventDispatcherTest.hx", lineNumber : 70, className : "hex.event.EventDispatcherTest", methodName : "testAddEventListener"});
		hex_unittest_assertion_Assert.equals(this._listener.lastEventReceived,event,"Event received should be the same that was dispatched",{ fileName : "EventDispatcherTest.hx", lineNumber : 71, className : "hex.event.EventDispatcherTest", methodName : "testAddEventListener"});
		var anotherEvent = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(anotherEvent);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,2,"Event should be received twice",{ fileName : "EventDispatcherTest.hx", lineNumber : 76, className : "hex.event.EventDispatcherTest", methodName : "testAddEventListener"});
		hex_unittest_assertion_Assert.equals(this._listener.lastEventReceived,anotherEvent,"Event received should be the same that was dispatched",{ fileName : "EventDispatcherTest.hx", lineNumber : 77, className : "hex.event.EventDispatcherTest", methodName : "testAddEventListener"});
	}
	,testRemoveEventListener: function() {
		this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent)));
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.removeEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'removeEventListener' call should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 84, className : "hex.event.EventDispatcherTest", methodName : "testRemoveEventListener"});
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,0,"Event should be received once",{ fileName : "EventDispatcherTest.hx", lineNumber : 89, className : "hex.event.EventDispatcherTest", methodName : "testRemoveEventListener"});
		hex_unittest_assertion_Assert.isNull(this._listener.lastEventReceived,"Event received should be null",{ fileName : "EventDispatcherTest.hx", lineNumber : 90, className : "hex.event.EventDispatcherTest", methodName : "testRemoveEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.removeEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"Same 'removeEventListener' call should return false second time",{ fileName : "EventDispatcherTest.hx", lineNumber : 91, className : "hex.event.EventDispatcherTest", methodName : "testRemoveEventListener"});
	}
	,testIsEmptyWithAddEventListener: function() {
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 97, className : "hex.event.EventDispatcherTest", methodName : "testIsEmptyWithAddEventListener"});
		this._dispatcher.addEventListener("eventType",($_=this._listener,$bind($_,$_.onEvent)));
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isEmpty(),"'isEmpty' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 99, className : "hex.event.EventDispatcherTest", methodName : "testIsEmptyWithAddEventListener"});
		this._dispatcher.removeEventListener("eventType",($_=this._listener,$bind($_,$_.onEvent)));
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 101, className : "hex.event.EventDispatcherTest", methodName : "testIsEmptyWithAddEventListener"});
	}
	,testIsEmptyWithAddListener: function() {
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 107, className : "hex.event.EventDispatcherTest", methodName : "testIsEmptyWithAddListener"});
		this._dispatcher.addListener(this._listener);
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isEmpty(),"'isEmpty' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 109, className : "hex.event.EventDispatcherTest", methodName : "testIsEmptyWithAddListener"});
		this._dispatcher.removeListener(this._listener);
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 111, className : "hex.event.EventDispatcherTest", methodName : "testIsEmptyWithAddListener"});
	}
	,testDispatchEvent: function() {
		var dispatcher = new hex_event_EventDispatcher();
		var mockListener = new hex_event__$EventDispatcherTest_MockListener();
		dispatcher.addListener(mockListener);
		var event = new hex_event_BasicEvent("onEvent",dispatcher);
		dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(mockListener.eventReceivedCount,1,"Event should be received once",{ fileName : "EventDispatcherTest.hx", lineNumber : 124, className : "hex.event.EventDispatcherTest", methodName : "testDispatchEvent"});
		hex_unittest_assertion_Assert.equals(mockListener.lastEventReceived,event,"Event received should be the same that was dispatched",{ fileName : "EventDispatcherTest.hx", lineNumber : 125, className : "hex.event.EventDispatcherTest", methodName : "testDispatchEvent"});
		var anotherEvent = new hex_event_BasicEvent("onEvent",this._dispatcher);
		dispatcher.dispatchEvent(anotherEvent);
		hex_unittest_assertion_Assert.equals(mockListener.eventReceivedCount,2,"Event should be received twice",{ fileName : "EventDispatcherTest.hx", lineNumber : 130, className : "hex.event.EventDispatcherTest", methodName : "testDispatchEvent"});
		hex_unittest_assertion_Assert.equals(mockListener.lastEventReceived,anotherEvent,"Event received should be the same that was dispatched",{ fileName : "EventDispatcherTest.hx", lineNumber : 131, className : "hex.event.EventDispatcherTest", methodName : "testDispatchEvent"});
	}
	,testRemoveAllListeners: function() {
		this._dispatcher.addListener(this._listener);
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.removeAllListeners();
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 141, className : "hex.event.EventDispatcherTest", methodName : "testRemoveAllListeners"});
		this._dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,0,"Event should be received once",{ fileName : "EventDispatcherTest.hx", lineNumber : 144, className : "hex.event.EventDispatcherTest", methodName : "testRemoveAllListeners"});
		hex_unittest_assertion_Assert.isNull(this._listener.lastEventReceived,"Event received should be the same that was dispatched",{ fileName : "EventDispatcherTest.hx", lineNumber : 145, className : "hex.event.EventDispatcherTest", methodName : "testRemoveAllListeners"});
	}
	,testIsRegistered: function() {
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 151, className : "hex.event.EventDispatcherTest", methodName : "testIsRegistered"});
		this._dispatcher.addListener(this._listener);
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 153, className : "hex.event.EventDispatcherTest", methodName : "testIsRegistered"});
		this._dispatcher.removeAllListeners();
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 156, className : "hex.event.EventDispatcherTest", methodName : "testIsRegistered"});
		this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent)));
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 158, className : "hex.event.EventDispatcherTest", methodName : "testIsRegistered"});
	}
	,testHasEventListener: function() {
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onEvent"),"'hasEventListener' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 164, className : "hex.event.EventDispatcherTest", methodName : "testHasEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'hasEventListener' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 165, className : "hex.event.EventDispatcherTest", methodName : "testHasEventListener"});
		this._dispatcher.addListener(this._listener);
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onEvent"),"'hasEventListener' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 167, className : "hex.event.EventDispatcherTest", methodName : "testHasEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'hasEventListener' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 168, className : "hex.event.EventDispatcherTest", methodName : "testHasEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onAnotherEvent"),"'hasEventListener' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 169, className : "hex.event.EventDispatcherTest", methodName : "testHasEventListener"});
		this._dispatcher.removeAllListeners();
		this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent)));
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasEventListener("onEvent"),"'hasEventListener' should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 173, className : "hex.event.EventDispatcherTest", methodName : "testHasEventListener"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'hasEventListener' should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 174, className : "hex.event.EventDispatcherTest", methodName : "testHasEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onAnotherEvent"),"'hasEventListener' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 175, className : "hex.event.EventDispatcherTest", methodName : "testHasEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onAnotherEvent",($_=new hex_event__$EventDispatcherTest_MockEventListener(),$bind($_,$_.onEvent))),"'hasEventListener' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 176, className : "hex.event.EventDispatcherTest", methodName : "testHasEventListener"});
	}
	,testSealActivationOnRemoveListener: function() {
		var mockEventListener = new hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener(this._listener);
		this._dispatcher.addListener(mockEventListener);
		this._dispatcher.addListener(this._listener);
		this._dispatcher.dispatchEvent(new hex_event_BasicEvent("onEvent",this._dispatcher));
		hex_unittest_assertion_Assert.equals(1,this._listener.eventReceivedCount,"Event should be received once",{ fileName : "EventDispatcherTest.hx", lineNumber : 187, className : "hex.event.EventDispatcherTest", methodName : "testSealActivationOnRemoveListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 188, className : "hex.event.EventDispatcherTest", methodName : "testSealActivationOnRemoveListener"});
	}
	,testSealActivationOnAddListener: function() {
		var mockEventListener = new hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddListener(this._listener);
		this._dispatcher.addListener(mockEventListener);
		var mockListener = new hex_event__$EventDispatcherTest_MockEventListener();
		this._dispatcher.addListener(mockListener);
		this._dispatcher.dispatchEvent(new hex_event_BasicEvent("onEvent",this._dispatcher));
		hex_unittest_assertion_Assert.equals(0,this._listener.eventReceivedCount,"Event shouldn't be received",{ fileName : "EventDispatcherTest.hx", lineNumber : 200, className : "hex.event.EventDispatcherTest", methodName : "testSealActivationOnAddListener"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 201, className : "hex.event.EventDispatcherTest", methodName : "testSealActivationOnAddListener"});
	}
	,testSealActivationOnRemoveEventListener: function() {
		var mockEventListener = new hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener(this._listener);
		this._dispatcher.addEventListener("onEvent",$bind(mockEventListener,mockEventListener.onEvent));
		this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent)));
		this._dispatcher.dispatchEvent(new hex_event_BasicEvent("onEvent",this._dispatcher));
		hex_unittest_assertion_Assert.equals(1,this._listener.eventReceivedCount,"Event should be received once",{ fileName : "EventDispatcherTest.hx", lineNumber : 212, className : "hex.event.EventDispatcherTest", methodName : "testSealActivationOnRemoveEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'hasEventListener' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 213, className : "hex.event.EventDispatcherTest", methodName : "testSealActivationOnRemoveEventListener"});
	}
	,testSealActivationOnAddEventListener: function() {
		var mockEventListener = new hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener(this._listener);
		this._dispatcher.addEventListener("onEvent",$bind(mockEventListener,mockEventListener.onEvent));
		var mockListener = new hex_event__$EventDispatcherTest_MockEventListener();
		this._dispatcher.addEventListener("onEvent",$bind(mockListener,mockListener.onEvent));
		this._dispatcher.dispatchEvent(new hex_event_BasicEvent("onEvent",this._dispatcher));
		hex_unittest_assertion_Assert.equals(0,this._listener.eventReceivedCount,"Event shouldn't be received",{ fileName : "EventDispatcherTest.hx", lineNumber : 225, className : "hex.event.EventDispatcherTest", methodName : "testSealActivationOnAddEventListener"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'hasEventListener' should return true",{ fileName : "EventDispatcherTest.hx", lineNumber : 226, className : "hex.event.EventDispatcherTest", methodName : "testSealActivationOnAddEventListener"});
	}
	,testSealActivationOnRemoveAllListeners: function() {
		var mockEventListener = new hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners();
		this._dispatcher.addEventListener("onEvent",$bind(mockEventListener,mockEventListener.onEvent));
		this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent)));
		this._dispatcher.dispatchEvent(new hex_event_BasicEvent("onEvent",this._dispatcher));
		hex_unittest_assertion_Assert.equals(1,this._listener.eventReceivedCount,"Event should be received once",{ fileName : "EventDispatcherTest.hx", lineNumber : 237, className : "hex.event.EventDispatcherTest", methodName : "testSealActivationOnRemoveAllListeners"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'hasEventListener' should return false",{ fileName : "EventDispatcherTest.hx", lineNumber : 238, className : "hex.event.EventDispatcherTest", methodName : "testSealActivationOnRemoveAllListeners"});
	}
	,__class__: hex_event_EventDispatcherTest
};
var hex_event_IEventListener = function() { };
$hxClasses["hex.event.IEventListener"] = hex_event_IEventListener;
hex_event_IEventListener.__name__ = ["hex","event","IEventListener"];
hex_event_IEventListener.prototype = {
	handleEvent: null
	,__class__: hex_event_IEventListener
};
var hex_event__$EventDispatcherTest_IMockEventListener = function() { };
$hxClasses["hex.event._EventDispatcherTest.IMockEventListener"] = hex_event__$EventDispatcherTest_IMockEventListener;
hex_event__$EventDispatcherTest_IMockEventListener.__name__ = ["hex","event","_EventDispatcherTest","IMockEventListener"];
hex_event__$EventDispatcherTest_IMockEventListener.__interfaces__ = [hex_event_IEventListener];
hex_event__$EventDispatcherTest_IMockEventListener.prototype = {
	onEvent: null
	,__class__: hex_event__$EventDispatcherTest_IMockEventListener
};
var hex_event__$EventDispatcherTest_MockEventListener = function() {
	this.lastEventReceived = null;
	this.eventReceivedCount = 0;
};
$hxClasses["hex.event._EventDispatcherTest.MockEventListener"] = hex_event__$EventDispatcherTest_MockEventListener;
hex_event__$EventDispatcherTest_MockEventListener.__name__ = ["hex","event","_EventDispatcherTest","MockEventListener"];
hex_event__$EventDispatcherTest_MockEventListener.__interfaces__ = [hex_event__$EventDispatcherTest_IMockEventListener];
hex_event__$EventDispatcherTest_MockEventListener.prototype = {
	eventReceivedCount: null
	,lastEventReceived: null
	,onEvent: function(e) {
		this.eventReceivedCount++;
		this.lastEventReceived = e;
	}
	,handleEvent: function(e) {
		this.eventReceivedCount++;
		this.lastEventReceived = e;
	}
	,__class__: hex_event__$EventDispatcherTest_MockEventListener
};
var hex_event__$EventDispatcherTest_MockListener = function() {
	this.lastEventReceived = null;
	this.eventReceivedCount = 0;
};
$hxClasses["hex.event._EventDispatcherTest.MockListener"] = hex_event__$EventDispatcherTest_MockListener;
hex_event__$EventDispatcherTest_MockListener.__name__ = ["hex","event","_EventDispatcherTest","MockListener"];
hex_event__$EventDispatcherTest_MockListener.__interfaces__ = [hex_event_IEventListener];
hex_event__$EventDispatcherTest_MockListener.prototype = {
	eventReceivedCount: null
	,lastEventReceived: null
	,handleEvent: function(e) {
		this.eventReceivedCount++;
		this.lastEventReceived = e;
	}
	,__class__: hex_event__$EventDispatcherTest_MockListener
};
var hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener = function(listener) {
	hex_event__$EventDispatcherTest_MockEventListener.call(this);
	this.listener = listener;
};
$hxClasses["hex.event._EventDispatcherTest.MockEventListenerForTestingSealingOnRemoveListener"] = hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener;
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener.__name__ = ["hex","event","_EventDispatcherTest","MockEventListenerForTestingSealingOnRemoveListener"];
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener.__super__ = hex_event__$EventDispatcherTest_MockEventListener;
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener.prototype = $extend(hex_event__$EventDispatcherTest_MockEventListener.prototype,{
	listener: null
	,onEvent: function(e) {
		hex_event__$EventDispatcherTest_MockEventListener.prototype.onEvent.call(this,e);
		e.target.removeListener(this.listener);
	}
	,__class__: hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener
});
var hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddListener = function(listener) {
	hex_event__$EventDispatcherTest_MockEventListener.call(this);
	this.listener = listener;
};
$hxClasses["hex.event._EventDispatcherTest.MockEventListenerForTestingSealingOnAddListener"] = hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddListener;
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddListener.__name__ = ["hex","event","_EventDispatcherTest","MockEventListenerForTestingSealingOnAddListener"];
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddListener.__super__ = hex_event__$EventDispatcherTest_MockEventListener;
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddListener.prototype = $extend(hex_event__$EventDispatcherTest_MockEventListener.prototype,{
	listener: null
	,onEvent: function(e) {
		hex_event__$EventDispatcherTest_MockEventListener.prototype.onEvent.call(this,e);
		e.target.addListener(this.listener);
	}
	,__class__: hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddListener
});
var hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener = function(listener) {
	hex_event__$EventDispatcherTest_MockEventListener.call(this);
	this.listener = listener;
};
$hxClasses["hex.event._EventDispatcherTest.MockEventListenerForTestingSealingOnRemoveEventListener"] = hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener;
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener.__name__ = ["hex","event","_EventDispatcherTest","MockEventListenerForTestingSealingOnRemoveEventListener"];
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener.__super__ = hex_event__$EventDispatcherTest_MockEventListener;
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener.prototype = $extend(hex_event__$EventDispatcherTest_MockEventListener.prototype,{
	listener: null
	,onEvent: function(e) {
		hex_event__$EventDispatcherTest_MockEventListener.prototype.onEvent.call(this,e);
		e.target.removeEventListener("onEvent",($_=this.listener,$bind($_,$_.onEvent)));
	}
	,__class__: hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener
});
var hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener = function(listener) {
	hex_event__$EventDispatcherTest_MockEventListener.call(this);
	this.listener = listener;
};
$hxClasses["hex.event._EventDispatcherTest.MockEventListenerForTestingSealingOnAddEventListener"] = hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener;
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener.__name__ = ["hex","event","_EventDispatcherTest","MockEventListenerForTestingSealingOnAddEventListener"];
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener.__super__ = hex_event__$EventDispatcherTest_MockEventListener;
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener.prototype = $extend(hex_event__$EventDispatcherTest_MockEventListener.prototype,{
	listener: null
	,onEvent: function(e) {
		hex_event__$EventDispatcherTest_MockEventListener.prototype.onEvent.call(this,e);
		e.target.addEventListener("onEvent",($_=this.listener,$bind($_,$_.onEvent)));
	}
	,__class__: hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener
});
var hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners = function() {
	hex_event__$EventDispatcherTest_MockEventListener.call(this);
};
$hxClasses["hex.event._EventDispatcherTest.MockEventListenerForTestingSealingOnRemoveAllListeners"] = hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners;
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners.__name__ = ["hex","event","_EventDispatcherTest","MockEventListenerForTestingSealingOnRemoveAllListeners"];
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners.__super__ = hex_event__$EventDispatcherTest_MockEventListener;
hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners.prototype = $extend(hex_event__$EventDispatcherTest_MockEventListener.prototype,{
	onEvent: function(e) {
		hex_event__$EventDispatcherTest_MockEventListener.prototype.onEvent.call(this,e);
		e.target.removeAllListeners();
	}
	,__class__: hex_event__$EventDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners
});
var hex_event_EventProxy = function(scope,method) {
	this.scope = scope;
	this.callback = method;
};
$hxClasses["hex.event.EventProxy"] = hex_event_EventProxy;
hex_event_EventProxy.__name__ = ["hex","event","EventProxy"];
hex_event_EventProxy.prototype = {
	scope: null
	,callback: null
	,handleCallback: function(args) {
		if(this.scope != null && this.callback != null) Reflect.callMethod(this.scope,this.callback,args); else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("handleCallback call failed with method '" + Std.string(this.callback) + " and scope '" + Std.string(this.scope) + "'",{ fileName : "EventProxy.hx", lineNumber : 28, className : "hex.event.EventProxy", methodName : "handleCallback"}));
	}
	,__class__: hex_event_EventProxy
};
var hex_event_EventProxyTest = function() { };
$hxClasses["hex.event.EventProxyTest"] = hex_event_EventProxyTest;
hex_event_EventProxyTest.__name__ = ["hex","event","EventProxyTest"];
hex_event_EventProxyTest.prototype = {
	testEventProxyconstructor: function() {
		var target = new hex_event__$EventProxyTest_MockEventProxyTarget();
		var eventProxy = new hex_event_EventProxy(target,$bind(target,target.stubMethod));
		hex_unittest_assertion_Assert.equals(target,eventProxy.scope,"scope should be the same",{ fileName : "EventProxyTest.hx", lineNumber : 17, className : "hex.event.EventProxyTest", methodName : "testEventProxyconstructor"});
		hex_unittest_assertion_Assert.equals($bind(target,target.stubMethod),eventProxy.callback,"callback should be the same",{ fileName : "EventProxyTest.hx", lineNumber : 18, className : "hex.event.EventProxyTest", methodName : "testEventProxyconstructor"});
	}
	,testEventProxyHandlingCallback: function() {
		var target = new hex_event__$EventProxyTest_MockEventProxyTarget();
		var eventProxy = new hex_event_EventProxy(target,$bind(target,target.stubMethod));
		var parameters = [new hex_event__$EventProxyTest_MockParameter(),new hex_event__$EventProxyTest_MockParameter()];
		eventProxy.handleCallback(parameters);
		hex_unittest_assertion_Assert.deepEquals(parameters,target.parameters,"parameters should be the same",{ fileName : "EventProxyTest.hx", lineNumber : 28, className : "hex.event.EventProxyTest", methodName : "testEventProxyHandlingCallback"});
	}
	,__class__: hex_event_EventProxyTest
};
var hex_event__$EventProxyTest_MockEventProxyTarget = function() {
};
$hxClasses["hex.event._EventProxyTest.MockEventProxyTarget"] = hex_event__$EventProxyTest_MockEventProxyTarget;
hex_event__$EventProxyTest_MockEventProxyTarget.__name__ = ["hex","event","_EventProxyTest","MockEventProxyTarget"];
hex_event__$EventProxyTest_MockEventProxyTarget.prototype = {
	parameters: null
	,stubMethod: function(param0,param1) {
		this.parameters = [param0,param1];
	}
	,__class__: hex_event__$EventProxyTest_MockEventProxyTarget
};
var hex_event__$EventProxyTest_MockParameter = function() {
};
$hxClasses["hex.event._EventProxyTest.MockParameter"] = hex_event__$EventProxyTest_MockParameter;
hex_event__$EventProxyTest_MockParameter.__name__ = ["hex","event","_EventProxyTest","MockParameter"];
hex_event__$EventProxyTest_MockParameter.prototype = {
	__class__: hex_event__$EventProxyTest_MockParameter
};
var hex_event_EventSuite = function() {
	this.list = [hex_event_MethodRunnerEventTest,hex_event_TestRunnerEventTest];
};
$hxClasses["hex.event.EventSuite"] = hex_event_EventSuite;
hex_event_EventSuite.__name__ = ["hex","event","EventSuite"];
hex_event_EventSuite.prototype = {
	list: null
	,__class__: hex_event_EventSuite
};
var hex_event_LightweightClosureDispatcher = function() {
	this._callbacks = new haxe_ds_StringMap();
	this._callbackSize = 0;
};
$hxClasses["hex.event.LightweightClosureDispatcher"] = hex_event_LightweightClosureDispatcher;
hex_event_LightweightClosureDispatcher.__name__ = ["hex","event","LightweightClosureDispatcher"];
hex_event_LightweightClosureDispatcher.__interfaces__ = [hex_event_IEventDispatcher];
hex_event_LightweightClosureDispatcher.prototype = {
	_callbacks: null
	,_callbackSize: null
	,dispatchEvent: function(e) {
		var eventType = e.type;
		if(this._callbacks.exists(eventType)) {
			var callbacks;
			var _this = this._callbacks.get(eventType);
			callbacks = _this.slice();
			var _g = 0;
			while(_g < callbacks.length) {
				var f = callbacks[_g];
				++_g;
				f(e);
			}
		}
	}
	,addEventListener: function(eventType,callback) {
		if(!this._callbacks.exists(eventType)) this._callbacks.set(eventType,[]);
		var callbacks = this._callbacks.get(eventType);
		var index = HxOverrides.indexOf(callbacks,callback,0);
		if(index == -1) {
			callbacks.push(callback);
			this._callbackSize++;
			return true;
		} else return false;
	}
	,removeEventListener: function(eventType,callback) {
		if(!this._callbacks.exists(eventType)) return false;
		var callbacks = this._callbacks.get(eventType);
		var index = HxOverrides.indexOf(callbacks,callback,0);
		if(index == -1) return false; else {
			callbacks.splice(index,1);
			this._callbackSize--;
			if(callbacks.length == 0) this._callbacks.remove(eventType);
			return true;
		}
	}
	,addListener: function(listener) {
		throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException("'addListener' is not supported in '" + hex_log_Stringifier.stringify(this) + "'",{ fileName : "LightweightClosureDispatcher.hx", lineNumber : 84, className : "hex.event.LightweightClosureDispatcher", methodName : "addListener"}));
	}
	,removeListener: function(listener) {
		throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException("'removeListener' is not supported in '" + hex_log_Stringifier.stringify(this) + "'",{ fileName : "LightweightClosureDispatcher.hx", lineNumber : 89, className : "hex.event.LightweightClosureDispatcher", methodName : "removeListener"}));
	}
	,removeAllListeners: function() {
		this._callbacks = new haxe_ds_StringMap();
		this._callbackSize = 0;
	}
	,isEmpty: function() {
		return this._callbackSize == 0;
	}
	,isRegistered: function(listener,eventType) {
		throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException("'isRegistered' is not supported in '" + hex_log_Stringifier.stringify(this) + "'",{ fileName : "LightweightClosureDispatcher.hx", lineNumber : 105, className : "hex.event.LightweightClosureDispatcher", methodName : "isRegistered"}));
	}
	,hasEventListener: function(eventType,callback) {
		if(!this._callbacks.exists(eventType)) return false;
		if(callback == null) return true; else return (function($this) {
			var $r;
			var _this = $this._callbacks.get(eventType);
			$r = HxOverrides.indexOf(_this,callback,0);
			return $r;
		}(this)) != -1;
	}
	,__class__: hex_event_LightweightClosureDispatcher
};
var hex_event_LightweightClosureDispatcherTest = function() { };
$hxClasses["hex.event.LightweightClosureDispatcherTest"] = hex_event_LightweightClosureDispatcherTest;
hex_event_LightweightClosureDispatcherTest.__name__ = ["hex","event","LightweightClosureDispatcherTest"];
hex_event_LightweightClosureDispatcherTest.prototype = {
	_dispatcher: null
	,_listener: null
	,setUp: function() {
		this._dispatcher = new hex_event_LightweightClosureDispatcher();
		this._listener = new hex_event__$LightweightClosureDispatcherTest_MockEventListener();
	}
	,tearDown: function() {
		this._dispatcher = null;
		this._listener = null;
	}
	,testAddListener: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_UnsupportedOperationException,this._dispatcher,($_=this._dispatcher,$bind($_,$_.addListener)),[this._listener],"addListener should throw UnsupportedOperationException",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 33, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testAddListener"});
	}
	,testRemoveListener: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_UnsupportedOperationException,this._dispatcher,($_=this._dispatcher,$bind($_,$_.removeListener)),[this._listener],"removeListener should throw UnsupportedOperationException",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 39, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testRemoveListener"});
	}
	,testAddEventListener: function() {
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'addEventListener' call should return true",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 45, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testAddEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"Same 'addEventListener' calls should return false second time",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 46, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testAddEventListener"});
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,1,"Event should be received once",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 50, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testAddEventListener"});
		hex_unittest_assertion_Assert.equals(this._listener.lastEventReceived,event,"Event received should be the same that was dispatched",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 51, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testAddEventListener"});
		var anotherEvent = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(anotherEvent);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,2,"Event should be received twice",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 56, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testAddEventListener"});
		hex_unittest_assertion_Assert.equals(this._listener.lastEventReceived,anotherEvent,"Event received should be the same that was dispatched",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 57, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testAddEventListener"});
	}
	,testRemoveEventListener: function() {
		this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent)));
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.removeEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'removeEventListener' call should return true",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 64, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testRemoveEventListener"});
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,0,"Event should be received once",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 69, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testRemoveEventListener"});
		hex_unittest_assertion_Assert.isNull(this._listener.lastEventReceived,"Event received should be the same that was dispatched",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 70, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testRemoveEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.removeEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"Same 'removeEventListener' call should return false second time",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 71, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testRemoveEventListener"});
	}
	,testIsEmptyWithAddEventListener: function() {
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 77, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testIsEmptyWithAddEventListener"});
		this._dispatcher.addEventListener("eventType",($_=this._listener,$bind($_,$_.onEvent)));
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isEmpty(),"'isEmpty' should return false",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 79, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testIsEmptyWithAddEventListener"});
		this._dispatcher.removeEventListener("eventType",($_=this._listener,$bind($_,$_.onEvent)));
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 81, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testIsEmptyWithAddEventListener"});
	}
	,testDispatchEvent: function() {
		this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent)));
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(1,this._listener.eventReceivedCount,"Event should be received once",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 92, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testDispatchEvent"});
		hex_unittest_assertion_Assert.equals(this._listener.lastEventReceived,event,"Event received should be the same that was dispatched",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 93, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testDispatchEvent"});
		var anotherEvent = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(anotherEvent);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,2,"Event should be received twice",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 98, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testDispatchEvent"});
		hex_unittest_assertion_Assert.equals(this._listener.lastEventReceived,anotherEvent,"Event received should be the same that was dispatched",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 99, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testDispatchEvent"});
	}
	,testRemoveAllListeners: function() {
		this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent)));
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.removeAllListeners();
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 109, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testRemoveAllListeners"});
		this._dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,0,"Event should be received once",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 112, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testRemoveAllListeners"});
		hex_unittest_assertion_Assert.isNull(this._listener.lastEventReceived,"Event received should be the same that was dispatched",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 113, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testRemoveAllListeners"});
	}
	,testIsRegistered: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_UnsupportedOperationException,this._dispatcher,($_=this._dispatcher,$bind($_,$_.isRegistered)),[this._listener],"isRegistered should throw UnsupportedOperationException",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 119, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testIsRegistered"});
	}
	,testHasEventListener: function() {
		this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent)));
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasEventListener("onEvent"),"'hasEventListener' should return true",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 126, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testHasEventListener"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'hasEventListener' should return true",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 127, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testHasEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onAnotherEvent"),"'hasEventListener' should return false",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 128, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testHasEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onAnotherEvent",($_=new hex_event__$LightweightClosureDispatcherTest_MockEventListener(),$bind($_,$_.onEvent))),"'hasEventListener' should return false",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 129, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testHasEventListener"});
	}
	,testSealActivationOnRemoveEventListener: function() {
		var mockEventListener = new hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener(this._listener);
		this._dispatcher.addEventListener("onEvent",$bind(mockEventListener,mockEventListener.onEvent));
		this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent)));
		this._dispatcher.dispatchEvent(new hex_event_BasicEvent("onEvent",this._dispatcher));
		hex_unittest_assertion_Assert.equals(1,this._listener.eventReceivedCount,"Event should be received once",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 140, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testSealActivationOnRemoveEventListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'hasEventListener' should return false",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 141, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testSealActivationOnRemoveEventListener"});
	}
	,testSealActivationOnAddEventListener: function() {
		var mockEventListener = new hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener(this._listener);
		this._dispatcher.addEventListener("onEvent",$bind(mockEventListener,mockEventListener.onEvent));
		var mockListener = new hex_event__$LightweightClosureDispatcherTest_MockEventListener();
		this._dispatcher.addEventListener("onEvent",$bind(mockListener,mockListener.onEvent));
		this._dispatcher.dispatchEvent(new hex_event_BasicEvent("onEvent",this._dispatcher));
		hex_unittest_assertion_Assert.equals(0,this._listener.eventReceivedCount,"Event shouldn't be received",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 153, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testSealActivationOnAddEventListener"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.hasEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'hasEventListener' should return true",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 154, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testSealActivationOnAddEventListener"});
	}
	,testSealActivationOnRemoveAllListeners: function() {
		var mockEventListener = new hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners();
		this._dispatcher.addEventListener("onEvent",$bind(mockEventListener,mockEventListener.onEvent));
		this._dispatcher.addEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent)));
		this._dispatcher.dispatchEvent(new hex_event_BasicEvent("onEvent",this._dispatcher));
		hex_unittest_assertion_Assert.equals(1,this._listener.eventReceivedCount,"Event should be received once",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 165, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testSealActivationOnRemoveAllListeners"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.hasEventListener("onEvent",($_=this._listener,$bind($_,$_.onEvent))),"'hasEventListener' should return false",{ fileName : "LightweightClosureDispatcherTest.hx", lineNumber : 166, className : "hex.event.LightweightClosureDispatcherTest", methodName : "testSealActivationOnRemoveAllListeners"});
	}
	,__class__: hex_event_LightweightClosureDispatcherTest
};
var hex_event__$LightweightClosureDispatcherTest_MockEventListener = function() {
	this.lastEventReceived = null;
	this.eventReceivedCount = 0;
};
$hxClasses["hex.event._LightweightClosureDispatcherTest.MockEventListener"] = hex_event__$LightweightClosureDispatcherTest_MockEventListener;
hex_event__$LightweightClosureDispatcherTest_MockEventListener.__name__ = ["hex","event","_LightweightClosureDispatcherTest","MockEventListener"];
hex_event__$LightweightClosureDispatcherTest_MockEventListener.__interfaces__ = [hex_event_IEventListener];
hex_event__$LightweightClosureDispatcherTest_MockEventListener.prototype = {
	eventReceivedCount: null
	,lastEventReceived: null
	,onEvent: function(e) {
		this.eventReceivedCount++;
		this.lastEventReceived = e;
	}
	,handleEvent: function(e) {
	}
	,__class__: hex_event__$LightweightClosureDispatcherTest_MockEventListener
};
var hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener = function(listener) {
	hex_event__$LightweightClosureDispatcherTest_MockEventListener.call(this);
	this.listener = listener;
};
$hxClasses["hex.event._LightweightClosureDispatcherTest.MockEventListenerForTestingSealingOnRemoveEventListener"] = hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener;
hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener.__name__ = ["hex","event","_LightweightClosureDispatcherTest","MockEventListenerForTestingSealingOnRemoveEventListener"];
hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener.__super__ = hex_event__$LightweightClosureDispatcherTest_MockEventListener;
hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener.prototype = $extend(hex_event__$LightweightClosureDispatcherTest_MockEventListener.prototype,{
	listener: null
	,onEvent: function(e) {
		hex_event__$LightweightClosureDispatcherTest_MockEventListener.prototype.onEvent.call(this,e);
		e.target.removeEventListener("onEvent",($_=this.listener,$bind($_,$_.onEvent)));
	}
	,__class__: hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveEventListener
});
var hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener = function(listener) {
	hex_event__$LightweightClosureDispatcherTest_MockEventListener.call(this);
	this.listener = listener;
};
$hxClasses["hex.event._LightweightClosureDispatcherTest.MockEventListenerForTestingSealingOnAddEventListener"] = hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener;
hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener.__name__ = ["hex","event","_LightweightClosureDispatcherTest","MockEventListenerForTestingSealingOnAddEventListener"];
hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener.__super__ = hex_event__$LightweightClosureDispatcherTest_MockEventListener;
hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener.prototype = $extend(hex_event__$LightweightClosureDispatcherTest_MockEventListener.prototype,{
	listener: null
	,onEvent: function(e) {
		hex_event__$LightweightClosureDispatcherTest_MockEventListener.prototype.onEvent.call(this,e);
		e.target.addEventListener("onEvent",($_=this.listener,$bind($_,$_.onEvent)));
	}
	,__class__: hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnAddEventListener
});
var hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners = function() {
	hex_event__$LightweightClosureDispatcherTest_MockEventListener.call(this);
};
$hxClasses["hex.event._LightweightClosureDispatcherTest.MockEventListenerForTestingSealingOnRemoveAllListeners"] = hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners;
hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners.__name__ = ["hex","event","_LightweightClosureDispatcherTest","MockEventListenerForTestingSealingOnRemoveAllListeners"];
hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners.__super__ = hex_event__$LightweightClosureDispatcherTest_MockEventListener;
hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners.prototype = $extend(hex_event__$LightweightClosureDispatcherTest_MockEventListener.prototype,{
	onEvent: function(e) {
		hex_event__$LightweightClosureDispatcherTest_MockEventListener.prototype.onEvent.call(this,e);
		e.target.removeAllListeners();
	}
	,__class__: hex_event__$LightweightClosureDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners
});
var hex_event_LightweightListenerDispatcher = function() {
	this._listeners = [];
};
$hxClasses["hex.event.LightweightListenerDispatcher"] = hex_event_LightweightListenerDispatcher;
hex_event_LightweightListenerDispatcher.__name__ = ["hex","event","LightweightListenerDispatcher"];
hex_event_LightweightListenerDispatcher.__interfaces__ = [hex_event_IEventDispatcher];
hex_event_LightweightListenerDispatcher.prototype = {
	_listeners: null
	,dispatchEvent: function(event) {
		var eventType = event.type;
		var listeners = this._listeners.slice();
		var _g = 0;
		while(_g < listeners.length) {
			var listener = listeners[_g];
			++_g;
			var callback = Reflect.field(listener,eventType);
			if(callback != null) callback.apply(listener,[event]); else {
				var handleEvent = Reflect.field(listener,"handleEvent");
				if(handleEvent != null) handleEvent.apply(listener,[event]); else {
					var msg = hex_log_Stringifier.stringify(this) + ".dispatchEvent failed. " + " You must implement '" + eventType + "' method or 'handleEvent' method in '" + hex_log_Stringifier.stringify(listener) + "' instance.";
					throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException(msg,{ fileName : "LightweightListenerDispatcher.hx", lineNumber : 43, className : "hex.event.LightweightListenerDispatcher", methodName : "dispatchEvent"}));
				}
			}
		}
	}
	,addEventListener: function(eventType,callback) {
		throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException("'addEventListener' is not supported in '" + hex_log_Stringifier.stringify(this) + "'",{ fileName : "LightweightListenerDispatcher.hx", lineNumber : 51, className : "hex.event.LightweightListenerDispatcher", methodName : "addEventListener"}));
	}
	,removeEventListener: function(eventType,callback) {
		throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException("'removeEventListener' is not supported in '" + hex_log_Stringifier.stringify(this) + "'",{ fileName : "LightweightListenerDispatcher.hx", lineNumber : 56, className : "hex.event.LightweightListenerDispatcher", methodName : "removeEventListener"}));
	}
	,addListener: function(listener) {
		var index = HxOverrides.indexOf(this._listeners,listener,0);
		if(index == -1) {
			this._listeners.push(listener);
			return true;
		} else return false;
	}
	,removeListener: function(listener) {
		var index = HxOverrides.indexOf(this._listeners,listener,0);
		if(index == -1) return false; else {
			this._listeners.splice(index,1);
			return true;
		}
	}
	,removeAllListeners: function() {
		this._listeners = [];
	}
	,isEmpty: function() {
		return this._listeners.length == 0;
	}
	,isRegistered: function(listener,eventType) {
		return HxOverrides.indexOf(this._listeners,listener,0) != -1;
	}
	,hasEventListener: function(eventType,callback) {
		throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException("'hasEventListener' is not supported in '" + hex_log_Stringifier.stringify(this) + "'",{ fileName : "LightweightListenerDispatcher.hx", lineNumber : 104, className : "hex.event.LightweightListenerDispatcher", methodName : "hasEventListener"}));
	}
	,__class__: hex_event_LightweightListenerDispatcher
};
var hex_event_LightweightListenerDispatcherTest = function() { };
$hxClasses["hex.event.LightweightListenerDispatcherTest"] = hex_event_LightweightListenerDispatcherTest;
hex_event_LightweightListenerDispatcherTest.__name__ = ["hex","event","LightweightListenerDispatcherTest"];
hex_event_LightweightListenerDispatcherTest.prototype = {
	_dispatcher: null
	,_listener: null
	,setUp: function() {
		this._dispatcher = new hex_event_LightweightListenerDispatcher();
		this._listener = new hex_event__$LightweightListenerDispatcherTest_MockEventListener();
	}
	,tearDown: function() {
		this._dispatcher = null;
		this._listener = null;
	}
	,testAddListener: function() {
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.addListener(this._listener),"'addListener' call should return true",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 32, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testAddListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.addListener(this._listener),"Same 'addListener' calls should return false second time",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 33, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testAddListener"});
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,1,"Event should be received once",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 37, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testAddListener"});
		hex_unittest_assertion_Assert.equals(this._listener.lastEventReceived,event,"Event received should be the same that was dispatched",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 38, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testAddListener"});
		var anotherEvent = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(anotherEvent);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,2,"Event should be received twice",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 43, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testAddListener"});
		hex_unittest_assertion_Assert.equals(this._listener.lastEventReceived,anotherEvent,"Event received should be the same that was dispatched",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 44, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testAddListener"});
	}
	,testRemoveListener: function() {
		this._dispatcher.addListener(this._listener);
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.removeListener(this._listener),"'removeListener' call should return true",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 51, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testRemoveListener"});
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,0,"Event should be received once",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 56, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testRemoveListener"});
		hex_unittest_assertion_Assert.isNull(this._listener.lastEventReceived,"Event received should be the same that was dispatched",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 57, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testRemoveListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.removeListener(this._listener),"Same 'removeListener' call should return false second time",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 58, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testRemoveListener"});
	}
	,testAddEventListener: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_UnsupportedOperationException,this._dispatcher,($_=this._dispatcher,$bind($_,$_.addEventListener)),["onEvent",($_=this._listener,$bind($_,$_.onEvent))],"'addEventListener' should throw UnsupportedOperationException",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 64, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testAddEventListener"});
	}
	,testRemoveEventListener: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_UnsupportedOperationException,this._dispatcher,($_=this._dispatcher,$bind($_,$_.removeEventListener)),["onEvent",($_=this._listener,$bind($_,$_.onEvent))],"'removeEventListener' should throw UnsupportedOperationException",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 70, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testRemoveEventListener"});
	}
	,testIsEmptyWithAddListener: function() {
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 76, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testIsEmptyWithAddListener"});
		this._dispatcher.addListener(this._listener);
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isEmpty(),"'isEmpty' should return false",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 78, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testIsEmptyWithAddListener"});
		this._dispatcher.removeListener(this._listener);
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 80, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testIsEmptyWithAddListener"});
	}
	,testDispatchEvent: function() {
		var dispatcher = new hex_event_LightweightListenerDispatcher();
		var mockListener = new hex_event__$LightweightListenerDispatcherTest_MockListener();
		dispatcher.addListener(mockListener);
		var event = new hex_event_BasicEvent("onEvent",dispatcher);
		dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(mockListener.eventReceivedCount,1,"Event should be received once",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 93, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testDispatchEvent"});
		hex_unittest_assertion_Assert.equals(mockListener.lastEventReceived,event,"Event received should be the same that was dispatched",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 94, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testDispatchEvent"});
		var anotherEvent = new hex_event_BasicEvent("onEvent",this._dispatcher);
		dispatcher.dispatchEvent(anotherEvent);
		hex_unittest_assertion_Assert.equals(mockListener.eventReceivedCount,2,"Event should be received twice",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 99, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testDispatchEvent"});
		hex_unittest_assertion_Assert.equals(mockListener.lastEventReceived,anotherEvent,"Event received should be the same that was dispatched",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 100, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testDispatchEvent"});
	}
	,testRemoveAllListeners: function() {
		this._dispatcher.addListener(this._listener);
		var event = new hex_event_BasicEvent("onEvent",this._dispatcher);
		this._dispatcher.removeAllListeners();
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isEmpty(),"'isEmpty' should return true",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 110, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testRemoveAllListeners"});
		this._dispatcher.dispatchEvent(event);
		hex_unittest_assertion_Assert.equals(this._listener.eventReceivedCount,0,"Event should be received once",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 113, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testRemoveAllListeners"});
		hex_unittest_assertion_Assert.isNull(this._listener.lastEventReceived,"Event received should be the same that was dispatched",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 114, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testRemoveAllListeners"});
	}
	,testIsRegistered: function() {
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return false",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 120, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testIsRegistered"});
		this._dispatcher.addListener(this._listener);
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return true",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 122, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testIsRegistered"});
	}
	,testHasEventListener: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_UnsupportedOperationException,this._dispatcher,($_=this._dispatcher,$bind($_,$_.hasEventListener)),["onEvent",($_=this._listener,$bind($_,$_.onEvent))],"'hasEventListener' should throw UnsupportedOperationException",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 128, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testHasEventListener"});
	}
	,testSealActivationOnRemoveListener: function() {
		var mockEventListener = new hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener(this._listener);
		this._dispatcher.addListener(mockEventListener);
		this._dispatcher.addListener(this._listener);
		this._dispatcher.dispatchEvent(new hex_event_BasicEvent("onEvent",this._dispatcher));
		hex_unittest_assertion_Assert.equals(1,this._listener.eventReceivedCount,"Event should be received once",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 139, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testSealActivationOnRemoveListener"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return false",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 140, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testSealActivationOnRemoveListener"});
	}
	,testSealActivationOnAddListener: function() {
		var mockEventListener = new hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnAddListener(this._listener);
		this._dispatcher.addListener(mockEventListener);
		var mockListener = new hex_event__$LightweightListenerDispatcherTest_MockEventListener();
		this._dispatcher.addListener(mockListener);
		this._dispatcher.dispatchEvent(new hex_event_BasicEvent("onEvent",this._dispatcher));
		hex_unittest_assertion_Assert.equals(0,this._listener.eventReceivedCount,"Event shouldn't be received",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 152, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testSealActivationOnAddListener"});
		hex_unittest_assertion_Assert.isTrue(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return true",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 153, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testSealActivationOnAddListener"});
	}
	,testSealActivationOnRemoveAllListeners: function() {
		var mockEventListener = new hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners();
		this._dispatcher.addListener(mockEventListener);
		this._dispatcher.addListener(this._listener);
		this._dispatcher.dispatchEvent(new hex_event_BasicEvent("onEvent",this._dispatcher));
		hex_unittest_assertion_Assert.equals(1,this._listener.eventReceivedCount,"Event should be received once",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 164, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testSealActivationOnRemoveAllListeners"});
		hex_unittest_assertion_Assert.isFalse(this._dispatcher.isRegistered(this._listener),"'isRegistered' should return false",{ fileName : "LightweightListenerDispatcherTest.hx", lineNumber : 165, className : "hex.event.LightweightListenerDispatcherTest", methodName : "testSealActivationOnRemoveAllListeners"});
	}
	,__class__: hex_event_LightweightListenerDispatcherTest
};
var hex_event__$LightweightListenerDispatcherTest_IMockEventListener = function() { };
$hxClasses["hex.event._LightweightListenerDispatcherTest.IMockEventListener"] = hex_event__$LightweightListenerDispatcherTest_IMockEventListener;
hex_event__$LightweightListenerDispatcherTest_IMockEventListener.__name__ = ["hex","event","_LightweightListenerDispatcherTest","IMockEventListener"];
hex_event__$LightweightListenerDispatcherTest_IMockEventListener.__interfaces__ = [hex_event_IEventListener];
hex_event__$LightweightListenerDispatcherTest_IMockEventListener.prototype = {
	onEvent: null
	,__class__: hex_event__$LightweightListenerDispatcherTest_IMockEventListener
};
var hex_event__$LightweightListenerDispatcherTest_MockEventListener = function() {
	this.lastEventReceived = null;
	this.eventReceivedCount = 0;
};
$hxClasses["hex.event._LightweightListenerDispatcherTest.MockEventListener"] = hex_event__$LightweightListenerDispatcherTest_MockEventListener;
hex_event__$LightweightListenerDispatcherTest_MockEventListener.__name__ = ["hex","event","_LightweightListenerDispatcherTest","MockEventListener"];
hex_event__$LightweightListenerDispatcherTest_MockEventListener.__interfaces__ = [hex_event__$LightweightListenerDispatcherTest_IMockEventListener];
hex_event__$LightweightListenerDispatcherTest_MockEventListener.prototype = {
	eventReceivedCount: null
	,lastEventReceived: null
	,onEvent: function(e) {
		this.eventReceivedCount++;
		this.lastEventReceived = e;
	}
	,handleEvent: function(e) {
		this.eventReceivedCount++;
		this.lastEventReceived = e;
	}
	,__class__: hex_event__$LightweightListenerDispatcherTest_MockEventListener
};
var hex_event__$LightweightListenerDispatcherTest_MockListener = function() {
	this.lastEventReceived = null;
	this.eventReceivedCount = 0;
};
$hxClasses["hex.event._LightweightListenerDispatcherTest.MockListener"] = hex_event__$LightweightListenerDispatcherTest_MockListener;
hex_event__$LightweightListenerDispatcherTest_MockListener.__name__ = ["hex","event","_LightweightListenerDispatcherTest","MockListener"];
hex_event__$LightweightListenerDispatcherTest_MockListener.__interfaces__ = [hex_event_IEventListener];
hex_event__$LightweightListenerDispatcherTest_MockListener.prototype = {
	eventReceivedCount: null
	,lastEventReceived: null
	,handleEvent: function(e) {
		this.eventReceivedCount++;
		this.lastEventReceived = e;
	}
	,__class__: hex_event__$LightweightListenerDispatcherTest_MockListener
};
var hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener = function(listener) {
	hex_event__$LightweightListenerDispatcherTest_MockEventListener.call(this);
	this.listener = listener;
};
$hxClasses["hex.event._LightweightListenerDispatcherTest.MockEventListenerForTestingSealingOnRemoveListener"] = hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener;
hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener.__name__ = ["hex","event","_LightweightListenerDispatcherTest","MockEventListenerForTestingSealingOnRemoveListener"];
hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener.__super__ = hex_event__$LightweightListenerDispatcherTest_MockEventListener;
hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener.prototype = $extend(hex_event__$LightweightListenerDispatcherTest_MockEventListener.prototype,{
	listener: null
	,onEvent: function(e) {
		hex_event__$LightweightListenerDispatcherTest_MockEventListener.prototype.onEvent.call(this,e);
		e.target.removeListener(this.listener);
	}
	,__class__: hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveListener
});
var hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnAddListener = function(listener) {
	hex_event__$LightweightListenerDispatcherTest_MockEventListener.call(this);
	this.listener = listener;
};
$hxClasses["hex.event._LightweightListenerDispatcherTest.MockEventListenerForTestingSealingOnAddListener"] = hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnAddListener;
hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnAddListener.__name__ = ["hex","event","_LightweightListenerDispatcherTest","MockEventListenerForTestingSealingOnAddListener"];
hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnAddListener.__super__ = hex_event__$LightweightListenerDispatcherTest_MockEventListener;
hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnAddListener.prototype = $extend(hex_event__$LightweightListenerDispatcherTest_MockEventListener.prototype,{
	listener: null
	,onEvent: function(e) {
		hex_event__$LightweightListenerDispatcherTest_MockEventListener.prototype.onEvent.call(this,e);
		e.target.addListener(this.listener);
	}
	,__class__: hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnAddListener
});
var hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners = function() {
	hex_event__$LightweightListenerDispatcherTest_MockEventListener.call(this);
};
$hxClasses["hex.event._LightweightListenerDispatcherTest.MockEventListenerForTestingSealingOnRemoveAllListeners"] = hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners;
hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners.__name__ = ["hex","event","_LightweightListenerDispatcherTest","MockEventListenerForTestingSealingOnRemoveAllListeners"];
hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners.__super__ = hex_event__$LightweightListenerDispatcherTest_MockEventListener;
hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners.prototype = $extend(hex_event__$LightweightListenerDispatcherTest_MockEventListener.prototype,{
	onEvent: function(e) {
		hex_event__$LightweightListenerDispatcherTest_MockEventListener.prototype.onEvent.call(this,e);
		e.target.removeAllListeners();
	}
	,__class__: hex_event__$LightweightListenerDispatcherTest_MockEventListenerForTestingSealingOnRemoveAllListeners
});
var hex_event_MVCEventSuite = function() {
	this.list = [hex_event_CallbackAdapterTest,hex_event_ClassAdapterTest,hex_event_EventProxyTest];
};
$hxClasses["hex.event.MVCEventSuite"] = hex_event_MVCEventSuite;
hex_event_MVCEventSuite.__name__ = ["hex","event","MVCEventSuite"];
hex_event_MVCEventSuite.prototype = {
	list: null
	,__class__: hex_event_MVCEventSuite
};
var hex_event_MethodRunnerEventTest = function() { };
$hxClasses["hex.event.MethodRunnerEventTest"] = hex_event_MethodRunnerEventTest;
hex_event_MethodRunnerEventTest.__name__ = ["hex","event","MethodRunnerEventTest"];
hex_event_MethodRunnerEventTest.prototype = {
	testType: function() {
		var type = "type";
		var methodDescriptor = new hex_unittest_description_TestMethodDescriptor("methodDescriptor",true,true);
		var target = new hex_unittest_runner_MethodRunner(this,methodDescriptor);
		var e = new hex_unittest_event_MethodRunnerEvent(type,target,methodDescriptor,10);
		hex_unittest_assertion_Assert.equals(type,e.type,"'type' property should be the same passed to constructor",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 23, className : "hex.event.MethodRunnerEventTest", methodName : "testType"});
	}
	,testTarget: function() {
		var methodDescriptor = new hex_unittest_description_TestMethodDescriptor("methodDescriptor",true,true);
		var target = new hex_unittest_runner_MethodRunner(this,methodDescriptor);
		var e = new hex_unittest_event_MethodRunnerEvent("",target,methodDescriptor,10);
		hex_unittest_assertion_Assert.equals(target,e.target,"'target' property should be the same passed to constructor",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 33, className : "hex.event.MethodRunnerEventTest", methodName : "testTarget"});
	}
	,testClone: function() {
		var type = "type";
		var methodDescriptor = new hex_unittest_description_TestMethodDescriptor("methodDescriptor",true,true);
		var target = new hex_unittest_runner_MethodRunner(this,methodDescriptor);
		var ex = new hex_error_Exception("error",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 42, className : "hex.event.MethodRunnerEventTest", methodName : "testClone"});
		var e = new hex_unittest_event_MethodRunnerEvent(type,target,methodDescriptor,10,ex);
		var clonedEvent = e.clone();
		hex_unittest_assertion_Assert.isInstanceOf(clonedEvent,hex_unittest_event_MethodRunnerEvent,"'clonedEvent' should be an instance of 'MethodRunnerEvent' class",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 46, className : "hex.event.MethodRunnerEventTest", methodName : "testClone"});
		hex_unittest_assertion_Assert.equals(type,clonedEvent.type,"'clone' method should return cloned event with same 'type' property",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 48, className : "hex.event.MethodRunnerEventTest", methodName : "testClone"});
		hex_unittest_assertion_Assert.equals(target,clonedEvent.target,"'clone' method should return cloned event with same 'target' property",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 49, className : "hex.event.MethodRunnerEventTest", methodName : "testClone"});
		hex_unittest_assertion_Assert.equals(methodDescriptor,e.getDescriptor(),"'getDescriptor' accessor should return property passed to constructor",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 50, className : "hex.event.MethodRunnerEventTest", methodName : "testClone"});
		hex_unittest_assertion_Assert.equals(10,e.getTimeElapsed(),"'getTimeElapsed' accessor should return property passed to constructor",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 51, className : "hex.event.MethodRunnerEventTest", methodName : "testClone"});
		hex_unittest_assertion_Assert.equals(ex,e.getError(),"'getError' accessor should return property passed to constructor",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 52, className : "hex.event.MethodRunnerEventTest", methodName : "testClone"});
	}
	,testAccessors: function() {
		var ex = new hex_error_Exception("error",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 58, className : "hex.event.MethodRunnerEventTest", methodName : "testAccessors"});
		var methodDescriptor = new hex_unittest_description_TestMethodDescriptor("methodDescriptor",true,true);
		var target = new hex_unittest_runner_MethodRunner(this,methodDescriptor);
		var e = new hex_unittest_event_MethodRunnerEvent("eventType",target,methodDescriptor,10,ex);
		hex_unittest_assertion_Assert.equals(target,e.getRunner(),"'getRunner' accessor should return property passed to constructor",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 63, className : "hex.event.MethodRunnerEventTest", methodName : "testAccessors"});
		hex_unittest_assertion_Assert.equals(methodDescriptor,e.getDescriptor(),"'getDescriptor' accessor should return property passed to constructor",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 64, className : "hex.event.MethodRunnerEventTest", methodName : "testAccessors"});
		hex_unittest_assertion_Assert.equals(10,e.getTimeElapsed(),"'getTimeElapsed' accessor should return property passed to constructor",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 65, className : "hex.event.MethodRunnerEventTest", methodName : "testAccessors"});
		hex_unittest_assertion_Assert.equals(ex,e.getError(),"'getError' accessor should return property passed to constructor",{ fileName : "MethodRunnerEventTest.hx", lineNumber : 66, className : "hex.event.MethodRunnerEventTest", methodName : "testAccessors"});
	}
	,__class__: hex_event_MethodRunnerEventTest
};
var hex_event_TestRunnerEventTest = function() { };
$hxClasses["hex.event.TestRunnerEventTest"] = hex_event_TestRunnerEventTest;
hex_event_TestRunnerEventTest.__name__ = ["hex","event","TestRunnerEventTest"];
hex_event_TestRunnerEventTest.prototype = {
	testType: function() {
		var type = "type";
		var descriptor = new hex_unittest_description_TestClassDescriptor(hex_event_TestRunnerEventTest);
		var target = new hex_unittest_runner_TestRunner(descriptor);
		var e = new hex_unittest_event_TestRunnerEvent(type,target,descriptor);
		hex_unittest_assertion_Assert.equals(type,e.type,"'type' property should be the same passed to constructor",{ fileName : "TestRunnerEventTest.hx", lineNumber : 23, className : "hex.event.TestRunnerEventTest", methodName : "testType"});
	}
	,testTarget: function() {
		var descriptor = new hex_unittest_description_TestClassDescriptor(hex_event_TestRunnerEventTest);
		var target = new hex_unittest_runner_TestRunner(descriptor);
		var e = new hex_unittest_event_TestRunnerEvent("",target,descriptor);
		hex_unittest_assertion_Assert.equals(target,e.target,"'target' property should be the same passed to constructor",{ fileName : "TestRunnerEventTest.hx", lineNumber : 33, className : "hex.event.TestRunnerEventTest", methodName : "testTarget"});
	}
	,testClone: function() {
		var type = "type";
		var descriptor = new hex_unittest_description_TestClassDescriptor(hex_event_TestRunnerEventTest);
		var target = new hex_unittest_runner_TestRunner(descriptor);
		var ex = new hex_error_Exception("error",{ fileName : "TestRunnerEventTest.hx", lineNumber : 42, className : "hex.event.TestRunnerEventTest", methodName : "testClone"});
		var e = new hex_unittest_event_TestRunnerEvent(type,target,descriptor,150,ex);
		var clonedEvent = e.clone();
		hex_unittest_assertion_Assert.isInstanceOf(clonedEvent,hex_unittest_event_TestRunnerEvent,"'clonedEvent' should be an instance of 'TestRunnerEvent' class",{ fileName : "TestRunnerEventTest.hx", lineNumber : 46, className : "hex.event.TestRunnerEventTest", methodName : "testClone"});
		hex_unittest_assertion_Assert.equals(type,clonedEvent.type,"'clone' method should return cloned event with same 'type' property",{ fileName : "TestRunnerEventTest.hx", lineNumber : 48, className : "hex.event.TestRunnerEventTest", methodName : "testClone"});
		hex_unittest_assertion_Assert.equals(target,clonedEvent.target,"'clone' method should return cloned event with same 'target' property",{ fileName : "TestRunnerEventTest.hx", lineNumber : 49, className : "hex.event.TestRunnerEventTest", methodName : "testClone"});
		hex_unittest_assertion_Assert.equals(descriptor,e.getDescriptor(),"'getDescriptor' accessor should return property passed to constructor",{ fileName : "TestRunnerEventTest.hx", lineNumber : 50, className : "hex.event.TestRunnerEventTest", methodName : "testClone"});
		hex_unittest_assertion_Assert.equals(150,e.getTimeElapsed(),"'getTimeElapsed' accessor should return property passed to constructor",{ fileName : "TestRunnerEventTest.hx", lineNumber : 51, className : "hex.event.TestRunnerEventTest", methodName : "testClone"});
		hex_unittest_assertion_Assert.equals(ex,e.getError(),"'getError' accessor should return property passed to constructor",{ fileName : "TestRunnerEventTest.hx", lineNumber : 52, className : "hex.event.TestRunnerEventTest", methodName : "testClone"});
	}
	,testAccessors: function() {
		var descriptor = new hex_unittest_description_TestClassDescriptor(hex_event_TestRunnerEventTest);
		var target = new hex_unittest_runner_TestRunner(descriptor);
		var ex = new hex_error_Exception("error",{ fileName : "TestRunnerEventTest.hx", lineNumber : 60, className : "hex.event.TestRunnerEventTest", methodName : "testAccessors"});
		var e = new hex_unittest_event_TestRunnerEvent("eventType",target,descriptor,150,ex);
		hex_unittest_assertion_Assert.equals(target,e.getRunner(),"'getRunner' accessor should return property passed to constructor",{ fileName : "TestRunnerEventTest.hx", lineNumber : 63, className : "hex.event.TestRunnerEventTest", methodName : "testAccessors"});
		hex_unittest_assertion_Assert.equals(descriptor,e.getDescriptor(),"'getDescriptor' accessor should return property passed to constructor",{ fileName : "TestRunnerEventTest.hx", lineNumber : 64, className : "hex.event.TestRunnerEventTest", methodName : "testAccessors"});
		hex_unittest_assertion_Assert.equals(150,e.getTimeElapsed(),"'getTimeElapsed' accessor should return property passed to constructor",{ fileName : "TestRunnerEventTest.hx", lineNumber : 65, className : "hex.event.TestRunnerEventTest", methodName : "testAccessors"});
		hex_unittest_assertion_Assert.equals(ex,e.getError(),"'getError' accessor should return property passed to constructor",{ fileName : "TestRunnerEventTest.hx", lineNumber : 66, className : "hex.event.TestRunnerEventTest", methodName : "testAccessors"});
	}
	,__class__: hex_event_TestRunnerEventTest
};
var hex_ioc_IOCSuite = function() {
	this.list = [hex_ioc_assembler_IoCAssemblerSuite,hex_ioc_control_IoCControlSuite,hex_ioc_core_IoCCoreSuite,hex_ioc_parser_IoCParserSuite,hex_ioc_vo_IoCVOSuite];
};
$hxClasses["hex.ioc.IOCSuite"] = hex_ioc_IOCSuite;
hex_ioc_IOCSuite.__name__ = ["hex","ioc","IOCSuite"];
hex_ioc_IOCSuite.prototype = {
	list: null
	,__class__: hex_ioc_IOCSuite
};
var hex_ioc_assembler_AbstractApplicationContext = function(coreFactory,name) {
	this._coreFactory = coreFactory;
	this._name = name;
};
$hxClasses["hex.ioc.assembler.AbstractApplicationContext"] = hex_ioc_assembler_AbstractApplicationContext;
hex_ioc_assembler_AbstractApplicationContext.__name__ = ["hex","ioc","assembler","AbstractApplicationContext"];
hex_ioc_assembler_AbstractApplicationContext.__interfaces__ = [hex_di_IContextOwner];
hex_ioc_assembler_AbstractApplicationContext.prototype = {
	_name: null
	,_coreFactory: null
	,getName: function() {
		return this._name;
	}
	,resolve: function(field) {
		return this._coreFactory.locate(field);
	}
	,addChild: function(applicationContext) {
		try {
			return this._coreFactory.register(applicationContext.getName(),applicationContext);
		} catch( ex ) {
			if (ex instanceof js__$Boot_HaxeError) ex = ex.val;
			if( js_Boot.__instanceof(ex,hex_error_IllegalArgumentException) ) {
				hex_log_Logger.ERROR("addChild failed with applicationContext named '" + applicationContext.getName() + "'",null,{ fileName : "AbstractApplicationContext.hx", lineNumber : 45, className : "hex.ioc.assembler.AbstractApplicationContext", methodName : "addChild"});
				return false;
			} else throw(ex);
		}
	}
	,_dispatch: function(messageType,data) {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(hex_log_Stringifier.stringify(this) + "._dispatch is not implemented",{ fileName : "AbstractApplicationContext.hx", lineNumber : 54, className : "hex.ioc.assembler.AbstractApplicationContext", methodName : "_dispatch"}));
	}
	,getCoreFactory: function() {
		return this._coreFactory;
	}
	,getBasicInjector: function() {
		return this._coreFactory.getBasicInjector();
	}
	,__class__: hex_ioc_assembler_AbstractApplicationContext
};
var hex_ioc_assembler_IApplicationAssembler = function() { };
$hxClasses["hex.ioc.assembler.IApplicationAssembler"] = hex_ioc_assembler_IApplicationAssembler;
hex_ioc_assembler_IApplicationAssembler.__name__ = ["hex","ioc","assembler","IApplicationAssembler"];
hex_ioc_assembler_IApplicationAssembler.prototype = {
	buildEverything: null
	,release: null
	,buildProperty: null
	,buildObject: null
	,buildMethodCall: null
	,buildDomainListener: null
	,configureStateTransition: null
	,getApplicationContext: null
	,setStrictMode: null
	,isInStrictMode: null
	,addConditionalProperty: null
	,allowsIfList: null
	,allowsIfNotList: null
	,__class__: hex_ioc_assembler_IApplicationAssembler
};
var hex_ioc_assembler_ApplicationAssembler = function() {
	this._strictMode = true;
	this._conditionalProperties = new haxe_ds_StringMap();
	this._mBuilderFactories = new hex_collection_HashMap();
	this._mApplicationContext = new hex_collection_HashMap();
};
$hxClasses["hex.ioc.assembler.ApplicationAssembler"] = hex_ioc_assembler_ApplicationAssembler;
hex_ioc_assembler_ApplicationAssembler.__name__ = ["hex","ioc","assembler","ApplicationAssembler"];
hex_ioc_assembler_ApplicationAssembler.__interfaces__ = [hex_ioc_assembler_IApplicationAssembler];
hex_ioc_assembler_ApplicationAssembler.prototype = {
	_mApplicationContext: null
	,_mBuilderFactories: null
	,_conditionalProperties: null
	,_strictMode: null
	,setStrictMode: function(b) {
		this._strictMode = b;
	}
	,isInStrictMode: function() {
		return this._strictMode;
	}
	,addConditionalProperty: function(conditionalProperties) {
		var i = conditionalProperties.keys();
		var key;
		while(i.hasNext()) {
			key = i.next();
			if(!this._conditionalProperties.exists(key)) {
				var value;
				value = __map_reserved[key] != null?conditionalProperties.getReserved(key):conditionalProperties.h[key];
				this._conditionalProperties.set(key,value);
			} else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("addConditionalcontext fails with key'" + key + "', this key was already assigned",{ fileName : "ApplicationAssembler.hx", lineNumber : 59, className : "hex.ioc.assembler.ApplicationAssembler", methodName : "addConditionalProperty"}));
		}
	}
	,allowsIfList: function(ifList) {
		if(ifList != null) {
			var _g = 0;
			while(_g < ifList.length) {
				var ifItem = ifList[_g];
				++_g;
				if(this._conditionalProperties.exists(ifItem)) {
					if(this._conditionalProperties.get(ifItem)) return true;
				} else if(this._strictMode) throw new js__$Boot_HaxeError(new hex_ioc_error_BuildingException("'" + ifItem + "' was not found in application assembler",{ fileName : "ApplicationAssembler.hx", lineNumber : 79, className : "hex.ioc.assembler.ApplicationAssembler", methodName : "allowsIfList"}));
			}
		} else return true;
		return false;
	}
	,allowsIfNotList: function(ifNotList) {
		if(ifNotList != null) {
			var _g = 0;
			while(_g < ifNotList.length) {
				var ifNotItem = ifNotList[_g];
				++_g;
				if(this._conditionalProperties.exists(ifNotItem)) {
					if(this._conditionalProperties.get(ifNotItem)) return false;
				} else if(this._strictMode) throw new js__$Boot_HaxeError(new hex_ioc_error_BuildingException("'" + ifNotItem + "' was not found in application assembler",{ fileName : "ApplicationAssembler.hx", lineNumber : 106, className : "hex.ioc.assembler.ApplicationAssembler", methodName : "allowsIfNotList"}));
			}
		}
		return true;
	}
	,getBuilderFactory: function(applicationContext) {
		return this._mBuilderFactories.get(applicationContext);
	}
	,release: function() {
		var builderFactories = this._mBuilderFactories.getValues();
		var _g = 0;
		while(_g < builderFactories.length) {
			var builderFactory = builderFactories[_g];
			++_g;
			builderFactory.release();
		}
		this._mApplicationContext.clear();
		this._mBuilderFactories.clear();
	}
	,buildProperty: function(applicationContext,ownerID,name,value,type,ref,method,staticRef,ifList,ifNotList) {
		if(this.allowsIfList(ifList) && this.allowsIfNotList(ifNotList)) this.getBuilderFactory(applicationContext).registerPropertyVO(ownerID,new hex_ioc_vo_PropertyVO(ownerID,name,value,type,ref,method,staticRef));
	}
	,buildObject: function(applicationContext,ownerID,type,args,factory,singleton,injectInto,mapType,staticRef,ifList,ifNotList) {
		if(injectInto == null) injectInto = false;
		if(this.allowsIfList(ifList) && this.allowsIfNotList(ifNotList)) {
			this._registerID(applicationContext,ownerID);
			if(args != null) {
				var length = args.length;
				var index;
				var obj;
				if(type == "hex.collection.HashMap") {
					var _g = 0;
					while(_g < length) {
						var index1 = _g++;
						obj = args[index1];
						var keyDic = obj.key;
						var valueDic = obj.value;
						var pKeyDic = new hex_ioc_vo_PropertyVO(ownerID,keyDic.name,keyDic.value,keyDic.type,keyDic.ref,keyDic.method,keyDic.staticRef);
						var pValueDic = new hex_ioc_vo_PropertyVO(ownerID,valueDic.name,valueDic.value,valueDic.type,valueDic.ref,valueDic.method,valueDic.staticRef);
						args[index1] = new hex_ioc_vo_MapVO(pKeyDic,pValueDic);
					}
				} else if(type == "hex.config.stateful.ServiceLocator") {
					var _g1 = 0;
					while(_g1 < length) {
						var index2 = _g1++;
						obj = args[index2];
						var keySC = obj.key;
						var valueSC = obj.value;
						var pKeySC = new hex_ioc_vo_PropertyVO(ownerID,keySC.name,keySC.value,keySC.type,keySC.ref,keySC.method,keySC.staticRef);
						var pValueSC = new hex_ioc_vo_PropertyVO(ownerID,valueSC.name,valueSC.value,valueSC.type,valueSC.ref,valueSC.method,valueSC.staticRef);
						args[index2] = new hex_ioc_vo_ServiceLocatorVO(pKeySC,pValueSC,obj.mapName);
					}
				} else {
					var _g2 = 0;
					while(_g2 < length) {
						var index3 = _g2++;
						obj = args[index3];
						var propertyVO = new hex_ioc_vo_PropertyVO(ownerID,obj.name,obj.value,obj.type,obj.ref,obj.method,obj.staticRef);
						args[index3] = propertyVO;
					}
				}
			}
			var constructorVO = new hex_ioc_vo_ConstructorVO(ownerID,type,args,factory,singleton,injectInto,null,mapType,staticRef);
			this.getBuilderFactory(applicationContext).registerConstructorVO(ownerID,constructorVO);
		}
	}
	,buildMethodCall: function(applicationContext,ownerID,methodCallName,args,ifList,ifNotList) {
		if(this.allowsIfList(ifList) && this.allowsIfNotList(ifNotList)) {
			if(args != null) {
				var length = args.length;
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					var obj = args[i];
					var prop = new hex_ioc_vo_PropertyVO(obj.id,obj.name,obj.value,obj.type,obj.ref,obj.method,obj.staticRef);
					args[i] = prop;
				}
			}
			this.getBuilderFactory(applicationContext).registerMethodCallVO(new hex_ioc_vo_MethodCallVO(ownerID,methodCallName,args));
		}
	}
	,buildDomainListener: function(applicationContext,ownerID,listenedDomainName,args,ifList,ifNotList) {
		if(this.allowsIfList(ifList) && this.allowsIfNotList(ifNotList)) this.getBuilderFactory(applicationContext).registerDomainListenerVO(new hex_ioc_vo_DomainListenerVO(ownerID,listenedDomainName,args));
	}
	,configureStateTransition: function(applicationContext,ownerID,staticReference,instanceReference,enterList,exitList,ifList,ifNotList) {
		if(this.allowsIfList(ifList) && this.allowsIfNotList(ifNotList)) {
			this._registerID(applicationContext,ownerID);
			var stateTransition = new hex_ioc_vo_StateTransitionVO(ownerID,staticReference,instanceReference,enterList,exitList);
			this.getBuilderFactory(applicationContext).registerStateTransitionVO(ownerID,stateTransition);
		}
	}
	,buildEverything: function() {
		var builderFactories = this._mBuilderFactories.getValues();
		var len = builderFactories.length;
		var i;
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			builderFactories[i1].buildAllStateTransitions();
		}
		var applicationContexts = null;
		applicationContexts = this._mApplicationContext.getValues();
		var _g1 = 0;
		while(_g1 < applicationContexts.length) {
			var applicationcontext = applicationContexts[_g1];
			++_g1;
			applicationcontext._dispatch(hex_ioc_assembler_ApplicationAssemblerMessage.ASSEMBLING_START);
		}
		var _g2 = 0;
		while(_g2 < len) {
			var i2 = _g2++;
			builderFactories[i2].buildAllObjects();
		}
		var _g3 = 0;
		while(_g3 < len) {
			var i3 = _g3++;
			builderFactories[i3].assignAllDomainListeners();
		}
		var _g4 = 0;
		while(_g4 < len) {
			var i4 = _g4++;
			builderFactories[i4].callAllMethods();
		}
		var _g5 = 0;
		while(_g5 < len) {
			var i5 = _g5++;
			builderFactories[i5].callModuleInitialisation();
		}
		applicationContexts = this._mApplicationContext.getValues();
		var _g6 = 0;
		while(_g6 < applicationContexts.length) {
			var applicationcontext1 = applicationContexts[_g6];
			++_g6;
			applicationcontext1._dispatch(hex_ioc_assembler_ApplicationAssemblerMessage.ASSEMBLING_END);
		}
	}
	,getApplicationContext: function(applicationContextName,applicationContextClass) {
		var applicationContext;
		if(this._mApplicationContext.containsKey(applicationContextName)) applicationContext = this._mApplicationContext.get(applicationContextName); else {
			var builderFactory = new hex_ioc_core_ContextFactory(applicationContextName,applicationContextClass);
			applicationContext = builderFactory.getApplicationContext();
			this._mApplicationContext.put(applicationContextName,applicationContext);
			this._mBuilderFactories.put(applicationContext,builderFactory);
		}
		return applicationContext;
	}
	,_registerID: function(applicationContext,ID) {
		return this.getBuilderFactory(applicationContext).registerID(ID);
	}
	,__class__: hex_ioc_assembler_ApplicationAssembler
};
var hex_ioc_assembler_ApplicationAssemblerMessage = function() {
};
$hxClasses["hex.ioc.assembler.ApplicationAssemblerMessage"] = hex_ioc_assembler_ApplicationAssemblerMessage;
hex_ioc_assembler_ApplicationAssemblerMessage.__name__ = ["hex","ioc","assembler","ApplicationAssemblerMessage"];
hex_ioc_assembler_ApplicationAssemblerMessage.prototype = {
	__class__: hex_ioc_assembler_ApplicationAssemblerMessage
};
var hex_ioc_assembler_ApplicationAssemblerTest = function() { };
$hxClasses["hex.ioc.assembler.ApplicationAssemblerTest"] = hex_ioc_assembler_ApplicationAssemblerTest;
hex_ioc_assembler_ApplicationAssemblerTest.__name__ = ["hex","ioc","assembler","ApplicationAssemblerTest"];
hex_ioc_assembler_ApplicationAssemblerTest.prototype = {
	testAddConditionalProperty: function() {
		var assembler = new hex_ioc_assembler_ApplicationAssembler();
		assembler.addConditionalProperty((function($this) {
			var $r;
			var _g = new haxe_ds_StringMap();
			if(__map_reserved.production != null) _g.setReserved("production",true); else _g.h["production"] = true;
			if(__map_reserved.debug != null) _g.setReserved("debug",false); else _g.h["debug"] = false;
			$r = _g;
			return $r;
		}(this)));
		hex_unittest_assertion_Assert.isTrue(assembler.allowsIfList(["production"]),"",{ fileName : "ApplicationAssemblerTest.hx", lineNumber : 17, className : "hex.ioc.assembler.ApplicationAssemblerTest", methodName : "testAddConditionalProperty"});
		hex_unittest_assertion_Assert.isFalse(assembler.allowsIfList(["debug"]),"",{ fileName : "ApplicationAssemblerTest.hx", lineNumber : 18, className : "hex.ioc.assembler.ApplicationAssemblerTest", methodName : "testAddConditionalProperty"});
		hex_unittest_assertion_Assert.isTrue(assembler.allowsIfList(["debug","production"]),"",{ fileName : "ApplicationAssemblerTest.hx", lineNumber : 19, className : "hex.ioc.assembler.ApplicationAssemblerTest", methodName : "testAddConditionalProperty"});
		hex_unittest_assertion_Assert.isTrue(assembler.allowsIfList(["production","debug"]),"",{ fileName : "ApplicationAssemblerTest.hx", lineNumber : 20, className : "hex.ioc.assembler.ApplicationAssemblerTest", methodName : "testAddConditionalProperty"});
		hex_unittest_assertion_Assert.isFalse(assembler.allowsIfNotList(["production"]),"",{ fileName : "ApplicationAssemblerTest.hx", lineNumber : 22, className : "hex.ioc.assembler.ApplicationAssemblerTest", methodName : "testAddConditionalProperty"});
		hex_unittest_assertion_Assert.isTrue(assembler.allowsIfNotList(["debug"]),"",{ fileName : "ApplicationAssemblerTest.hx", lineNumber : 23, className : "hex.ioc.assembler.ApplicationAssemblerTest", methodName : "testAddConditionalProperty"});
		hex_unittest_assertion_Assert.isFalse(assembler.allowsIfNotList(["debug","production"]),"",{ fileName : "ApplicationAssemblerTest.hx", lineNumber : 24, className : "hex.ioc.assembler.ApplicationAssemblerTest", methodName : "testAddConditionalProperty"});
		hex_unittest_assertion_Assert.isFalse(assembler.allowsIfNotList(["production","debug"]),"",{ fileName : "ApplicationAssemblerTest.hx", lineNumber : 25, className : "hex.ioc.assembler.ApplicationAssemblerTest", methodName : "testAddConditionalProperty"});
	}
	,testStrictMode: function() {
		var assembler = new hex_ioc_assembler_ApplicationAssembler();
		assembler.setStrictMode(true);
		assembler.addConditionalProperty((function($this) {
			var $r;
			var _g = new haxe_ds_StringMap();
			if(__map_reserved.production != null) _g.setReserved("production",true); else _g.h["production"] = true;
			$r = _g;
			return $r;
		}(this)));
		hex_unittest_assertion_Assert.methodCallThrows(hex_ioc_error_BuildingException,assembler,$bind(assembler,assembler.allowsIfList),[["debug"]],"",{ fileName : "ApplicationAssemblerTest.hx", lineNumber : 34, className : "hex.ioc.assembler.ApplicationAssemblerTest", methodName : "testStrictMode"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_ioc_error_BuildingException,assembler,$bind(assembler,assembler.allowsIfNotList),[["debug"]],"",{ fileName : "ApplicationAssemblerTest.hx", lineNumber : 35, className : "hex.ioc.assembler.ApplicationAssemblerTest", methodName : "testStrictMode"});
	}
	,__class__: hex_ioc_assembler_ApplicationAssemblerTest
};
var hex_ioc_assembler_ApplicationContext = function(dispatcher,coreFactory,name) {
	hex_ioc_assembler_AbstractApplicationContext.call(this,coreFactory,name);
	this._dispatcher = dispatcher;
	this._initStateMachine();
};
$hxClasses["hex.ioc.assembler.ApplicationContext"] = hex_ioc_assembler_ApplicationContext;
hex_ioc_assembler_ApplicationContext.__name__ = ["hex","ioc","assembler","ApplicationContext"];
hex_ioc_assembler_ApplicationContext.__super__ = hex_ioc_assembler_AbstractApplicationContext;
hex_ioc_assembler_ApplicationContext.prototype = $extend(hex_ioc_assembler_AbstractApplicationContext.prototype,{
	_dispatcher: null
	,_stateMachine: null
	,_stateController: null
	,state: null
	,_initStateList: function() {
		this.state = new hex_ioc_assembler_ApplicationContextStateList();
	}
	,_initStateMachine: function() {
		this._initStateList();
		this._stateMachine = new hex_state_StateMachine(this.state.CONTEXT_INITIALIZED);
		this._stateController = new hex_state_control_StateController(this.getBasicInjector(),this._stateMachine);
		this._dispatcher.addListener(this._stateController);
	}
	,_dispatch: function(messageType,data) {
		this._dispatcher.dispatch(messageType,data);
	}
	,getCurrentState: function() {
		return this._stateController.getCurrentState();
	}
	,__class__: hex_ioc_assembler_ApplicationContext
});
var hex_ioc_assembler_ApplicationContextStateList = function() {
	this.ASSEMBLING_END = new hex_state_State("onAssemblingEnd");
	this.MODULES_INITIALIZED = new hex_state_State("onModulesInitialized");
	this.METHODS_CALLED = new hex_state_State("onMethodsCalled");
	this.DOMAIN_LISTENERS_ASSIGNED = new hex_state_State("onDomainListenersAssigned");
	this.OBJECTS_BUILT = new hex_state_State("onObjectsBuilt");
	this.ASSEMBLING_START = new hex_state_State("onAssemblingStart");
	this.STATE_TRANSITIONS_BUILT = new hex_state_State("onStateTransitionsBuilt");
	this.CONTEXT_PARSED = new hex_state_State("onContextParsed");
	this.CONTEXT_INITIALIZED = new hex_state_State("onContextInitialized");
	this.CONTEXT_INITIALIZED.addTransition(hex_ioc_assembler_ApplicationAssemblerMessage.CONTEXT_PARSED,this.CONTEXT_PARSED);
	this.CONTEXT_PARSED.addTransition(hex_ioc_assembler_ApplicationAssemblerMessage.STATE_TRANSITIONS_BUILT,this.STATE_TRANSITIONS_BUILT);
	this.STATE_TRANSITIONS_BUILT.addTransition(hex_ioc_assembler_ApplicationAssemblerMessage.ASSEMBLING_START,this.ASSEMBLING_START);
	this.ASSEMBLING_START.addTransition(hex_ioc_assembler_ApplicationAssemblerMessage.OBJECTS_BUILT,this.OBJECTS_BUILT);
	this.OBJECTS_BUILT.addTransition(hex_ioc_assembler_ApplicationAssemblerMessage.DOMAIN_LISTENERS_ASSIGNED,this.DOMAIN_LISTENERS_ASSIGNED);
	this.DOMAIN_LISTENERS_ASSIGNED.addTransition(hex_ioc_assembler_ApplicationAssemblerMessage.METHODS_CALLED,this.METHODS_CALLED);
	this.METHODS_CALLED.addTransition(hex_ioc_assembler_ApplicationAssemblerMessage.MODULES_INITIALIZED,this.MODULES_INITIALIZED);
	this.MODULES_INITIALIZED.addTransition(hex_ioc_assembler_ApplicationAssemblerMessage.ASSEMBLING_END,this.ASSEMBLING_END);
	this.ASSEMBLING_END.addTransition(hex_ioc_assembler_ApplicationAssemblerMessage.STATE_TRANSITIONS_BUILT,this.STATE_TRANSITIONS_BUILT);
};
$hxClasses["hex.ioc.assembler.ApplicationContextStateList"] = hex_ioc_assembler_ApplicationContextStateList;
hex_ioc_assembler_ApplicationContextStateList.__name__ = ["hex","ioc","assembler","ApplicationContextStateList"];
hex_ioc_assembler_ApplicationContextStateList.prototype = {
	CONTEXT_INITIALIZED: null
	,CONTEXT_PARSED: null
	,STATE_TRANSITIONS_BUILT: null
	,ASSEMBLING_START: null
	,OBJECTS_BUILT: null
	,DOMAIN_LISTENERS_ASSIGNED: null
	,METHODS_CALLED: null
	,MODULES_INITIALIZED: null
	,ASSEMBLING_END: null
	,__class__: hex_ioc_assembler_ApplicationContextStateList
};
var hex_ioc_assembler_ApplicationContextTest = function() { };
$hxClasses["hex.ioc.assembler.ApplicationContextTest"] = hex_ioc_assembler_ApplicationContextTest;
hex_ioc_assembler_ApplicationContextTest.__name__ = ["hex","ioc","assembler","ApplicationContextTest"];
hex_ioc_assembler_ApplicationContextTest.prototype = {
	testAccessors: function() {
		var applicationAssembler = new hex_ioc_assembler_ApplicationAssembler();
		var applicationContext = applicationAssembler.getApplicationContext("applicationContext");
		hex_unittest_assertion_Assert.equals("applicationContext",applicationContext.getName(),"returned name should be the same passed during instantiation",{ fileName : "ApplicationContextTest.hx", lineNumber : 21, className : "hex.ioc.assembler.ApplicationContextTest", methodName : "testAccessors"});
		hex_unittest_assertion_Assert.isInstanceOf(applicationContext.getBasicInjector(),hex_di_Injector,"injector returned should be an instance of Injector class",{ fileName : "ApplicationContextTest.hx", lineNumber : 22, className : "hex.ioc.assembler.ApplicationContextTest", methodName : "testAccessors"});
		var injector = applicationContext.getBasicInjector();
		hex_unittest_assertion_Assert.equals(injector.getInstance(hex_di_IBasicInjector),injector,"injectors should be the same",{ fileName : "ApplicationContextTest.hx", lineNumber : 25, className : "hex.ioc.assembler.ApplicationContextTest", methodName : "testAccessors"});
	}
	,testChildren: function() {
		var applicationAssembler = new hex_ioc_assembler_ApplicationAssembler();
		var applicationContext = applicationAssembler.getApplicationContext("applicationContext");
		var anotherContext = applicationAssembler.getApplicationContext("anotherContext");
		hex_unittest_assertion_Assert.notEquals(applicationContext,anotherContext,"application contexts should be different",{ fileName : "ApplicationContextTest.hx", lineNumber : 35, className : "hex.ioc.assembler.ApplicationContextTest", methodName : "testChildren"});
		hex_unittest_assertion_Assert.isTrue(applicationContext.addChild(anotherContext),"'addChild' should return true when adding a context child for the first time",{ fileName : "ApplicationContextTest.hx", lineNumber : 36, className : "hex.ioc.assembler.ApplicationContextTest", methodName : "testChildren"});
		hex_unittest_assertion_Assert.isFalse(applicationContext.addChild(anotherContext),"'addChild' should return false when adding a context child for the first time",{ fileName : "ApplicationContextTest.hx", lineNumber : 37, className : "hex.ioc.assembler.ApplicationContextTest", methodName : "testChildren"});
		hex_unittest_assertion_Assert.equals(anotherContext,applicationContext.resolve("anotherContext"),"application context should be the same",{ fileName : "ApplicationContextTest.hx", lineNumber : 38, className : "hex.ioc.assembler.ApplicationContextTest", methodName : "testChildren"});
	}
	,__class__: hex_ioc_assembler_ApplicationContextTest
};
var hex_ioc_assembler_IoCAssemblerSuite = function() {
	this.list = [hex_ioc_assembler_ApplicationAssemblerTest,hex_ioc_assembler_ApplicationContextTest];
};
$hxClasses["hex.ioc.assembler.IoCAssemblerSuite"] = hex_ioc_assembler_IoCAssemblerSuite;
hex_ioc_assembler_IoCAssemblerSuite.__name__ = ["hex","ioc","assembler","IoCAssemblerSuite"];
hex_ioc_assembler_IoCAssemblerSuite.prototype = {
	list: null
	,__class__: hex_ioc_assembler_IoCAssemblerSuite
};
var hex_ioc_control_IBuildCommand = function() { };
$hxClasses["hex.ioc.control.IBuildCommand"] = hex_ioc_control_IBuildCommand;
hex_ioc_control_IBuildCommand.__name__ = ["hex","ioc","control","IBuildCommand"];
hex_ioc_control_IBuildCommand.prototype = {
	execute: null
	,__class__: hex_ioc_control_IBuildCommand
};
var hex_ioc_control_BuildArrayCommand = function() {
};
$hxClasses["hex.ioc.control.BuildArrayCommand"] = hex_ioc_control_BuildArrayCommand;
hex_ioc_control_BuildArrayCommand.__name__ = ["hex","ioc","control","BuildArrayCommand"];
hex_ioc_control_BuildArrayCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildArrayCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		var array = [];
		var args = constructorVO["arguments"];
		if(args != null) array = args.slice();
		constructorVO.result = array;
	}
	,__class__: hex_ioc_control_BuildArrayCommand
};
var hex_ioc_control_BuildArrayCommandTest = function() { };
$hxClasses["hex.ioc.control.BuildArrayCommandTest"] = hex_ioc_control_BuildArrayCommandTest;
hex_ioc_control_BuildArrayCommandTest.__name__ = ["hex","ioc","control","BuildArrayCommandTest"];
hex_ioc_control_BuildArrayCommandTest.prototype = {
	testExecute: function() {
		var cmd = new hex_ioc_control_BuildArrayCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Array",[3,"hello world"]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.isInstanceOf(helper.constructorVO.result,Array,"constructorVO.result should be an instance of Array class",{ fileName : "BuildArrayCommandTest.hx", lineNumber : 20, className : "hex.ioc.control.BuildArrayCommandTest", methodName : "testExecute"});
		hex_unittest_assertion_Assert.deepEquals([3,"hello world"],helper.constructorVO.result,"constructorVO.result should agregate the same elements",{ fileName : "BuildArrayCommandTest.hx", lineNumber : 21, className : "hex.ioc.control.BuildArrayCommandTest", methodName : "testExecute"});
	}
	,testExecuteWithNoArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildArrayCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Array",null);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.isInstanceOf(helper.constructorVO.result,Array,"constructorVO.result should be an instance of Array class",{ fileName : "BuildArrayCommandTest.hx", lineNumber : 31, className : "hex.ioc.control.BuildArrayCommandTest", methodName : "testExecuteWithNoArgumentArray"});
	}
	,testExecuteWithEmptyArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildArrayCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Array",[]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.isInstanceOf(helper.constructorVO.result,Array,"constructorVO.result should be an instance of Array class",{ fileName : "BuildArrayCommandTest.hx", lineNumber : 41, className : "hex.ioc.control.BuildArrayCommandTest", methodName : "testExecuteWithEmptyArgumentArray"});
	}
	,testExecuteWithNullArgument: function() {
		var cmd = new hex_ioc_control_BuildArrayCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Array",[null]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.isInstanceOf(helper.constructorVO.result,Array,"constructorVO.result should be an instance of Array class",{ fileName : "BuildArrayCommandTest.hx", lineNumber : 51, className : "hex.ioc.control.BuildArrayCommandTest", methodName : "testExecuteWithNullArgument"});
		hex_unittest_assertion_Assert.deepEquals([null],helper.constructorVO.result,"constructorVO.result should agregate the same elements",{ fileName : "BuildArrayCommandTest.hx", lineNumber : 52, className : "hex.ioc.control.BuildArrayCommandTest", methodName : "testExecuteWithNullArgument"});
	}
	,__class__: hex_ioc_control_BuildArrayCommandTest
};
var hex_ioc_control_BuildBooleanCommand = function() {
};
$hxClasses["hex.ioc.control.BuildBooleanCommand"] = hex_ioc_control_BuildBooleanCommand;
hex_ioc_control_BuildBooleanCommand.__name__ = ["hex","ioc","control","BuildBooleanCommand"];
hex_ioc_control_BuildBooleanCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildBooleanCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		var value = "";
		var args = constructorVO["arguments"];
		if(args != null && args.length > 0) value = args[0];
		if(value == "true") constructorVO.result = true; else if(value == "false") constructorVO.result = false; else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(Std.string(this) + ".build(" + value + ") failed.",{ fileName : "BuildBooleanCommand.hx", lineNumber : 40, className : "hex.ioc.control.BuildBooleanCommand", methodName : "execute"}));
	}
	,__class__: hex_ioc_control_BuildBooleanCommand
};
var hex_ioc_control_BuildBooleanCommandTest = function() { };
$hxClasses["hex.ioc.control.BuildBooleanCommandTest"] = hex_ioc_control_BuildBooleanCommandTest;
hex_ioc_control_BuildBooleanCommandTest.__name__ = ["hex","ioc","control","BuildBooleanCommandTest"];
hex_ioc_control_BuildBooleanCommandTest.prototype = {
	testExecuteWithTrueArgument: function() {
		var cmd = new hex_ioc_control_BuildBooleanCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Bool",["true"]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.isTrue(helper.constructorVO.result,"constructorVO.result should be true",{ fileName : "BuildBooleanCommandTest.hx", lineNumber : 21, className : "hex.ioc.control.BuildBooleanCommandTest", methodName : "testExecuteWithTrueArgument"});
	}
	,testExecuteWithFalseArgument: function() {
		var cmd = new hex_ioc_control_BuildBooleanCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Bool",["false"]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.isFalse(helper.constructorVO.result,"constructorVO.result should be false",{ fileName : "BuildBooleanCommandTest.hx", lineNumber : 31, className : "hex.ioc.control.BuildBooleanCommandTest", methodName : "testExecuteWithFalseArgument"});
	}
	,testExecuteWithInvalidArgument: function() {
		var cmd = new hex_ioc_control_BuildBooleanCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Bool",["a"]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildBooleanCommandTest.hx", lineNumber : 40, className : "hex.ioc.control.BuildBooleanCommandTest", methodName : "testExecuteWithInvalidArgument"});
	}
	,testExecuteWithNoArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildBooleanCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Bool",null);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildBooleanCommandTest.hx", lineNumber : 49, className : "hex.ioc.control.BuildBooleanCommandTest", methodName : "testExecuteWithNoArgumentArray"});
	}
	,testExecuteWithEmptyArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildBooleanCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Bool",[]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildBooleanCommandTest.hx", lineNumber : 58, className : "hex.ioc.control.BuildBooleanCommandTest", methodName : "testExecuteWithEmptyArgumentArray"});
	}
	,testExecuteWithNullArgument: function() {
		var cmd = new hex_ioc_control_BuildBooleanCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Bool",[null]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildBooleanCommandTest.hx", lineNumber : 67, className : "hex.ioc.control.BuildBooleanCommandTest", methodName : "testExecuteWithNullArgument"});
	}
	,__class__: hex_ioc_control_BuildBooleanCommandTest
};
var hex_ioc_control_BuildClassCommand = function() {
};
$hxClasses["hex.ioc.control.BuildClassCommand"] = hex_ioc_control_BuildClassCommand;
hex_ioc_control_BuildClassCommand.__name__ = ["hex","ioc","control","BuildClassCommand"];
hex_ioc_control_BuildClassCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildClassCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		var clazz;
		var qualifiedClassName = "";
		var args = constructorVO["arguments"];
		if(args != null && args.length > 0) qualifiedClassName = "" + Std.string(args[0]);
		try {
			clazz = Type.resolveClass(qualifiedClassName);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			clazz = null;
		}
		if(clazz == null) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("'" + qualifiedClassName + "' is not available",{ fileName : "BuildClassCommand.hx", lineNumber : 42, className : "hex.ioc.control.BuildClassCommand", methodName : "execute"}));
		constructorVO.result = clazz;
	}
	,__class__: hex_ioc_control_BuildClassCommand
};
var hex_ioc_control_BuildClassCommandTest = function() { };
$hxClasses["hex.ioc.control.BuildClassCommandTest"] = hex_ioc_control_BuildClassCommandTest;
hex_ioc_control_BuildClassCommandTest.__name__ = ["hex","ioc","control","BuildClassCommandTest"];
hex_ioc_control_BuildClassCommandTest.prototype = {
	testExecute: function() {
		var cmd = new hex_ioc_control_BuildClassCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Class",["hex.structures.Point"]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.equals(helper.constructorVO.result,hex_structures_Point,"constructorVO.result should be an instance of Point class",{ fileName : "BuildClassCommandTest.hx", lineNumber : 22, className : "hex.ioc.control.BuildClassCommandTest", methodName : "testExecute"});
	}
	,testExecuteWithInvalidArgument: function() {
		var cmd = new hex_ioc_control_BuildClassCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Class",["a"]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildClassCommandTest.hx", lineNumber : 31, className : "hex.ioc.control.BuildClassCommandTest", methodName : "testExecuteWithInvalidArgument"});
	}
	,testExecuteWithNoArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildClassCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Class",null);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildClassCommandTest.hx", lineNumber : 40, className : "hex.ioc.control.BuildClassCommandTest", methodName : "testExecuteWithNoArgumentArray"});
	}
	,testExecuteWithEmptyArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildClassCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Class",[]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildClassCommandTest.hx", lineNumber : 49, className : "hex.ioc.control.BuildClassCommandTest", methodName : "testExecuteWithEmptyArgumentArray"});
	}
	,testExecuteWithNullArgument: function() {
		var cmd = new hex_ioc_control_BuildClassCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Class",[null]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildClassCommandTest.hx", lineNumber : 58, className : "hex.ioc.control.BuildClassCommandTest", methodName : "testExecuteWithNullArgument"});
	}
	,__class__: hex_ioc_control_BuildClassCommandTest
};
var hex_ioc_control_BuildFloatCommand = function() {
};
$hxClasses["hex.ioc.control.BuildFloatCommand"] = hex_ioc_control_BuildFloatCommand;
hex_ioc_control_BuildFloatCommand.__name__ = ["hex","ioc","control","BuildFloatCommand"];
hex_ioc_control_BuildFloatCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildFloatCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		var args = constructorVO["arguments"];
		var number = NaN;
		if(args != null && args.length > 0) number = Std.parseFloat(args[0]);
		if(!isNaN(number)) constructorVO.result = number; else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(Std.string(this) + ".execute(" + number + ") failed.",{ fileName : "BuildFloatCommand.hx", lineNumber : 36, className : "hex.ioc.control.BuildFloatCommand", methodName : "execute"}));
	}
	,__class__: hex_ioc_control_BuildFloatCommand
};
var hex_ioc_control_BuildFloatCommandTest = function() { };
$hxClasses["hex.ioc.control.BuildFloatCommandTest"] = hex_ioc_control_BuildFloatCommandTest;
hex_ioc_control_BuildFloatCommandTest.__name__ = ["hex","ioc","control","BuildFloatCommandTest"];
hex_ioc_control_BuildFloatCommandTest.prototype = {
	testExecuteWithPositiveValue: function() {
		var cmd = new hex_ioc_control_BuildFloatCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Float",["4.7"]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.equals(4.7,helper.constructorVO.result,"constructorVO.result should equal '4.7'",{ fileName : "BuildFloatCommandTest.hx", lineNumber : 21, className : "hex.ioc.control.BuildFloatCommandTest", methodName : "testExecuteWithPositiveValue"});
	}
	,testExecuteWithNegativeValue: function() {
		var cmd = new hex_ioc_control_BuildFloatCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Float",["-3.8"]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.equals(-3.8,helper.constructorVO.result,"constructorVO.result should equal '-3.8'",{ fileName : "BuildFloatCommandTest.hx", lineNumber : 31, className : "hex.ioc.control.BuildFloatCommandTest", methodName : "testExecuteWithNegativeValue"});
	}
	,testExecuteWithInvalidArgument: function() {
		var cmd = new hex_ioc_control_BuildFloatCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Float",["a"]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildFloatCommandTest.hx", lineNumber : 40, className : "hex.ioc.control.BuildFloatCommandTest", methodName : "testExecuteWithInvalidArgument"});
	}
	,testExecuteWithNoArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildFloatCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Float",null);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildFloatCommandTest.hx", lineNumber : 49, className : "hex.ioc.control.BuildFloatCommandTest", methodName : "testExecuteWithNoArgumentArray"});
	}
	,testExecuteWithEmptyArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildFloatCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Float",[]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildFloatCommandTest.hx", lineNumber : 58, className : "hex.ioc.control.BuildFloatCommandTest", methodName : "testExecuteWithEmptyArgumentArray"});
	}
	,testExecuteWithNullArgument: function() {
		var cmd = new hex_ioc_control_BuildFloatCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Float",[null]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildFloatCommandTest.hx", lineNumber : 67, className : "hex.ioc.control.BuildFloatCommandTest", methodName : "testExecuteWithNullArgument"});
	}
	,__class__: hex_ioc_control_BuildFloatCommandTest
};
var hex_ioc_control_BuildFunctionCommand = function() {
};
$hxClasses["hex.ioc.control.BuildFunctionCommand"] = hex_ioc_control_BuildFunctionCommand;
hex_ioc_control_BuildFunctionCommand.__name__ = ["hex","ioc","control","BuildFunctionCommand"];
hex_ioc_control_BuildFunctionCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildFunctionCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		var method;
		var msg;
		var args = constructorVO["arguments"][0].split(".");
		var targetID = args[0];
		var path = args.slice(1).join(".");
		if(!buildHelperVO.coreFactory.isRegisteredWithKey(targetID)) buildHelperVO.contextFactory.buildObject(targetID);
		var target = buildHelperVO.coreFactory.locate(targetID);
		try {
			method = buildHelperVO.coreFactory.fastEvalFromTarget(target,path);
		} catch( error ) {
			if (error instanceof js__$Boot_HaxeError) error = error.val;
			msg = " " + Std.string(this) + ".execute() failed on " + Std.string(target) + " with id '" + targetID + "'. ";
			msg += path + " method can't be found.";
			throw new js__$Boot_HaxeError(new hex_error_Exception(msg,{ fileName : "BuildFunctionCommand.hx", lineNumber : 44, className : "hex.ioc.control.BuildFunctionCommand", methodName : "execute"}));
		}
		constructorVO.result = method;
	}
	,__class__: hex_ioc_control_BuildFunctionCommand
};
var hex_ioc_control_BuildInstanceCommand = function() {
};
$hxClasses["hex.ioc.control.BuildInstanceCommand"] = hex_ioc_control_BuildInstanceCommand;
hex_ioc_control_BuildInstanceCommand.__name__ = ["hex","ioc","control","BuildInstanceCommand"];
hex_ioc_control_BuildInstanceCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildInstanceCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		if(constructorVO.ref != null) {
			var key = constructorVO.ref;
			if(key.indexOf(".") != -1) key = Std.string(key.split(".").shift());
			if(!buildHelperVO.coreFactory.isRegisteredWithKey(key)) buildHelperVO.contextFactory.buildObject(key);
			constructorVO.result = buildHelperVO.coreFactory.locate(key);
			if(constructorVO.ref.indexOf(".") != -1) {
				var args = constructorVO.ref.split(".");
				args.shift();
				constructorVO.result = buildHelperVO.coreFactory.fastEvalFromTarget(constructorVO.result,args.join("."));
			}
		} else {
			if(constructorVO.staticRef != null) constructorVO.result = buildHelperVO.coreFactory.getStaticReference(constructorVO.staticRef); else {
				var classReference = buildHelperVO.coreFactory.getClassReference(constructorVO.type);
				var isModule = hex_util_ClassUtil.classExtendsOrImplements(classReference,hex_module_IModule);
				if(isModule && constructorVO.ID != null && constructorVO.ID.length > 0) {
					hex_domain_DomainExpert.getInstance().registerDomain(hex_domain_DomainUtil.getDomain(constructorVO.ID,hex_domain_Domain));
					hex_metadata_AnnotationProvider.registerToDomain(buildHelperVO.contextFactory.getAnnotationProvider(),hex_domain_DomainUtil.getDomain(constructorVO.ID,hex_domain_Domain));
				}
				constructorVO.result = buildHelperVO.coreFactory.buildInstance(constructorVO.type,constructorVO["arguments"],constructorVO.factory,constructorVO.singleton,constructorVO.injectInto);
			}
			if(js_Boot.__instanceof(constructorVO.result,hex_module_IModule)) buildHelperVO.moduleLocator.register(constructorVO.ID,constructorVO.result);
			if(constructorVO.mapType != null) {
				var classToMap = Type.resolveClass(constructorVO.mapType);
				buildHelperVO.contextFactory.getApplicationContext().getBasicInjector().mapToValue(classToMap,constructorVO.result,constructorVO.ID);
			}
		}
	}
	,__class__: hex_ioc_control_BuildInstanceCommand
};
var hex_ioc_control_BuildIntCommand = function() {
};
$hxClasses["hex.ioc.control.BuildIntCommand"] = hex_ioc_control_BuildIntCommand;
hex_ioc_control_BuildIntCommand.__name__ = ["hex","ioc","control","BuildIntCommand"];
hex_ioc_control_BuildIntCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildIntCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		var args = constructorVO["arguments"];
		var number = 0;
		if(args != null && args.length > 0) number = Std.parseInt(Std.string(args[0])); else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(Std.string(this) + ".execute(" + (args != null && args.length > 0?args[0]:"") + ") failed.",{ fileName : "BuildIntCommand.hx", lineNumber : 30, className : "hex.ioc.control.BuildIntCommand", methodName : "execute"}));
		if(number == null) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(Std.string(this) + ".execute(" + number + ") failed.",{ fileName : "BuildIntCommand.hx", lineNumber : 39, className : "hex.ioc.control.BuildIntCommand", methodName : "execute"})); else constructorVO.result = number;
	}
	,__class__: hex_ioc_control_BuildIntCommand
};
var hex_ioc_control_BuildIntcommandTest = function() { };
$hxClasses["hex.ioc.control.BuildIntcommandTest"] = hex_ioc_control_BuildIntcommandTest;
hex_ioc_control_BuildIntcommandTest.__name__ = ["hex","ioc","control","BuildIntcommandTest"];
hex_ioc_control_BuildIntcommandTest.prototype = {
	testExecuteWithPositiveValue: function() {
		var cmd = new hex_ioc_control_BuildIntCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Int",["4"]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.equals(4,helper.constructorVO.result,"constructorVO.result should equal 4",{ fileName : "BuildIntcommandTest.hx", lineNumber : 22, className : "hex.ioc.control.BuildIntcommandTest", methodName : "testExecuteWithPositiveValue"});
	}
	,testExecuteWithNegativeValue: function() {
		var cmd = new hex_ioc_control_BuildIntCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Int",["-4"]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.equals(-4,helper.constructorVO.result,"constructorVO.result should equal -4",{ fileName : "BuildIntcommandTest.hx", lineNumber : 32, className : "hex.ioc.control.BuildIntcommandTest", methodName : "testExecuteWithNegativeValue"});
	}
	,testExecuteWithInvalidArgument: function() {
		var cmd = new hex_ioc_control_BuildIntCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Int",["a"]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildIntcommandTest.hx", lineNumber : 41, className : "hex.ioc.control.BuildIntcommandTest", methodName : "testExecuteWithInvalidArgument"});
	}
	,testExecuteWithNoArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildIntCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Int",null);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildIntcommandTest.hx", lineNumber : 50, className : "hex.ioc.control.BuildIntcommandTest", methodName : "testExecuteWithNoArgumentArray"});
	}
	,testExecuteWithEmptyArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildIntCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Int",[]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildIntcommandTest.hx", lineNumber : 59, className : "hex.ioc.control.BuildIntcommandTest", methodName : "testExecuteWithEmptyArgumentArray"});
	}
	,testExecuteWithNullArgument: function() {
		var cmd = new hex_ioc_control_BuildIntCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","Int",[null]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildIntcommandTest.hx", lineNumber : 68, className : "hex.ioc.control.BuildIntcommandTest", methodName : "testExecuteWithNullArgument"});
	}
	,__class__: hex_ioc_control_BuildIntcommandTest
};
var hex_ioc_control_BuildMapCommand = function() {
};
$hxClasses["hex.ioc.control.BuildMapCommand"] = hex_ioc_control_BuildMapCommand;
hex_ioc_control_BuildMapCommand.__name__ = ["hex","ioc","control","BuildMapCommand"];
hex_ioc_control_BuildMapCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildMapCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		var map = new hex_collection_HashMap();
		var args = constructorVO["arguments"];
		if(args.length == 0) hex_log_Logger.WARN(Std.string(this) + ".execute(" + Std.string(args) + ") returns an empty HashMap.",null,{ fileName : "BuildMapCommand.hx", lineNumber : 30, className : "hex.ioc.control.BuildMapCommand", methodName : "execute"}); else {
			var _g = 0;
			while(_g < args.length) {
				var item = args[_g];
				++_g;
				if(item.key != null) map.put(item.key,item.value); else haxe_Log.trace(Std.string(this) + ".execute() adds item with a 'null' key for '" + Std.string(item.value) + "' value.",{ fileName : "BuildMapCommand.hx", lineNumber : 43, className : "hex.ioc.control.BuildMapCommand", methodName : "execute"});
			}
		}
		constructorVO.result = map;
		if(constructorVO.mapType != null) buildHelperVO.contextFactory.getApplicationContext().getBasicInjector().mapToValue(hex_collection_HashMap,constructorVO.result,constructorVO.ID);
	}
	,__class__: hex_ioc_control_BuildMapCommand
};
var hex_ioc_control_BuildNullCommand = function() {
};
$hxClasses["hex.ioc.control.BuildNullCommand"] = hex_ioc_control_BuildNullCommand;
hex_ioc_control_BuildNullCommand.__name__ = ["hex","ioc","control","BuildNullCommand"];
hex_ioc_control_BuildNullCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildNullCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		constructorVO.result = null;
	}
	,__class__: hex_ioc_control_BuildNullCommand
};
var hex_ioc_control_BuildNullCommandTest = function() { };
$hxClasses["hex.ioc.control.BuildNullCommandTest"] = hex_ioc_control_BuildNullCommandTest;
hex_ioc_control_BuildNullCommandTest.__name__ = ["hex","ioc","control","BuildNullCommandTest"];
hex_ioc_control_BuildNullCommandTest.prototype = {
	testExecute: function() {
		var cmd = new hex_ioc_control_BuildNullCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test");
		cmd.execute(helper);
		hex_unittest_assertion_Assert.isNull(helper.constructorVO.result,"constructorVO.result should be null",{ fileName : "BuildNullCommandTest.hx", lineNumber : 21, className : "hex.ioc.control.BuildNullCommandTest", methodName : "testExecute"});
	}
	,__class__: hex_ioc_control_BuildNullCommandTest
};
var hex_ioc_control_BuildObjectCommand = function() {
};
$hxClasses["hex.ioc.control.BuildObjectCommand"] = hex_ioc_control_BuildObjectCommand;
hex_ioc_control_BuildObjectCommand.__name__ = ["hex","ioc","control","BuildObjectCommand"];
hex_ioc_control_BuildObjectCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildObjectCommand.prototype = {
	execute: function(buildHelperVO) {
		buildHelperVO.constructorVO.result = { };
	}
	,__class__: hex_ioc_control_BuildObjectCommand
};
var hex_ioc_control_BuildServiceLocatorCommand = function() {
};
$hxClasses["hex.ioc.control.BuildServiceLocatorCommand"] = hex_ioc_control_BuildServiceLocatorCommand;
hex_ioc_control_BuildServiceLocatorCommand.__name__ = ["hex","ioc","control","BuildServiceLocatorCommand"];
hex_ioc_control_BuildServiceLocatorCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildServiceLocatorCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		var serviceLocator = new hex_config_stateful_ServiceLocator();
		var args = constructorVO["arguments"];
		if(args.length <= 0) haxe_Log.trace(Std.string(this) + ".execute(" + Std.string(args) + ") returns an empty ServiceConfig.",{ fileName : "BuildServiceLocatorCommand.hx", lineNumber : 28, className : "hex.ioc.control.BuildServiceLocatorCommand", methodName : "execute"}); else {
			var _g = 0;
			while(_g < args.length) {
				var item = args[_g];
				++_g;
				if(item.key != null) serviceLocator.addService(item.key,item.value,item.mapName); else haxe_Log.trace(Std.string(this) + ".execute() adds item with a 'null' key for '" + Std.string(item.value) + "' value.",{ fileName : "BuildServiceLocatorCommand.hx", lineNumber : 40, className : "hex.ioc.control.BuildServiceLocatorCommand", methodName : "execute"});
			}
		}
		constructorVO.result = serviceLocator;
	}
	,__class__: hex_ioc_control_BuildServiceLocatorCommand
};
var hex_ioc_control_BuildStringCommand = function() {
};
$hxClasses["hex.ioc.control.BuildStringCommand"] = hex_ioc_control_BuildStringCommand;
hex_ioc_control_BuildStringCommand.__name__ = ["hex","ioc","control","BuildStringCommand"];
hex_ioc_control_BuildStringCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildStringCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		var value = null;
		var args = constructorVO["arguments"];
		if(args != null && args.length > 0 && args[0] != null) value = Std.string(args[0]); else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(Std.string(this) + ".execute(" + value + ") returns empty String.",{ fileName : "BuildStringCommand.hx", lineNumber : 32, className : "hex.ioc.control.BuildStringCommand", methodName : "execute"}));
		if(value == null) {
			value = "";
			hex_log_Logger.WARN(Std.string(this) + ".execute(" + value + ") returns empty String.",null,{ fileName : "BuildStringCommand.hx", lineNumber : 39, className : "hex.ioc.control.BuildStringCommand", methodName : "execute"});
		}
		constructorVO.result = value;
	}
	,__class__: hex_ioc_control_BuildStringCommand
};
var hex_ioc_control_BuildStringCommandTest = function() { };
$hxClasses["hex.ioc.control.BuildStringCommandTest"] = hex_ioc_control_BuildStringCommandTest;
hex_ioc_control_BuildStringCommandTest.__name__ = ["hex","ioc","control","BuildStringCommandTest"];
hex_ioc_control_BuildStringCommandTest.prototype = {
	testExecute: function() {
		var cmd = new hex_ioc_control_BuildStringCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","String",["hello world"]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.equals("hello world",helper.constructorVO.result,"constructorVO.result should equal 'hello world'",{ fileName : "BuildStringCommandTest.hx", lineNumber : 21, className : "hex.ioc.control.BuildStringCommandTest", methodName : "testExecute"});
	}
	,testExecuteWithNoArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildStringCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","String",null);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildStringCommandTest.hx", lineNumber : 30, className : "hex.ioc.control.BuildStringCommandTest", methodName : "testExecuteWithNoArgumentArray"});
	}
	,testExecuteWithEmptyArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildStringCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","String",[]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildStringCommandTest.hx", lineNumber : 39, className : "hex.ioc.control.BuildStringCommandTest", methodName : "testExecuteWithEmptyArgumentArray"});
	}
	,testExecuteWithNullArgument: function() {
		var cmd = new hex_ioc_control_BuildStringCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","String",[null]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildStringCommandTest.hx", lineNumber : 48, className : "hex.ioc.control.BuildStringCommandTest", methodName : "testExecuteWithNullArgument"});
	}
	,testExecuteWithArgumentZeroLength: function() {
		var cmd = new hex_ioc_control_BuildStringCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","String",[""]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.equals("",helper.constructorVO.result,"constructorVO.result should equal ''",{ fileName : "BuildStringCommandTest.hx", lineNumber : 58, className : "hex.ioc.control.BuildStringCommandTest", methodName : "testExecuteWithArgumentZeroLength"});
	}
	,__class__: hex_ioc_control_BuildStringCommandTest
};
var hex_ioc_control_BuildUIntCommand = function() {
};
$hxClasses["hex.ioc.control.BuildUIntCommand"] = hex_ioc_control_BuildUIntCommand;
hex_ioc_control_BuildUIntCommand.__name__ = ["hex","ioc","control","BuildUIntCommand"];
hex_ioc_control_BuildUIntCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildUIntCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		var args = constructorVO["arguments"];
		var number = 0;
		if(args != null && args.length > 0) number = Std.parseInt(Std.string(args[0])); else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(Std.string(this) + ".execute(" + (args != null && args.length > 0?args[0]:"") + ") failed.",{ fileName : "BuildUIntCommand.hx", lineNumber : 31, className : "hex.ioc.control.BuildUIntCommand", methodName : "execute"}));
		if(number == null || _$UInt_UInt_$Impl_$.gt(0,number)) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(Std.string(this) + ".execute(" + Std.string(_$UInt_UInt_$Impl_$.toFloat(number)) + ") failed.",{ fileName : "BuildUIntCommand.hx", lineNumber : 40, className : "hex.ioc.control.BuildUIntCommand", methodName : "execute"})); else constructorVO.result = number;
	}
	,__class__: hex_ioc_control_BuildUIntCommand
};
var hex_ioc_control_BuildUIntCommandTest = function() { };
$hxClasses["hex.ioc.control.BuildUIntCommandTest"] = hex_ioc_control_BuildUIntCommandTest;
hex_ioc_control_BuildUIntCommandTest.__name__ = ["hex","ioc","control","BuildUIntCommandTest"];
hex_ioc_control_BuildUIntCommandTest.prototype = {
	testExecute: function() {
		var cmd = new hex_ioc_control_BuildUIntCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","UInt",["4"]);
		cmd.execute(helper);
		hex_unittest_assertion_Assert.equals(4,helper.constructorVO.result,"constructorVO.result should equal 4",{ fileName : "BuildUIntCommandTest.hx", lineNumber : 21, className : "hex.ioc.control.BuildUIntCommandTest", methodName : "testExecute"});
	}
	,testExecuteWithNegativeArgumentValue: function() {
		var cmd = new hex_ioc_control_BuildUIntCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","UInt",["-4"]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildUIntCommandTest.hx", lineNumber : 30, className : "hex.ioc.control.BuildUIntCommandTest", methodName : "testExecuteWithNegativeArgumentValue"});
	}
	,testExecuteWithInvalidArgument: function() {
		var cmd = new hex_ioc_control_BuildUIntCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","UInt",["a"]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildUIntCommandTest.hx", lineNumber : 39, className : "hex.ioc.control.BuildUIntCommandTest", methodName : "testExecuteWithInvalidArgument"});
	}
	,testExecuteWithNoArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildUIntCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","UInt",null);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildUIntCommandTest.hx", lineNumber : 48, className : "hex.ioc.control.BuildUIntCommandTest", methodName : "testExecuteWithNoArgumentArray"});
	}
	,testExecuteWithEmptyArgumentArray: function() {
		var cmd = new hex_ioc_control_BuildUIntCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","UInt",[]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildUIntCommandTest.hx", lineNumber : 57, className : "hex.ioc.control.BuildUIntCommandTest", methodName : "testExecuteWithEmptyArgumentArray"});
	}
	,testExecuteWithNullArgument: function() {
		var cmd = new hex_ioc_control_BuildUIntCommand();
		var helper = new hex_ioc_vo_BuildHelperVO();
		helper.constructorVO = new hex_ioc_vo_ConstructorVO("test","UInt",[null]);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,cmd,$bind(cmd,cmd.execute),[helper],"command execution should throw IllegalArgumentException",{ fileName : "BuildUIntCommandTest.hx", lineNumber : 66, className : "hex.ioc.control.BuildUIntCommandTest", methodName : "testExecuteWithNullArgument"});
	}
	,__class__: hex_ioc_control_BuildUIntCommandTest
};
var hex_ioc_control_BuildXMLCommand = function() {
};
$hxClasses["hex.ioc.control.BuildXMLCommand"] = hex_ioc_control_BuildXMLCommand;
hex_ioc_control_BuildXMLCommand.__name__ = ["hex","ioc","control","BuildXMLCommand"];
hex_ioc_control_BuildXMLCommand.__interfaces__ = [hex_ioc_control_IBuildCommand];
hex_ioc_control_BuildXMLCommand.prototype = {
	execute: function(buildHelperVO) {
		var constructorVO = buildHelperVO.constructorVO;
		var args = constructorVO["arguments"];
		var factory = constructorVO.factory;
		if(args != null || args.length > 0) {
			var source = args[0];
			if(source.length > 0) {
				if(factory == null) constructorVO.result = Xml.parse(source); else try {
					var parser = buildHelperVO.coreFactory.buildInstance(factory);
					constructorVO.result = parser.parse(Xml.parse(source));
				} catch( error ) {
					if (error instanceof js__$Boot_HaxeError) error = error.val;
					throw new js__$Boot_HaxeError(new hex_ioc_error_ParsingException(Std.string(this) + ".execute() failed to deserialize XML with '" + factory + "' deserializer class.",{ fileName : "BuildXMLCommand.hx", lineNumber : 45, className : "hex.ioc.control.BuildXMLCommand", methodName : "execute"}));
				}
			} else {
				haxe_Log.trace(Std.string(this) + ".execute() returns an empty XML.",{ fileName : "BuildXMLCommand.hx", lineNumber : 52, className : "hex.ioc.control.BuildXMLCommand", methodName : "execute"});
				constructorVO.result = Xml.parse("");
			}
		} else {
			haxe_Log.trace(Std.string(this) + ".execute() returns an empty XML.",{ fileName : "BuildXMLCommand.hx", lineNumber : 61, className : "hex.ioc.control.BuildXMLCommand", methodName : "execute"});
			constructorVO.result = Xml.parse("");
		}
	}
	,__class__: hex_ioc_control_BuildXMLCommand
};
var hex_ioc_control_IoCControlSuite = function() {
	this.list = [hex_ioc_control_BuildArrayCommandTest,hex_ioc_control_BuildBooleanCommandTest,hex_ioc_control_BuildClassCommandTest,hex_ioc_control_BuildFloatCommandTest,hex_ioc_control_BuildIntcommandTest,hex_ioc_control_BuildNullCommandTest,hex_ioc_control_BuildStringCommandTest,hex_ioc_control_BuildUIntCommandTest];
};
$hxClasses["hex.ioc.control.IoCControlSuite"] = hex_ioc_control_IoCControlSuite;
hex_ioc_control_IoCControlSuite.__name__ = ["hex","ioc","control","IoCControlSuite"];
hex_ioc_control_IoCControlSuite.prototype = {
	list: null
	,__class__: hex_ioc_control_IoCControlSuite
};
var hex_ioc_core_ContextAttributeList = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException("'ContextAttributeList' class can't be instantiated.",{ fileName : "ContextAttributeList.hx", lineNumber : 35, className : "hex.ioc.core.ContextAttributeList", methodName : "new"}));
};
$hxClasses["hex.ioc.core.ContextAttributeList"] = hex_ioc_core_ContextAttributeList;
hex_ioc_core_ContextAttributeList.__name__ = ["hex","ioc","core","ContextAttributeList"];
hex_ioc_core_ContextAttributeList.prototype = {
	__class__: hex_ioc_core_ContextAttributeList
};
var hex_ioc_core_IContextFactory = function() { };
$hxClasses["hex.ioc.core.IContextFactory"] = hex_ioc_core_IContextFactory;
hex_ioc_core_IContextFactory.__name__ = ["hex","ioc","core","IContextFactory"];
hex_ioc_core_IContextFactory.prototype = {
	registerID: null
	,registerStateTransitionVO: null
	,buildStateTransition: null
	,buildAllStateTransitions: null
	,registerPropertyVO: null
	,deserializeArguments: null
	,registerConstructorVO: null
	,buildObject: null
	,buildAllObjects: null
	,registerDomainListenerVO: null
	,assignDomainListener: null
	,assignAllDomainListeners: null
	,registerMethodCallVO: null
	,callMethod: null
	,callAllMethods: null
	,callModuleInitialisation: null
	,getApplicationContext: null
	,getAnnotationProvider: null
	,getCoreFactory: null
	,release: null
	,__class__: hex_ioc_core_IContextFactory
};
var hex_ioc_core_ContextFactory = function(applicationContextName,applicationContextClass) {
	var domain = hex_domain_DomainUtil.getDomain(applicationContextName,hex_domain_Domain);
	this._contextDispatcher = hex_domain_ApplicationDomainDispatcher.getInstance().getDomainDispatcher(domain);
	var injector = new hex_di_Injector();
	injector.mapToValue(hex_di_IBasicInjector,injector);
	injector.mapToValue(hex_di_IDependencyInjector,injector);
	injector.mapToType(hex_control_macro_IMacroExecutor,hex_control_macro_MacroExecutor);
	this._annotationProvider = new hex_metadata_AnnotationProvider();
	this._annotationProvider.registerInjector(injector);
	this._coreFactory = new hex_ioc_core_CoreFactory(injector,this._annotationProvider);
	if(applicationContextClass != null) this._applicationContext = Type.createInstance(applicationContextClass,[this._contextDispatcher,this._coreFactory,applicationContextName]); else this._applicationContext = new hex_ioc_assembler_ApplicationContext(this._contextDispatcher,this._coreFactory,applicationContextName);
	injector.mapToValue(hex_ioc_assembler_ApplicationContext,this._applicationContext);
	this._coreFactory.register(applicationContextName,this._applicationContext);
	this._contextDispatcher.dispatch(hex_ioc_assembler_ApplicationAssemblerMessage.CONTEXT_PARSED);
	this._init();
};
$hxClasses["hex.ioc.core.ContextFactory"] = hex_ioc_core_ContextFactory;
hex_ioc_core_ContextFactory.__name__ = ["hex","ioc","core","ContextFactory"];
hex_ioc_core_ContextFactory.__interfaces__ = [hex_collection_ILocatorListener,hex_ioc_core_IContextFactory];
hex_ioc_core_ContextFactory.prototype = {
	_annotationProvider: null
	,_contextDispatcher: null
	,_moduleLocator: null
	,_applicationContext: null
	,_commandMap: null
	,_coreFactory: null
	,_applicationDomainHub: null
	,_IDExpert: null
	,_constructorVOLocator: null
	,_propertyVOLocator: null
	,_methodCallVOLocator: null
	,_domainListenerVOLocator: null
	,_stateTransitionVOLocator: null
	,registerID: function(id) {
		return this._IDExpert.register(id);
	}
	,registerStateTransitionVO: function(id,stateTransitionVO) {
		this._stateTransitionVOLocator.register(id,stateTransitionVO);
	}
	,buildStateTransition: function(key) {
		this._stateTransitionVOLocator.buildStateTransition(key);
	}
	,buildAllStateTransitions: function() {
		var keys = this._stateTransitionVOLocator.keys();
		var _g = 0;
		while(_g < keys.length) {
			var key = keys[_g];
			++_g;
			this._stateTransitionVOLocator.buildStateTransition(key);
		}
		this._contextDispatcher.dispatch(hex_ioc_assembler_ApplicationAssemblerMessage.STATE_TRANSITIONS_BUILT);
	}
	,registerPropertyVO: function(id,propertyVO) {
		if(this._propertyVOLocator.isRegisteredWithKey(id)) this._propertyVOLocator.locate(id).push(propertyVO); else this._propertyVOLocator.register(id,[propertyVO]);
	}
	,_getPropertyValue: function(property) {
		if(property.method != null) return this._build(new hex_ioc_vo_ConstructorVO(null,"Function",[property.method])); else if(property.ref != null) return this._build(new hex_ioc_vo_ConstructorVO(null,"Instance",null,null,null,false,property.ref)); else if(property.staticRef != null) return this._coreFactory.getStaticReference(property.staticRef); else {
			var type;
			if(property.type != null) type = property.type; else type = "String";
			return this._build(new hex_ioc_vo_ConstructorVO(property.ownerID,type,[property.value]));
		}
	}
	,_setPropertyValue: function(property,target) {
		var propertyName = property.name;
		if(propertyName.indexOf(".") == -1) Reflect.setProperty(target,propertyName,this._getPropertyValue(property)); else {
			var props = propertyName.split(".");
			propertyName = props.pop();
			var target1 = this._coreFactory.fastEvalFromTarget(target,props.join("."));
			Reflect.setProperty(target1,propertyName,this._getPropertyValue(property));
		}
	}
	,deserializeArguments: function($arguments) {
		var result = null;
		var length = $arguments.length;
		if(length > 0) result = [];
		var _g = 0;
		while(_g < $arguments.length) {
			var obj = $arguments[_g];
			++_g;
			if(js_Boot.__instanceof(obj,hex_ioc_vo_PropertyVO)) result.push(this._getPropertyValue(obj)); else if(js_Boot.__instanceof(obj,hex_ioc_vo_MapVO)) {
				var mapVO = obj;
				mapVO.key = this._getPropertyValue(mapVO.getPropertyKey());
				mapVO.value = this._getPropertyValue(mapVO.getPropertyValue());
				result.push(mapVO);
			}
		}
		return result;
	}
	,onRegister: function(key,instance) {
		if(this._propertyVOLocator.isRegisteredWithKey(key)) {
			var properties = this._propertyVOLocator.locate(key);
			var _g = 0;
			while(_g < properties.length) {
				var p = properties[_g];
				++_g;
				this._setPropertyValue(p,instance);
			}
		}
	}
	,onUnregister: function(key) {
	}
	,handleEvent: function(e) {
	}
	,registerConstructorVO: function(id,constructorVO) {
		this._constructorVOLocator.register(id,constructorVO);
	}
	,buildObject: function(id) {
		if(this._constructorVOLocator.isRegisteredWithKey(id)) {
			var cons = this._constructorVOLocator.locate(id);
			if(cons["arguments"] != null) cons["arguments"] = this.deserializeArguments(cons["arguments"]);
			this._build(cons,id);
			this._constructorVOLocator.unregister(id);
		}
	}
	,buildAllObjects: function() {
		var keys = this._constructorVOLocator.keys();
		var _g = 0;
		while(_g < keys.length) {
			var key = keys[_g];
			++_g;
			this.buildObject(key);
		}
		this._contextDispatcher.dispatch(hex_ioc_assembler_ApplicationAssemblerMessage.OBJECTS_BUILT);
	}
	,registerDomainListenerVO: function(domainListenerVO) {
		this._domainListenerVOLocator.register("" + hex_core_HashCodeFactory.getKey(domainListenerVO),domainListenerVO);
	}
	,assignAllDomainListeners: function() {
		var listeners = this._domainListenerVOLocator.keys();
		var _g = 0;
		while(_g < listeners.length) {
			var key = listeners[_g];
			++_g;
			this.assignDomainListener(key);
		}
		this._domainListenerVOLocator.clear();
		this._contextDispatcher.dispatch(hex_ioc_assembler_ApplicationAssemblerMessage.DOMAIN_LISTENERS_ASSIGNED);
	}
	,assignDomainListener: function(id) {
		var domainListener = this._domainListenerVOLocator.locate(id);
		var listener = this._coreFactory.locate(domainListener.ownerID);
		var args = domainListener["arguments"];
		var service = null;
		if(this._coreFactory.isRegisteredWithKey(domainListener.listenedDomainName)) {
			var located = this._coreFactory.locate(domainListener.listenedDomainName);
			if(js_Boot.__instanceof(located,hex_service_IService)) service = located;
		}
		if(args != null && args.length > 0) {
			var _g = 0;
			while(_g < args.length) {
				var domainListenerArgument = args[_g];
				++_g;
				var method;
				if(js_Boot.__instanceof(listener,hex_event_EventProxy)) method = "handleCallback"; else method = domainListenerArgument.method;
				var messageType;
				if(domainListenerArgument.name != null) messageType = new hex_event_MessageType(domainListenerArgument.name); else messageType = this._coreFactory.getStaticReference(domainListenerArgument.staticRef);
				if(method != null && Reflect.isFunction(Reflect.field(listener,method)) || domainListenerArgument.strategy != null) {
					var callback;
					if(domainListenerArgument.strategy != null) callback = this._getStrategyCallback(listener,method,domainListenerArgument.strategy,domainListenerArgument.injectedInModule); else callback = Reflect.field(listener,method);
					if(service == null) {
						var domain = hex_domain_DomainUtil.getDomain(domainListener.listenedDomainName,hex_domain_Domain);
						this._applicationDomainHub.addHandler(messageType,listener,callback,domain);
					} else service.addHandler(messageType,listener,callback);
				} else if(method == null) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(Std.string(this) + ".assignDomainListener failed. Callback should be defined (use 'method' attribute) in instance of '" + hex_log_Stringifier.stringify(listener) + "' class with '" + domainListener.ownerID + "' id",{ fileName : "ContextFactory.hx", lineNumber : 332, className : "hex.ioc.core.ContextFactory", methodName : "assignDomainListener"})); else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(Std.string(this) + ".assignDomainListener failed. Method named '" + method + "' can't be found in instance of '" + hex_log_Stringifier.stringify(listener) + "' class with '" + domainListener.ownerID + "' id",{ fileName : "ContextFactory.hx", lineNumber : 337, className : "hex.ioc.core.ContextFactory", methodName : "assignDomainListener"}));
			}
			return true;
		} else {
			var domain1 = hex_domain_DomainUtil.getDomain(domainListener.listenedDomainName,hex_domain_Domain);
			return this._applicationDomainHub.addListener(listener,domain1);
		}
	}
	,_getStrategyCallback: function(listener,method,strategyClassName,injectedInModule) {
		if(injectedInModule == null) injectedInModule = false;
		var callback = Reflect.field(listener,method);
		var strategyClass = this._coreFactory.getClassReference(strategyClassName);
		var adapter = new hex_event_ClassAdapter();
		adapter.setCallBackMethod(listener,callback);
		adapter.setAdapterClass(strategyClass);
		adapter.setAnnotationProvider(this._annotationProvider);
		if(injectedInModule && js_Boot.__instanceof(listener,hex_module_IModule)) {
			var basicInjector = listener.getBasicInjector();
			adapter.setFactoryMethod(basicInjector,$bind(basicInjector,basicInjector.instantiateUnmapped));
		} else adapter.setFactoryMethod(this._applicationContext.getBasicInjector(),($_=this._applicationContext.getBasicInjector(),$bind($_,$_.instantiateUnmapped)));
		var f = function(rest) {
			(adapter.getCallbackAdapter())(rest);
		};
		return Reflect.makeVarArgs(f);
	}
	,registerMethodCallVO: function(methodCallVO) {
		var index = this._methodCallVOLocator.keys().length + 1;
		this._methodCallVOLocator.register("" + index,methodCallVO);
	}
	,callMethod: function(id) {
		var method = this._methodCallVOLocator.locate(id);
		var cons = new hex_ioc_vo_ConstructorVO(null,"Function",[method.ownerID + "." + method.name]);
		var func = this._build(cons);
		var args = this.deserializeArguments(method["arguments"]);
		Reflect.callMethod(this._coreFactory.locate(method.ownerID),func,args);
	}
	,callAllMethods: function() {
		var keyList = this._methodCallVOLocator.keys();
		var _g = 0;
		while(_g < keyList.length) {
			var key = keyList[_g];
			++_g;
			this.callMethod(key);
		}
		this._methodCallVOLocator.clear();
		this._contextDispatcher.dispatch(hex_ioc_assembler_ApplicationAssemblerMessage.METHODS_CALLED);
	}
	,callModuleInitialisation: function() {
		this._moduleLocator.callModuleInitialisation();
		this._contextDispatcher.dispatch(hex_ioc_assembler_ApplicationAssemblerMessage.MODULES_INITIALIZED);
	}
	,getApplicationContext: function() {
		return this._applicationContext;
	}
	,getCoreFactory: function() {
		return this._coreFactory;
	}
	,getAnnotationProvider: function() {
		return this._annotationProvider;
	}
	,getStateTransitionVOLocator: function() {
		return this._stateTransitionVOLocator;
	}
	,release: function() {
		this._coreFactory.removeListener(this);
		this._coreFactory.clear();
		this._constructorVOLocator.release();
		this._propertyVOLocator.release();
		this._methodCallVOLocator.release();
		this._domainListenerVOLocator.release();
		this._stateTransitionVOLocator.release();
		this._moduleLocator.release();
		this._commandMap = new haxe_ds_StringMap();
		this._IDExpert.clear();
	}
	,_init: function() {
		this._commandMap = new haxe_ds_StringMap();
		this._applicationDomainHub = hex_domain_ApplicationDomainDispatcher.getInstance();
		this._IDExpert = new hex_ioc_core_IDExpert();
		this._constructorVOLocator = new hex_ioc_locator_ConstructorVOLocator();
		this._propertyVOLocator = new hex_ioc_locator_PropertyVOLocator();
		this._methodCallVOLocator = new hex_ioc_locator_MethodCallVOLocator();
		this._domainListenerVOLocator = new hex_ioc_locator_DomainListenerVOLocator();
		this._stateTransitionVOLocator = new hex_ioc_locator_StateTransitionVOLocator(this);
		this._moduleLocator = new hex_ioc_locator_ModuleLocator(this);
		var value = new hex_ioc_control_BuildArrayCommand();
		this._commandMap.set("Array",value);
		var value1 = new hex_ioc_control_BuildBooleanCommand();
		this._commandMap.set("Bool",value1);
		var value2 = new hex_ioc_control_BuildIntCommand();
		this._commandMap.set("Int",value2);
		var value3 = new hex_ioc_control_BuildNullCommand();
		this._commandMap.set("null",value3);
		var value4 = new hex_ioc_control_BuildFloatCommand();
		this._commandMap.set("Float",value4);
		var value5 = new hex_ioc_control_BuildObjectCommand();
		this._commandMap.set("Object",value5);
		var value6 = new hex_ioc_control_BuildStringCommand();
		this._commandMap.set("String",value6);
		var value7 = new hex_ioc_control_BuildUIntCommand();
		this._commandMap.set("UInt",value7);
		var value8 = new hex_ioc_control_BuildStringCommand();
		this._commandMap.set("Default",value8);
		var value9 = new hex_ioc_control_BuildMapCommand();
		this._commandMap.set("hex.collection.HashMap",value9);
		var value10 = new hex_ioc_control_BuildServiceLocatorCommand();
		this._commandMap.set("hex.config.stateful.ServiceLocator",value10);
		var value11 = new hex_ioc_control_BuildClassCommand();
		this._commandMap.set("Class",value11);
		var value12 = new hex_ioc_control_BuildXMLCommand();
		this._commandMap.set("XML",value12);
		var value13 = new hex_ioc_control_BuildFunctionCommand();
		this._commandMap.set("Function",value13);
		this._coreFactory.addListener(this);
	}
	,_addBuildCommand: function(type,build) {
		this._commandMap.set(type,build);
	}
	,_build: function(constructorVO,id) {
		var type = constructorVO.type;
		var buildCommand;
		if(this._commandMap.exists(type)) buildCommand = this._commandMap.get(type); else buildCommand = new hex_ioc_control_BuildInstanceCommand();
		var builderHelperVO = new hex_ioc_vo_BuildHelperVO();
		builderHelperVO.type = type;
		builderHelperVO.contextFactory = this;
		builderHelperVO.coreFactory = this._coreFactory;
		builderHelperVO.constructorVO = constructorVO;
		builderHelperVO.moduleLocator = this._moduleLocator;
		buildCommand.execute(builderHelperVO);
		if(id != null) this._coreFactory.register(id,constructorVO.result);
		return constructorVO.result;
	}
	,__class__: hex_ioc_core_ContextFactory
};
var hex_ioc_core_ContextNameList = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException("'ContextNameList' class can't be instantiated.",{ fileName : "ContextNameList.hx", lineNumber : 27, className : "hex.ioc.core.ContextNameList", methodName : "new"}));
};
$hxClasses["hex.ioc.core.ContextNameList"] = hex_ioc_core_ContextNameList;
hex_ioc_core_ContextNameList.__name__ = ["hex","ioc","core","ContextNameList"];
hex_ioc_core_ContextNameList.prototype = {
	__class__: hex_ioc_core_ContextNameList
};
var hex_ioc_core_ContextTypeList = function() { };
$hxClasses["hex.ioc.core.ContextTypeList"] = hex_ioc_core_ContextTypeList;
hex_ioc_core_ContextTypeList.__name__ = ["hex","ioc","core","ContextTypeList"];
var hex_ioc_core_ICoreFactory = function() { };
$hxClasses["hex.ioc.core.ICoreFactory"] = hex_ioc_core_ICoreFactory;
hex_ioc_core_ICoreFactory.__name__ = ["hex","ioc","core","ICoreFactory"];
hex_ioc_core_ICoreFactory.__interfaces__ = [hex_collection_ILocator];
hex_ioc_core_ICoreFactory.prototype = {
	getBasicInjector: null
	,clear: null
	,getClassReference: null
	,getStaticReference: null
	,buildInstance: null
	,fastEvalFromTarget: null
	,__class__: hex_ioc_core_ICoreFactory
};
var hex_util_FastEval = function() {
};
$hxClasses["hex.util.FastEval"] = hex_util_FastEval;
hex_util_FastEval.__name__ = ["hex","util","FastEval"];
hex_util_FastEval.fromTarget = function(target,toEval,coreFactory) {
	var members = toEval.split(".");
	var result;
	while(members.length > 0) {
		var member = members.shift();
		result = Reflect.field(target,member);
		if(result == null) {
			if(js_Boot.__instanceof(target,hex_ioc_assembler_ApplicationContext) && coreFactory.isRegisteredWithKey(member)) result = coreFactory.locate(member); else if(js_Boot.__instanceof(target,HTMLElement)) result = (js_Boot.__cast(target , HTMLElement)).getElementsByClassName(member)[0]; else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("ObjectUtil.fastEvalFromTarget(" + Std.string(target) + ", " + toEval + ", " + Std.string(coreFactory) + ") failed.",{ fileName : "FastEval.hx", lineNumber : 42, className : "hex.util.FastEval", methodName : "fromTarget"}));
		}
		target = result;
	}
	return target;
};
hex_util_FastEval.prototype = {
	__class__: hex_util_FastEval
};
var hex_ioc_core_CoreFactory = function(injector,annotationProvider) {
	this._injector = injector;
	this._annotationProvider = annotationProvider;
	this._dispatcher = new hex_event_Dispatcher();
	this._map = new hex_collection_HashMap();
};
$hxClasses["hex.ioc.core.CoreFactory"] = hex_ioc_core_CoreFactory;
hex_ioc_core_CoreFactory.__name__ = ["hex","ioc","core","CoreFactory"];
hex_ioc_core_CoreFactory.__interfaces__ = [hex_ioc_core_ICoreFactory];
hex_ioc_core_CoreFactory.setFastEvalMethod = function(method) {
	hex_ioc_core_CoreFactory._fastEvalMethod = method;
};
hex_ioc_core_CoreFactory.prototype = {
	_injector: null
	,_annotationProvider: null
	,_dispatcher: null
	,_map: null
	,addListener: function(listener) {
		return this._dispatcher.addListener(listener);
	}
	,removeListener: function(listener) {
		return this._dispatcher.removeListener(listener);
	}
	,keys: function() {
		return this._map.getKeys();
	}
	,values: function() {
		return this._map.getValues();
	}
	,locate: function(key) {
		if(this._map.containsKey(key)) return this._map.get(key); else if(key.indexOf(".") != -1) {
			var props = key.split(".");
			var baseKey = props.shift();
			if(this._map.containsKey(baseKey)) {
				var target = this._map.get(baseKey);
				return this.fastEvalFromTarget(target,props.join("."));
			}
		}
		throw new js__$Boot_HaxeError(new hex_error_NoSuchElementException("Can't find item with '" + key + "' key in " + hex_log_Stringifier.stringify(this),{ fileName : "CoreFactory.hx", lineNumber : 75, className : "hex.ioc.core.CoreFactory", methodName : "locate"}));
	}
	,isRegisteredWithKey: function(key) {
		return this._map.containsKey(key);
	}
	,isInstanceRegistered: function(instance) {
		return this._map.containsValue(instance);
	}
	,register: function(key,element) {
		if(!this._map.containsKey(key)) {
			this._map.put(key,element);
			this._dispatcher.dispatch(hex_collection_LocatorMessage.REGISTER,[key,element]);
			return true;
		} else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("register(" + key + ", " + Std.string(element) + ") fails, key is already registered.",{ fileName : "CoreFactory.hx", lineNumber : 98, className : "hex.ioc.core.CoreFactory", methodName : "register"}));
	}
	,unregisterWithKey: function(key) {
		if(this._map.containsKey(key)) {
			var instance = this._map.get(key);
			this._map.remove(key);
			this._dispatcher.dispatch(hex_collection_LocatorMessage.UNREGISTER,[key]);
			return true;
		} else return false;
	}
	,unregister: function(instance) {
		var key = this.getKeyOfInstance(instance);
		if(key != null) return this.unregisterWithKey(key); else return false;
	}
	,getKeyOfInstance: function(instance) {
		var key;
		if(this._map.containsValue(instance)) {
			var keys = this._map.getKeys();
			var _g = 0;
			while(_g < keys.length) {
				var key1 = keys[_g];
				++_g;
				if(this._map.get(key1) == instance) return key1;
			}
		}
		return null;
	}
	,add: function(map) {
		var iterator = map.keys();
		while(iterator.hasNext()) {
			var key = iterator.next();
			try {
				this.register(key,__map_reserved[key] != null?map.getReserved(key):map.h[key]);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,hex_error_IllegalArgumentException) ) {
					e.message = Std.string(this) + ".add() fails. " + e.message;
					throw new js__$Boot_HaxeError(e);
				} else throw(e);
			}
		}
	}
	,getClassReference: function(qualifiedClassName) {
		var classReference = Type.resolveClass(qualifiedClassName);
		if(classReference == null) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(hex_log_Stringifier.stringify(this) + ".getClassReference fails with class named '" + qualifiedClassName + "'",{ fileName : "CoreFactory.hx", lineNumber : 166, className : "hex.ioc.core.CoreFactory", methodName : "getClassReference"}));
		return classReference;
	}
	,getStaticReference: function(qualifiedClassName) {
		var a = qualifiedClassName.split(".");
		var type = a[a.length - 1];
		a.splice(a.length - 1,1);
		var classReference = this.getClassReference(a.join("."));
		var staticRef = Reflect.field(classReference,type);
		if(staticRef == null) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(hex_log_Stringifier.stringify(this) + ".getStaticReference fails with '" + qualifiedClassName + "'",{ fileName : "CoreFactory.hx", lineNumber : 182, className : "hex.ioc.core.CoreFactory", methodName : "getStaticReference"}));
		return staticRef;
	}
	,buildInstance: function(qualifiedClassName,args,factoryMethod,singletonAccess,instantiateUnmapped) {
		if(instantiateUnmapped == null) instantiateUnmapped = false;
		var classReference;
		try {
			classReference = this.getClassReference(qualifiedClassName);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,hex_error_IllegalArgumentException) ) {
				throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("'" + qualifiedClassName + "' class is not available in current domain",{ fileName : "CoreFactory.hx", lineNumber : 198, className : "hex.ioc.core.CoreFactory", methodName : "buildInstance"}));
			} else throw(e);
		}
		var obj = null;
		if(instantiateUnmapped) obj = this._injector.instantiateUnmapped(classReference); else if(factoryMethod != null) {
			if(singletonAccess != null) {
				var inst = null;
				var singletonCall = Reflect.field(classReference,singletonAccess);
				if(singletonCall != null) inst = singletonCall(); else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(qualifiedClassName + "." + singletonAccess + "()' singleton access failed.",{ fileName : "CoreFactory.hx", lineNumber : 220, className : "hex.ioc.core.CoreFactory", methodName : "buildInstance"}));
				var methodReference = Reflect.field(inst,factoryMethod);
				if(methodReference != null) obj = Reflect.callMethod(inst,methodReference,args); else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(qualifiedClassName + "." + singletonAccess + "()." + factoryMethod + "()' factory method call failed.",{ fileName : "CoreFactory.hx", lineNumber : 230, className : "hex.ioc.core.CoreFactory", methodName : "buildInstance"}));
			} else {
				var methodReference1 = Reflect.field(classReference,factoryMethod);
				if(methodReference1 != null) obj = Reflect.callMethod(classReference,methodReference1,args); else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(qualifiedClassName + "." + factoryMethod + "()' factory method call failed.",{ fileName : "CoreFactory.hx", lineNumber : 243, className : "hex.ioc.core.CoreFactory", methodName : "buildInstance"}));
			}
		} else if(singletonAccess != null) {
			var singletonCall1 = Reflect.field(classReference,singletonAccess);
			if(singletonCall1 != null) obj = singletonCall1(); else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(qualifiedClassName + "." + singletonAccess + "()' singleton call failed.",{ fileName : "CoreFactory.hx", lineNumber : 256, className : "hex.ioc.core.CoreFactory", methodName : "buildInstance"}));
		} else {
			try {
				obj = Type.createInstance(classReference,args != null?args:[]);
			} catch( e1 ) {
				if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
				throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("Instantiation of class '" + qualifiedClassName + "' failed with arguments: " + Std.string(args) + " : " + Std.string(e1),{ fileName : "CoreFactory.hx", lineNumber : 267, className : "hex.ioc.core.CoreFactory", methodName : "buildInstance"}));
			}
			if(js_Boot.__instanceof(obj,hex_core_IAnnotationParsable)) this._annotationProvider.parse(obj);
			if(js_Boot.__instanceof(obj,hex_service_IService)) obj.createConfiguration();
		}
		return obj;
	}
	,clear: function() {
		this._map.clear();
	}
	,getBasicInjector: function() {
		return this._injector;
	}
	,fastEvalFromTarget: function(target,toEval) {
		return hex_ioc_core_CoreFactory._fastEvalMethod(target,toEval,this);
	}
	,__class__: hex_ioc_core_CoreFactory
};
var hex_ioc_core_CoreFactoryTest = function() { };
$hxClasses["hex.ioc.core.CoreFactoryTest"] = hex_ioc_core_CoreFactoryTest;
hex_ioc_core_CoreFactoryTest.__name__ = ["hex","ioc","core","CoreFactoryTest"];
hex_ioc_core_CoreFactoryTest.prototype = {
	_coreFactory: null
	,setUp: function() {
		this._coreFactory = new hex_ioc_core_CoreFactory(new hex_MockDependencyInjector(),new hex_ioc_core__$CoreFactoryTest_MockAnnotationDataProvider());
	}
	,tearDown: function() {
		this._coreFactory = null;
	}
	,testRegister: function() {
		var listener = new hex_ioc_core__$CoreFactoryTest_MockCoreFactoryListener();
		this._coreFactory.addListener(listener);
		var value = new hex_ioc_core__$CoreFactoryTest_MockValue();
		hex_unittest_assertion_Assert.isFalse(this._coreFactory.isRegisteredWithKey("key"),"'isRegisteredWithKey' should return false",{ fileName : "CoreFactoryTest.hx", lineNumber : 44, className : "hex.ioc.core.CoreFactoryTest", methodName : "testRegister"});
		hex_unittest_assertion_Assert.isFalse(this._coreFactory.isInstanceRegistered(value),"'isInstanceRegistered' should return false",{ fileName : "CoreFactoryTest.hx", lineNumber : 45, className : "hex.ioc.core.CoreFactoryTest", methodName : "testRegister"});
		hex_unittest_assertion_Assert.isTrue(this._coreFactory.register("key",value),"'register' should return true",{ fileName : "CoreFactoryTest.hx", lineNumber : 47, className : "hex.ioc.core.CoreFactoryTest", methodName : "testRegister"});
		hex_unittest_assertion_Assert.equals(1,listener.registerEventCount,"listener should have received a register event",{ fileName : "CoreFactoryTest.hx", lineNumber : 48, className : "hex.ioc.core.CoreFactoryTest", methodName : "testRegister"});
		hex_unittest_assertion_Assert.equals("key",listener.lastRegisterKeyReceived,"event key should be the same",{ fileName : "CoreFactoryTest.hx", lineNumber : 49, className : "hex.ioc.core.CoreFactoryTest", methodName : "testRegister"});
		hex_unittest_assertion_Assert.equals(value,listener.lastRegisterValueReceived,"event value should be the same",{ fileName : "CoreFactoryTest.hx", lineNumber : 50, className : "hex.ioc.core.CoreFactoryTest", methodName : "testRegister"});
		hex_unittest_assertion_Assert.equals(0,listener.unregisterEventCount,"listener should not have received an unregister event",{ fileName : "CoreFactoryTest.hx", lineNumber : 51, className : "hex.ioc.core.CoreFactoryTest", methodName : "testRegister"});
		hex_unittest_assertion_Assert.isTrue(this._coreFactory.isRegisteredWithKey("key"),"'isRegisteredWithKey' should return true",{ fileName : "CoreFactoryTest.hx", lineNumber : 53, className : "hex.ioc.core.CoreFactoryTest", methodName : "testRegister"});
		hex_unittest_assertion_Assert.isTrue(this._coreFactory.isInstanceRegistered(value),"'isInstanceRegistered' should return true",{ fileName : "CoreFactoryTest.hx", lineNumber : 54, className : "hex.ioc.core.CoreFactoryTest", methodName : "testRegister"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,this._coreFactory,($_=this._coreFactory,$bind($_,$_.register)),["key",new hex_ioc_core__$CoreFactoryTest_MockValue()],"'register' should throw IllegalArgumentException when used twice with the same key",{ fileName : "CoreFactoryTest.hx", lineNumber : 55, className : "hex.ioc.core.CoreFactoryTest", methodName : "testRegister"});
	}
	,testUnregisterWithKey: function() {
		var listener = new hex_ioc_core__$CoreFactoryTest_MockCoreFactoryListener();
		this._coreFactory.addListener(listener);
		var value = new hex_ioc_core__$CoreFactoryTest_MockValue();
		this._coreFactory.register("key",value);
		listener.registerEventCount = 0;
		hex_unittest_assertion_Assert.isTrue(this._coreFactory.unregisterWithKey("key"),"'unregisterWithKey' should return true",{ fileName : "CoreFactoryTest.hx", lineNumber : 68, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregisterWithKey"});
		hex_unittest_assertion_Assert.equals(1,listener.unregisterEventCount,"listener should have received an unregister event",{ fileName : "CoreFactoryTest.hx", lineNumber : 70, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregisterWithKey"});
		hex_unittest_assertion_Assert.equals("key",listener.lastRegisterKeyReceived,"event key should be the same",{ fileName : "CoreFactoryTest.hx", lineNumber : 71, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregisterWithKey"});
		hex_unittest_assertion_Assert.equals(value,listener.lastRegisterValueReceived,"event value should be the same",{ fileName : "CoreFactoryTest.hx", lineNumber : 72, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregisterWithKey"});
		hex_unittest_assertion_Assert.equals(0,listener.registerEventCount,"listener should not have received a register event",{ fileName : "CoreFactoryTest.hx", lineNumber : 73, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregisterWithKey"});
		hex_unittest_assertion_Assert.isFalse(this._coreFactory.isRegisteredWithKey("key"),"'isRegisteredWithKey' should return false",{ fileName : "CoreFactoryTest.hx", lineNumber : 75, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregisterWithKey"});
		hex_unittest_assertion_Assert.isFalse(this._coreFactory.isInstanceRegistered(value),"'isInstanceRegistered' should return false",{ fileName : "CoreFactoryTest.hx", lineNumber : 76, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregisterWithKey"});
		hex_unittest_assertion_Assert.isFalse(this._coreFactory.unregisterWithKey("key"),"'unregisterWithKey' should return false",{ fileName : "CoreFactoryTest.hx", lineNumber : 77, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregisterWithKey"});
	}
	,testUnregister: function() {
		var listener = new hex_ioc_core__$CoreFactoryTest_MockCoreFactoryListener();
		this._coreFactory.addListener(listener);
		var value = new hex_ioc_core__$CoreFactoryTest_MockValue();
		this._coreFactory.register("key",value);
		listener.registerEventCount = 0;
		hex_unittest_assertion_Assert.isTrue(this._coreFactory.unregister(value),"'unregister' should return true",{ fileName : "CoreFactoryTest.hx", lineNumber : 90, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregister"});
		hex_unittest_assertion_Assert.equals(1,listener.unregisterEventCount,"listener should have received an unregister event",{ fileName : "CoreFactoryTest.hx", lineNumber : 92, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregister"});
		hex_unittest_assertion_Assert.equals("key",listener.lastRegisterKeyReceived,"event key should be the same",{ fileName : "CoreFactoryTest.hx", lineNumber : 93, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregister"});
		hex_unittest_assertion_Assert.equals(value,listener.lastRegisterValueReceived,"event value should be the same",{ fileName : "CoreFactoryTest.hx", lineNumber : 94, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregister"});
		hex_unittest_assertion_Assert.equals(0,listener.registerEventCount,"listener should not have received a register event",{ fileName : "CoreFactoryTest.hx", lineNumber : 95, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregister"});
		hex_unittest_assertion_Assert.isFalse(this._coreFactory.isRegisteredWithKey("key"),"'isRegisteredWithKey' should return false",{ fileName : "CoreFactoryTest.hx", lineNumber : 97, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregister"});
		hex_unittest_assertion_Assert.isFalse(this._coreFactory.isInstanceRegistered(value),"'isInstanceRegistered' should return false",{ fileName : "CoreFactoryTest.hx", lineNumber : 98, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregister"});
		hex_unittest_assertion_Assert.isFalse(this._coreFactory.unregister(value),"'unregister' should return false",{ fileName : "CoreFactoryTest.hx", lineNumber : 99, className : "hex.ioc.core.CoreFactoryTest", methodName : "testUnregister"});
	}
	,testGetKeyOfInstance: function() {
		hex_unittest_assertion_Assert.isNull(this._coreFactory.getKeyOfInstance("key"),"'getKeyOfInstance' should return null",{ fileName : "CoreFactoryTest.hx", lineNumber : 105, className : "hex.ioc.core.CoreFactoryTest", methodName : "testGetKeyOfInstance"});
		var value = new hex_ioc_core__$CoreFactoryTest_MockValue();
		this._coreFactory.register("key",value);
		hex_unittest_assertion_Assert.equals("key",this._coreFactory.getKeyOfInstance(value),"'getKeyOfInstance' should return value associated to the key",{ fileName : "CoreFactoryTest.hx", lineNumber : 108, className : "hex.ioc.core.CoreFactoryTest", methodName : "testGetKeyOfInstance"});
	}
	,testGetClassReference: function() {
		hex_unittest_assertion_Assert.equals(hex_ioc_core_CoreFactoryTest,this._coreFactory.getClassReference("hex.ioc.core.CoreFactoryTest"),"'getClassReference' should return the right class reference",{ fileName : "CoreFactoryTest.hx", lineNumber : 114, className : "hex.ioc.core.CoreFactoryTest", methodName : "testGetClassReference"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,this._coreFactory,($_=this._coreFactory,$bind($_,$_.getClassReference)),["dummy.unavailable.Class"],"'getClassReference' should throw IllegalArgumentException",{ fileName : "CoreFactoryTest.hx", lineNumber : 115, className : "hex.ioc.core.CoreFactoryTest", methodName : "testGetClassReference"});
	}
	,testGetStaticReference: function() {
		hex_unittest_assertion_Assert.equals("static_ref",this._coreFactory.getStaticReference("hex.ioc.core.CoreFactoryTest.STATIC_REF"),"'getStaticReference' should return the right static property",{ fileName : "CoreFactoryTest.hx", lineNumber : 121, className : "hex.ioc.core.CoreFactoryTest", methodName : "testGetStaticReference"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalArgumentException,this._coreFactory,($_=this._coreFactory,$bind($_,$_.getStaticReference)),["hex.ioc.core.CoreFactoryTest.UnavailableStaticRef"],"'getStaticReference' should throw IllegalArgumentException",{ fileName : "CoreFactoryTest.hx", lineNumber : 122, className : "hex.ioc.core.CoreFactoryTest", methodName : "testGetStaticReference"});
	}
	,testBuildInstanceWithArguments: function() {
		var p = this._coreFactory.buildInstance("hex.structures.Point",[2,3]);
		hex_unittest_assertion_Assert.isNotNull(p,"'p' should not be null",{ fileName : "CoreFactoryTest.hx", lineNumber : 129, className : "hex.ioc.core.CoreFactoryTest", methodName : "testBuildInstanceWithArguments"});
		hex_unittest_assertion_Assert.equals(2,p.x,"'p.x' should return 2",{ fileName : "CoreFactoryTest.hx", lineNumber : 130, className : "hex.ioc.core.CoreFactoryTest", methodName : "testBuildInstanceWithArguments"});
		hex_unittest_assertion_Assert.equals(3,p.y,"'p.x' should return 3",{ fileName : "CoreFactoryTest.hx", lineNumber : 131, className : "hex.ioc.core.CoreFactoryTest", methodName : "testBuildInstanceWithArguments"});
	}
	,testBuildInstanceWithSingletonAccess: function() {
		var instance = this._coreFactory.buildInstance("hex.ioc.core.MockClassForCoreFactoryTest",null,null,"getInstance");
		hex_unittest_assertion_Assert.isInstanceOf(instance,hex_ioc_core_MockClassForCoreFactoryTest,"should be instance of 'MockClassForCoreFactoryTest'",{ fileName : "CoreFactoryTest.hx", lineNumber : 138, className : "hex.ioc.core.CoreFactoryTest", methodName : "testBuildInstanceWithSingletonAccess"});
	}
	,testBuildInstanceWithFactoryAccess: function() {
		var size = this._coreFactory.buildInstance("hex.ioc.core.MockClassForCoreFactoryTest",[20,30],"getSize",null);
		hex_unittest_assertion_Assert.isNotNull(size,"'size' should not be null",{ fileName : "CoreFactoryTest.hx", lineNumber : 145, className : "hex.ioc.core.CoreFactoryTest", methodName : "testBuildInstanceWithFactoryAccess"});
		hex_unittest_assertion_Assert.equals(20,size.width,"'size.width' should return 20",{ fileName : "CoreFactoryTest.hx", lineNumber : 146, className : "hex.ioc.core.CoreFactoryTest", methodName : "testBuildInstanceWithFactoryAccess"});
		hex_unittest_assertion_Assert.equals(30,size.height,"'size.height' should return 30",{ fileName : "CoreFactoryTest.hx", lineNumber : 147, className : "hex.ioc.core.CoreFactoryTest", methodName : "testBuildInstanceWithFactoryAccess"});
	}
	,testBuildInstanceWithFactoryAndSingletonAccess: function() {
		var p = this._coreFactory.buildInstance("hex.ioc.core.MockClassForCoreFactoryTest",[2,3],"getPoint","getInstance");
		hex_unittest_assertion_Assert.isNotNull(p,"'p' should not be null",{ fileName : "CoreFactoryTest.hx", lineNumber : 154, className : "hex.ioc.core.CoreFactoryTest", methodName : "testBuildInstanceWithFactoryAndSingletonAccess"});
		hex_unittest_assertion_Assert.equals(2,p.x,"'p.x' should return 2",{ fileName : "CoreFactoryTest.hx", lineNumber : 155, className : "hex.ioc.core.CoreFactoryTest", methodName : "testBuildInstanceWithFactoryAndSingletonAccess"});
		hex_unittest_assertion_Assert.equals(3,p.y,"'p.x' should return 3",{ fileName : "CoreFactoryTest.hx", lineNumber : 156, className : "hex.ioc.core.CoreFactoryTest", methodName : "testBuildInstanceWithFactoryAndSingletonAccess"});
	}
	,testBuildInstanceWithInjector: function() {
		var instance = this._coreFactory.buildInstance("hex.ioc.core.MockClassForCoreFactoryTest",null,null,null,true);
		hex_unittest_assertion_Assert.isInstanceOf(instance,hex_ioc_core_MockClassForCoreFactoryTest,"should be instance of 'MockClassForCoreFactoryTest'",{ fileName : "CoreFactoryTest.hx", lineNumber : 163, className : "hex.ioc.core.CoreFactoryTest", methodName : "testBuildInstanceWithInjector"});
	}
	,__class__: hex_ioc_core_CoreFactoryTest
};
var hex_ioc_core__$CoreFactoryTest_MockValue = function() {
};
$hxClasses["hex.ioc.core._CoreFactoryTest.MockValue"] = hex_ioc_core__$CoreFactoryTest_MockValue;
hex_ioc_core__$CoreFactoryTest_MockValue.__name__ = ["hex","ioc","core","_CoreFactoryTest","MockValue"];
hex_ioc_core__$CoreFactoryTest_MockValue.prototype = {
	__class__: hex_ioc_core__$CoreFactoryTest_MockValue
};
var hex_ioc_core__$CoreFactoryTest_MockCoreFactoryListener = function() {
	this.unregisterEventCount = 0;
	this.registerEventCount = 0;
};
$hxClasses["hex.ioc.core._CoreFactoryTest.MockCoreFactoryListener"] = hex_ioc_core__$CoreFactoryTest_MockCoreFactoryListener;
hex_ioc_core__$CoreFactoryTest_MockCoreFactoryListener.__name__ = ["hex","ioc","core","_CoreFactoryTest","MockCoreFactoryListener"];
hex_ioc_core__$CoreFactoryTest_MockCoreFactoryListener.__interfaces__ = [hex_collection_ILocatorListener];
hex_ioc_core__$CoreFactoryTest_MockCoreFactoryListener.prototype = {
	lastRegisterKeyReceived: null
	,lastRegisterValueReceived: null
	,registerEventCount: null
	,lastUnregisterKeyReceived: null
	,unregisterEventCount: null
	,onRegister: function(key,value) {
		this.lastRegisterKeyReceived = key;
		this.lastRegisterValueReceived = value;
		this.registerEventCount++;
	}
	,onUnregister: function(key) {
		this.lastUnregisterKeyReceived = key;
		this.unregisterEventCount++;
	}
	,handleEvent: function(e) {
	}
	,__class__: hex_ioc_core__$CoreFactoryTest_MockCoreFactoryListener
};
var hex_metadata_IAnnotationProvider = function() { };
$hxClasses["hex.metadata.IAnnotationProvider"] = hex_metadata_IAnnotationProvider;
hex_metadata_IAnnotationProvider.__name__ = ["hex","metadata","IAnnotationProvider"];
hex_metadata_IAnnotationProvider.prototype = {
	registerMetaData: null
	,clear: null
	,parse: null
	,registerInjector: null
	,unregisterInjector: null
	,__class__: hex_metadata_IAnnotationProvider
};
var hex_ioc_core__$CoreFactoryTest_MockAnnotationDataProvider = function() {
};
$hxClasses["hex.ioc.core._CoreFactoryTest.MockAnnotationDataProvider"] = hex_ioc_core__$CoreFactoryTest_MockAnnotationDataProvider;
hex_ioc_core__$CoreFactoryTest_MockAnnotationDataProvider.__name__ = ["hex","ioc","core","_CoreFactoryTest","MockAnnotationDataProvider"];
hex_ioc_core__$CoreFactoryTest_MockAnnotationDataProvider.__interfaces__ = [hex_metadata_IAnnotationProvider];
hex_ioc_core__$CoreFactoryTest_MockAnnotationDataProvider.prototype = {
	registerMetaData: function(metaDataName,scope,providerMethod) {
	}
	,clear: function() {
	}
	,parse: function(object) {
	}
	,registerInjector: function(injector) {
	}
	,unregisterInjector: function(injector) {
	}
	,__class__: hex_ioc_core__$CoreFactoryTest_MockAnnotationDataProvider
};
var hex_ioc_core_IDExpert = function() {
	this._map = new haxe_ds_StringMap();
};
$hxClasses["hex.ioc.core.IDExpert"] = hex_ioc_core_IDExpert;
hex_ioc_core_IDExpert.__name__ = ["hex","ioc","core","IDExpert"];
hex_ioc_core_IDExpert.prototype = {
	_map: null
	,isRegistered: function(id) {
		return this._map.exists(id);
	}
	,clear: function() {
		this._map = new haxe_ds_StringMap();
	}
	,register: function(id) {
		if(this._map.exists(id)) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(Std.string(this) + ".register(" + id + ") failed. This id was already registered, check conflicts in your config file.",{ fileName : "IDExpert.hx", lineNumber : 32, className : "hex.ioc.core.IDExpert", methodName : "register"})); else {
			this._map.set(id,true);
			return true;
		}
		return false;
	}
	,unregister: function(id) {
		if(this.isRegistered(id)) {
			this._map.remove(id);
			return true;
		} else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(Std.string(this) + ".unregister(" + id + ") failed.",{ fileName : "IDExpert.hx", lineNumber : 52, className : "hex.ioc.core.IDExpert", methodName : "unregister"}));
		return false;
	}
	,__class__: hex_ioc_core_IDExpert
};
var hex_ioc_core_IoCCoreSuite = function() {
	this.list = [hex_ioc_core_CoreFactoryTest];
};
$hxClasses["hex.ioc.core.IoCCoreSuite"] = hex_ioc_core_IoCCoreSuite;
hex_ioc_core_IoCCoreSuite.__name__ = ["hex","ioc","core","IoCCoreSuite"];
hex_ioc_core_IoCCoreSuite.prototype = {
	list: null
	,__class__: hex_ioc_core_IoCCoreSuite
};
var hex_ioc_core_MockClassForCoreFactoryTest = function() {
};
$hxClasses["hex.ioc.core.MockClassForCoreFactoryTest"] = hex_ioc_core_MockClassForCoreFactoryTest;
hex_ioc_core_MockClassForCoreFactoryTest.__name__ = ["hex","ioc","core","MockClassForCoreFactoryTest"];
hex_ioc_core_MockClassForCoreFactoryTest.getInstance = function() {
	if(hex_ioc_core_MockClassForCoreFactoryTest._Instance == null) hex_ioc_core_MockClassForCoreFactoryTest._Instance = new hex_ioc_core_MockClassForCoreFactoryTest();
	return hex_ioc_core_MockClassForCoreFactoryTest._Instance;
};
hex_ioc_core_MockClassForCoreFactoryTest.getSize = function(width,height) {
	return new hex_structures_Size(width,height);
};
hex_ioc_core_MockClassForCoreFactoryTest.prototype = {
	getPoint: function(x,y) {
		return new hex_structures_Point(x,y);
	}
	,__class__: hex_ioc_core_MockClassForCoreFactoryTest
};
var hex_ioc_di_ContextOwnerWrapper = function(coreFactory,id) {
	this._coreFactory = coreFactory;
	this._id = id;
};
$hxClasses["hex.ioc.di.ContextOwnerWrapper"] = hex_ioc_di_ContextOwnerWrapper;
hex_ioc_di_ContextOwnerWrapper.__name__ = ["hex","ioc","di","ContextOwnerWrapper"];
hex_ioc_di_ContextOwnerWrapper.__interfaces__ = [hex_di_IContextOwner];
hex_ioc_di_ContextOwnerWrapper.prototype = {
	_coreFactory: null
	,_id: null
	,getBasicInjector: function() {
		return this._coreFactory.locate(this._id).getBasicInjector();
	}
	,__class__: hex_ioc_di_ContextOwnerWrapper
};
var hex_ioc_error_BuildingException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.ioc.error.BuildingException"] = hex_ioc_error_BuildingException;
hex_ioc_error_BuildingException.__name__ = ["hex","ioc","error","BuildingException"];
hex_ioc_error_BuildingException.__super__ = hex_error_Exception;
hex_ioc_error_BuildingException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_ioc_error_BuildingException
});
var hex_ioc_error_ParsingException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.ioc.error.ParsingException"] = hex_ioc_error_ParsingException;
hex_ioc_error_ParsingException.__name__ = ["hex","ioc","error","ParsingException"];
hex_ioc_error_ParsingException.__super__ = hex_error_Exception;
hex_ioc_error_ParsingException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_ioc_error_ParsingException
});
var hex_ioc_locator_ConstructorVOLocator = function() {
	hex_collection_Locator.call(this);
};
$hxClasses["hex.ioc.locator.ConstructorVOLocator"] = hex_ioc_locator_ConstructorVOLocator;
hex_ioc_locator_ConstructorVOLocator.__name__ = ["hex","ioc","locator","ConstructorVOLocator"];
hex_ioc_locator_ConstructorVOLocator.__super__ = hex_collection_Locator;
hex_ioc_locator_ConstructorVOLocator.prototype = $extend(hex_collection_Locator.prototype,{
	_dispatchRegisterEvent: function(key,element) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.REGISTER,[key,element]);
	}
	,_dispatchUnregisterEvent: function(key) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.UNREGISTER,[key]);
	}
	,__class__: hex_ioc_locator_ConstructorVOLocator
});
var hex_ioc_locator_DomainListenerVOLocator = function() {
	hex_collection_Locator.call(this);
};
$hxClasses["hex.ioc.locator.DomainListenerVOLocator"] = hex_ioc_locator_DomainListenerVOLocator;
hex_ioc_locator_DomainListenerVOLocator.__name__ = ["hex","ioc","locator","DomainListenerVOLocator"];
hex_ioc_locator_DomainListenerVOLocator.__super__ = hex_collection_Locator;
hex_ioc_locator_DomainListenerVOLocator.prototype = $extend(hex_collection_Locator.prototype,{
	_dispatchRegisterEvent: function(key,element) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.REGISTER,[key,element]);
	}
	,_dispatchUnregisterEvent: function(key) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.UNREGISTER,[key]);
	}
	,__class__: hex_ioc_locator_DomainListenerVOLocator
});
var hex_ioc_locator_MethodCallVOLocator = function() {
	hex_collection_Locator.call(this);
};
$hxClasses["hex.ioc.locator.MethodCallVOLocator"] = hex_ioc_locator_MethodCallVOLocator;
hex_ioc_locator_MethodCallVOLocator.__name__ = ["hex","ioc","locator","MethodCallVOLocator"];
hex_ioc_locator_MethodCallVOLocator.__super__ = hex_collection_Locator;
hex_ioc_locator_MethodCallVOLocator.prototype = $extend(hex_collection_Locator.prototype,{
	_dispatchRegisterEvent: function(key,element) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.REGISTER,[key,element]);
	}
	,_dispatchUnregisterEvent: function(key) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.UNREGISTER,[key]);
	}
	,__class__: hex_ioc_locator_MethodCallVOLocator
});
var hex_ioc_locator_ModuleLocator = function(builderFactory) {
	hex_collection_Locator.call(this);
	this._builderFactory = builderFactory;
};
$hxClasses["hex.ioc.locator.ModuleLocator"] = hex_ioc_locator_ModuleLocator;
hex_ioc_locator_ModuleLocator.__name__ = ["hex","ioc","locator","ModuleLocator"];
hex_ioc_locator_ModuleLocator.__super__ = hex_collection_Locator;
hex_ioc_locator_ModuleLocator.prototype = $extend(hex_collection_Locator.prototype,{
	_builderFactory: null
	,callModuleInitialisation: function() {
		var modules = this.values();
		var _g = 0;
		while(_g < modules.length) {
			var module = modules[_g];
			++_g;
			module.initialize();
		}
		this.clear();
	}
	,_dispatchRegisterEvent: function(key,element) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.REGISTER,[key,element]);
	}
	,_dispatchUnregisterEvent: function(key) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.UNREGISTER,[key]);
	}
	,__class__: hex_ioc_locator_ModuleLocator
});
var hex_ioc_locator_PropertyVOLocator = function() {
	hex_collection_Locator.call(this);
};
$hxClasses["hex.ioc.locator.PropertyVOLocator"] = hex_ioc_locator_PropertyVOLocator;
hex_ioc_locator_PropertyVOLocator.__name__ = ["hex","ioc","locator","PropertyVOLocator"];
hex_ioc_locator_PropertyVOLocator.__super__ = hex_collection_Locator;
hex_ioc_locator_PropertyVOLocator.prototype = $extend(hex_collection_Locator.prototype,{
	__class__: hex_ioc_locator_PropertyVOLocator
});
var hex_ioc_locator_StateTransitionVOLocator = function(builderFactory) {
	hex_collection_Locator.call(this);
	this._builderFactory = builderFactory;
	this._stateUnmapper = new hex_collection_HashMap();
};
$hxClasses["hex.ioc.locator.StateTransitionVOLocator"] = hex_ioc_locator_StateTransitionVOLocator;
hex_ioc_locator_StateTransitionVOLocator.__name__ = ["hex","ioc","locator","StateTransitionVOLocator"];
hex_ioc_locator_StateTransitionVOLocator.__super__ = hex_collection_Locator;
hex_ioc_locator_StateTransitionVOLocator.prototype = $extend(hex_collection_Locator.prototype,{
	_builderFactory: null
	,_stateUnmapper: null
	,buildStateTransition: function(key) {
		if(this.isRegisteredWithKey(key)) {
			var vo = this.locate(key);
			var coreFactory = this._builderFactory.getCoreFactory();
			var state = null;
			if(vo.staticReference != null) state = coreFactory.getStaticReference(vo.staticReference); else if(vo.instanceReference != null) state = coreFactory.locate(vo.instanceReference); else throw new js__$Boot_HaxeError(new hex_ioc_error_BuildingException(Std.string(this) + ".buildStateTransition failed with id '" + key + "'",{ fileName : "StateTransitionVOLocator.hx", lineNumber : 54, className : "hex.ioc.locator.StateTransitionVOLocator", methodName : "buildStateTransition"}));
			var stateUnmapper = null;
			if(!this._stateUnmapper.containsKey(state)) {
				stateUnmapper = new hex_ioc_locator__$StateTransitionVOLocator_StateUnmapper(state);
				this._stateUnmapper.put(state,stateUnmapper);
			} else stateUnmapper = this._stateUnmapper.get(state);
			if(state == null) throw new js__$Boot_HaxeError(new hex_ioc_error_BuildingException(Std.string(this) + ".buildStateTransition failed with '" + Std.string(vo) + "'",{ fileName : "StateTransitionVOLocator.hx", lineNumber : 70, className : "hex.ioc.locator.StateTransitionVOLocator", methodName : "buildStateTransition"}));
			var enterList = vo.enterList;
			var _g = 0;
			while(_g < enterList.length) {
				var enterVO = enterList[_g];
				++_g;
				var enterCommandClass = coreFactory.getClassReference(enterVO.commandClassName);
				var enterMapping = new hex_control_command_CommandMapping(enterCommandClass);
				var enterContextOwner = null;
				if(enterVO.contextOwner != null) enterContextOwner = new hex_ioc_di_ContextOwnerWrapper(coreFactory,enterVO.contextOwner);
				enterMapping.setContextOwner(enterContextOwner != null?enterContextOwner:this._builderFactory.getApplicationContext());
				if(enterVO.fireOnce) enterMapping.once();
				state.addEnterCommandMapping(enterMapping);
				stateUnmapper.addEnterMapping(enterMapping);
			}
			var exitList = vo.exitList;
			var _g1 = 0;
			while(_g1 < exitList.length) {
				var exitVO = exitList[_g1];
				++_g1;
				var exitCommandClass = coreFactory.getClassReference(exitVO.commandClassName);
				var exitMapping = new hex_control_command_CommandMapping(exitCommandClass);
				var exitContextOwner = null;
				if(exitVO.contextOwner != null) exitContextOwner = new hex_ioc_di_ContextOwnerWrapper(coreFactory,exitVO.contextOwner);
				exitMapping.setContextOwner(exitContextOwner != null?exitContextOwner:this._builderFactory.getApplicationContext());
				if(exitVO.fireOnce) exitMapping.once();
				state.addExitCommandMapping(exitMapping);
				stateUnmapper.addExitMapping(exitMapping);
			}
			this.unregister(key);
		}
	}
	,release: function() {
		var stateUnmappers = this._stateUnmapper.getValues();
		var _g = 0;
		while(_g < stateUnmappers.length) {
			var unmapper = stateUnmappers[_g];
			++_g;
			unmapper.unmap();
		}
		hex_collection_Locator.prototype.release.call(this);
	}
	,_dispatchRegisterEvent: function(key,element) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.REGISTER,[key,element]);
	}
	,_dispatchUnregisterEvent: function(key) {
		this._dispatcher.dispatch(hex_collection_LocatorMessage.UNREGISTER,[key]);
	}
	,__class__: hex_ioc_locator_StateTransitionVOLocator
});
var hex_ioc_locator__$StateTransitionVOLocator_StateUnmapper = function(state) {
	this._exitMappings = [];
	this._enterMappings = [];
	this._state = state;
};
$hxClasses["hex.ioc.locator._StateTransitionVOLocator.StateUnmapper"] = hex_ioc_locator__$StateTransitionVOLocator_StateUnmapper;
hex_ioc_locator__$StateTransitionVOLocator_StateUnmapper.__name__ = ["hex","ioc","locator","_StateTransitionVOLocator","StateUnmapper"];
hex_ioc_locator__$StateTransitionVOLocator_StateUnmapper.prototype = {
	_state: null
	,_enterMappings: null
	,_exitMappings: null
	,unmap: function() {
		var _g = 0;
		var _g1 = this._enterMappings;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			this._state.removeEnterCommandMapping(m);
		}
		var _g2 = 0;
		var _g11 = this._exitMappings;
		while(_g2 < _g11.length) {
			var m1 = _g11[_g2];
			++_g2;
			this._state.removeEnterCommandMapping(m1);
		}
		this._state = null;
		this._enterMappings = null;
		this._exitMappings = null;
	}
	,addEnterMapping: function(mapping) {
		this._enterMappings.push(mapping);
	}
	,addExitMapping: function(mapping) {
		this._exitMappings.push(mapping);
	}
	,__class__: hex_ioc_locator__$StateTransitionVOLocator_StateUnmapper
};
var hex_ioc_parser_IParserCollection = function() { };
$hxClasses["hex.ioc.parser.IParserCollection"] = hex_ioc_parser_IParserCollection;
hex_ioc_parser_IParserCollection.__name__ = ["hex","ioc","parser","IParserCollection"];
hex_ioc_parser_IParserCollection.prototype = {
	next: null
	,hasNext: null
	,reset: null
	,__class__: hex_ioc_parser_IParserCollection
};
var hex_ioc_parser_AbstractParserCollection = function() {
	this._index = -1;
	this._parserCommandCollection = [];
	this._buildParserList();
};
$hxClasses["hex.ioc.parser.AbstractParserCollection"] = hex_ioc_parser_AbstractParserCollection;
hex_ioc_parser_AbstractParserCollection.__name__ = ["hex","ioc","parser","AbstractParserCollection"];
hex_ioc_parser_AbstractParserCollection.__interfaces__ = [hex_ioc_parser_IParserCollection];
hex_ioc_parser_AbstractParserCollection.prototype = {
	_index: null
	,_parserCommandCollection: null
	,_buildParserList: function() {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".setParserList() must be implemented in concrete class.",{ fileName : "AbstractParserCollection.hx", lineNumber : 23, className : "hex.ioc.parser.AbstractParserCollection", methodName : "_buildParserList"}));
	}
	,next: function() {
		return this._parserCommandCollection[++this._index];
	}
	,hasNext: function() {
		return this._parserCommandCollection.length > this._index + 1;
	}
	,reset: function() {
		this._index = -1;
	}
	,__class__: hex_ioc_parser_AbstractParserCollection
};
var hex_ioc_parser_IParserCommand = function() { };
$hxClasses["hex.ioc.parser.IParserCommand"] = hex_ioc_parser_IParserCommand;
hex_ioc_parser_IParserCommand.__name__ = ["hex","ioc","parser","IParserCommand"];
hex_ioc_parser_IParserCommand.prototype = {
	parse: null
	,setContextData: null
	,getContextData: null
	,getApplicationContext: null
	,getApplicationAssembler: null
	,setApplicationAssembler: null
	,__class__: hex_ioc_parser_IParserCommand
};
var hex_ioc_parser_AbstractParserCommand = function() {
	hex_control_async_AsyncCommand.call(this);
};
$hxClasses["hex.ioc.parser.AbstractParserCommand"] = hex_ioc_parser_AbstractParserCommand;
hex_ioc_parser_AbstractParserCommand.__name__ = ["hex","ioc","parser","AbstractParserCommand"];
hex_ioc_parser_AbstractParserCommand.__interfaces__ = [hex_ioc_parser_IParserCommand];
hex_ioc_parser_AbstractParserCommand.__super__ = hex_control_async_AsyncCommand;
hex_ioc_parser_AbstractParserCommand.prototype = $extend(hex_control_async_AsyncCommand.prototype,{
	_applicationAssembler: null
	,_contextData: null
	,execute: function(request) {
		if(this._contextData != null) this.parse(); else throw new js__$Boot_HaxeError(new hex_error_NullPointerException(Std.string(this) + ".execute() failed. Context data was null.",{ fileName : "AbstractParserCommand.hx", lineNumber : 33, className : "hex.ioc.parser.AbstractParserCommand", methodName : "execute"}));
	}
	,setApplicationAssembler: function(applicationAssembler) {
		this._applicationAssembler = applicationAssembler;
	}
	,getApplicationAssembler: function() {
		return this._applicationAssembler;
	}
	,getContextData: function() {
		return this._contextData;
	}
	,parse: function() {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".parse must be implemented in concrete class.",{ fileName : "AbstractParserCommand.hx", lineNumber : 57, className : "hex.ioc.parser.AbstractParserCommand", methodName : "parse"}));
	}
	,setContextData: function(data) {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".setContextData must be implemented in concrete class.",{ fileName : "AbstractParserCommand.hx", lineNumber : 62, className : "hex.ioc.parser.AbstractParserCommand", methodName : "setContextData"}));
	}
	,getApplicationContext: function(applicationContextClass) {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(Std.string(this) + ".getApplicationContext must be implemented in concrete class.",{ fileName : "AbstractParserCommand.hx", lineNumber : 67, className : "hex.ioc.parser.AbstractParserCommand", methodName : "getApplicationContext"}));
	}
	,__class__: hex_ioc_parser_AbstractParserCommand
});
var hex_ioc_parser_IoCParserSuite = function() {
	this.list = [hex_ioc_parser_xml_IoCXmlSuite];
};
$hxClasses["hex.ioc.parser.IoCParserSuite"] = hex_ioc_parser_IoCParserSuite;
hex_ioc_parser_IoCParserSuite.__name__ = ["hex","ioc","parser","IoCParserSuite"];
hex_ioc_parser_IoCParserSuite.prototype = {
	list: null
	,__class__: hex_ioc_parser_IoCParserSuite
};
var hex_ioc_parser_preprocess_MacroPreprocessor = function() {
};
$hxClasses["hex.ioc.parser.preprocess.MacroPreprocessor"] = hex_ioc_parser_preprocess_MacroPreprocessor;
hex_ioc_parser_preprocess_MacroPreprocessor.__name__ = ["hex","ioc","parser","preprocess","MacroPreprocessor"];
hex_ioc_parser_preprocess_MacroPreprocessor.prototype = {
	__class__: hex_ioc_parser_preprocess_MacroPreprocessor
};
var hex_ioc_parser_preprocess_Preprocessor = function() {
	this._separator = new EReg("\\$\\{.*\\}","");
	this._property = new haxe_ds_StringMap();
};
$hxClasses["hex.ioc.parser.preprocess.Preprocessor"] = hex_ioc_parser_preprocess_Preprocessor;
hex_ioc_parser_preprocess_Preprocessor.__name__ = ["hex","ioc","parser","preprocess","Preprocessor"];
hex_ioc_parser_preprocess_Preprocessor.__interfaces__ = [hex_data_IParser];
hex_ioc_parser_preprocess_Preprocessor.prototype = {
	_property: null
	,_separator: null
	,addProperty: function(name,value) {
		if(!this._property.exists(name)) this._property.set(name,value); else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("addProperty failed with property name '" + name + "' and value '" + value + "'. This name is already registered.",{ fileName : "Preprocessor.hx", lineNumber : 24, className : "hex.ioc.parser.preprocess.Preprocessor", methodName : "addProperty"}));
	}
	,parse: function(serializedContent,target) {
		var context = serializedContent;
		var i = this._property.keys();
		while(i.hasNext()) {
			var name = i.next();
			var value = this._property.get(name);
			var a = context.split("$" + "{" + name + "}");
			if(a.length > 1) {
				var _g = 0;
				while(_g < a.length) {
					var element = a[_g];
					++_g;
					this.parse(element);
				}
			}
			context = a.join(value);
		}
		if(this._separator.match(context)) return this.parse(context); else return context;
	}
	,__class__: hex_ioc_parser_preprocess_Preprocessor
};
var hex_ioc_parser_xml_AbstractXMLParser = function() {
	hex_ioc_parser_AbstractParserCommand.call(this);
};
$hxClasses["hex.ioc.parser.xml.AbstractXMLParser"] = hex_ioc_parser_xml_AbstractXMLParser;
hex_ioc_parser_xml_AbstractXMLParser.__name__ = ["hex","ioc","parser","xml","AbstractXMLParser"];
hex_ioc_parser_xml_AbstractXMLParser.__super__ = hex_ioc_parser_AbstractParserCommand;
hex_ioc_parser_xml_AbstractXMLParser.prototype = $extend(hex_ioc_parser_AbstractParserCommand.prototype,{
	getApplicationContext: function(applicationContextClass) {
		var applicationContextName = this.getXMLContext().firstElement().get("name");
		if(applicationContextName == null) throw new js__$Boot_HaxeError(new hex_ioc_error_ParsingException(Std.string(this) + " failed to retrieve applicationContext name. You should add 'name' attribute to the root of your xml context",{ fileName : "AbstractXMLParser.hx", lineNumber : 26, className : "hex.ioc.parser.xml.AbstractXMLParser", methodName : "getApplicationContext"}));
		return this._applicationAssembler.getApplicationContext(applicationContextName,applicationContextClass);
	}
	,setContextData: function(data) {
		if(data != null) {
			if(js_Boot.__instanceof(data,Xml)) this._contextData = data; else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException(Std.string(this) + ".setContext() failed. Data should be an instance of Xml.",{ fileName : "AbstractXMLParser.hx", lineNumber : 44, className : "hex.ioc.parser.xml.AbstractXMLParser", methodName : "setContextData"}));
		} else throw new js__$Boot_HaxeError(new hex_error_NullPointerException(Std.string(this) + ".setContext() failed. Data was null.",{ fileName : "AbstractXMLParser.hx", lineNumber : 49, className : "hex.ioc.parser.xml.AbstractXMLParser", methodName : "setContextData"}));
	}
	,getXMLContext: function() {
		return this.getContextData();
	}
	,__class__: hex_ioc_parser_xml_AbstractXMLParser
});
var hex_ioc_parser_xml_ApplicationContextXMLParser = function() {
	hex_ioc_parser_xml_AbstractXMLParser.call(this);
};
$hxClasses["hex.ioc.parser.xml.ApplicationContextXMLParser"] = hex_ioc_parser_xml_ApplicationContextXMLParser;
hex_ioc_parser_xml_ApplicationContextXMLParser.__name__ = ["hex","ioc","parser","xml","ApplicationContextXMLParser"];
hex_ioc_parser_xml_ApplicationContextXMLParser.__super__ = hex_ioc_parser_xml_AbstractXMLParser;
hex_ioc_parser_xml_ApplicationContextXMLParser.prototype = $extend(hex_ioc_parser_xml_AbstractXMLParser.prototype,{
	parse: function() {
		var applicationContextClassName = this.getXMLContext().firstElement().get("type");
		if(applicationContextClassName != null) try {
			var applicationContextClass = Type.resolveClass(applicationContextClassName);
			this.getApplicationContext(applicationContextClass);
		} catch( error ) {
			if (error instanceof js__$Boot_HaxeError) error = error.val;
			throw new js__$Boot_HaxeError(new hex_ioc_error_ParsingException(Std.string(this) + " failed to instantiate applicationContext class named '" + applicationContextClassName + "'",{ fileName : "ApplicationContextXMLParser.hx", lineNumber : 32, className : "hex.ioc.parser.xml.ApplicationContextXMLParser", methodName : "parse"}));
		} else this.getApplicationContext();
		this._handleComplete();
	}
	,__class__: hex_ioc_parser_xml_ApplicationContextXMLParser
});
var hex_ioc_parser_xml_ApplicationXMLParser = function(parserCollection) {
	if(parserCollection != null) this._parserCollection = parserCollection; else this._parserCollection = new hex_ioc_parser_xml_XMLParserCollection();
};
$hxClasses["hex.ioc.parser.xml.ApplicationXMLParser"] = hex_ioc_parser_xml_ApplicationXMLParser;
hex_ioc_parser_xml_ApplicationXMLParser.__name__ = ["hex","ioc","parser","xml","ApplicationXMLParser"];
hex_ioc_parser_xml_ApplicationXMLParser.prototype = {
	_contextData: null
	,_assembler: null
	,_parserCollection: null
	,setApplicationAssembler: function(applicationAssembler) {
		this._assembler = applicationAssembler;
	}
	,getApplicationAssembler: function() {
		return this._contextData;
	}
	,setContextData: function(context) {
		this._contextData = context;
	}
	,getContextData: function() {
		return this._contextData;
	}
	,parse: function(applicationAssembler,context) {
		if(applicationAssembler != null) this.setApplicationAssembler(applicationAssembler); else throw new js__$Boot_HaxeError(new hex_error_NullPointerException(Std.string(this) + ".parse() can't retrieve instance of ApplicationAssembler",{ fileName : "ApplicationXMLParser.hx", lineNumber : 57, className : "hex.ioc.parser.xml.ApplicationXMLParser", methodName : "parse"}));
		if(context != null) this.setContextData(context); else throw new js__$Boot_HaxeError(new hex_error_NullPointerException(Std.string(this) + ".parse() can't retrieve IoC context data",{ fileName : "ApplicationXMLParser.hx", lineNumber : 66, className : "hex.ioc.parser.xml.ApplicationXMLParser", methodName : "parse"}));
		if(this._parserCollection == null) this._parserCollection = new hex_ioc_parser_xml_XMLParserCollection();
		while(this._parserCollection.hasNext()) {
			var parser = this._parserCollection.next();
			parser.setContextData(this._contextData);
			parser.setApplicationAssembler(this._assembler);
			parser.parse();
			this._contextData = parser.getContextData();
		}
		this._parserCollection.reset();
	}
	,__class__: hex_ioc_parser_xml_ApplicationXMLParser
};
var hex_ioc_parser_xml_IoCXmlSuite = function() {
	this.list = [hex_ioc_parser_xml_assembler_ApplicationAssemblerStateTest,hex_ioc_parser_xml_context_ApplicationContextBuildingTest,hex_ioc_parser_xml_ObjectXMLParserTest,hex_ioc_parser_xml_state_StatefulStateMachineConfigTest,hex_ioc_parser_xml_XmlParserUtilTest];
};
$hxClasses["hex.ioc.parser.xml.IoCXmlSuite"] = hex_ioc_parser_xml_IoCXmlSuite;
hex_ioc_parser_xml_IoCXmlSuite.__name__ = ["hex","ioc","parser","xml","IoCXmlSuite"];
hex_ioc_parser_xml_IoCXmlSuite.prototype = {
	list: null
	,__class__: hex_ioc_parser_xml_IoCXmlSuite
};
var hex_ioc_parser_xml_ObjectXMLParser = function() {
	hex_ioc_parser_xml_AbstractXMLParser.call(this);
};
$hxClasses["hex.ioc.parser.xml.ObjectXMLParser"] = hex_ioc_parser_xml_ObjectXMLParser;
hex_ioc_parser_xml_ObjectXMLParser.__name__ = ["hex","ioc","parser","xml","ObjectXMLParser"];
hex_ioc_parser_xml_ObjectXMLParser.__super__ = hex_ioc_parser_xml_AbstractXMLParser;
hex_ioc_parser_xml_ObjectXMLParser.prototype = $extend(hex_ioc_parser_xml_AbstractXMLParser.prototype,{
	parse: function() {
		var iterator = this.getXMLContext().firstElement().elements();
		while(iterator.hasNext()) this._parseNode(iterator.next());
		this._handleComplete();
	}
	,_parseNode: function(xml) {
		var applicationContext = this.getApplicationContext();
		var identifier = hex_ioc_parser_xml_XMLAttributeUtil.getID(xml);
		if(identifier == null) throw new js__$Boot_HaxeError(new hex_ioc_error_ParsingException(Std.string(this) + " encounters parsing error with '" + (function($this) {
			var $r;
			if(xml.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + xml.nodeType;
			$r = xml.nodeName;
			return $r;
		}(this)) + "' node. You must set an id attribute.",{ fileName : "ObjectXMLParser.hx", lineNumber : 39, className : "hex.ioc.parser.xml.ObjectXMLParser", methodName : "_parseNode"}));
		var type;
		var args;
		var factory;
		var singleton;
		var injectInto;
		var mapType;
		var staticRef;
		var ifList;
		var ifNotList;
		type = hex_ioc_parser_xml_XMLAttributeUtil.getType(xml);
		if(type == "XML") {
			args = [];
			args.push({ ownerID : identifier, value : xml.firstElement().toString()});
			factory = hex_ioc_parser_xml_XMLAttributeUtil.getParserClass(xml);
			this.getApplicationAssembler().buildObject(applicationContext,identifier,type,args,factory);
		} else {
			if(type == "hex.collection.HashMap" || type == "hex.config.stateful.ServiceLocator") args = hex_ioc_parser_xml_XMLParserUtil.getItems(xml); else args = hex_ioc_parser_xml_XMLParserUtil.getArguments(xml,type);
			factory = hex_ioc_parser_xml_XMLAttributeUtil.getFactoryMethod(xml);
			singleton = hex_ioc_parser_xml_XMLAttributeUtil.getSingletonAccess(xml);
			injectInto = hex_ioc_parser_xml_XMLAttributeUtil.getInjectInto(xml);
			mapType = hex_ioc_parser_xml_XMLAttributeUtil.getMapType(xml);
			staticRef = hex_ioc_parser_xml_XMLAttributeUtil.getStaticRef(xml);
			ifList = hex_ioc_parser_xml_XMLParserUtil.getIfList(xml);
			ifNotList = hex_ioc_parser_xml_XMLParserUtil.getIfNotList(xml);
			if(type == null) if(staticRef != null) type = "Instance"; else type = "String";
			this.getApplicationAssembler().buildObject(applicationContext,identifier,type,args,factory,singleton,injectInto,mapType,staticRef,ifList,ifNotList);
			var propertyIterator = xml.elementsNamed("property");
			while(propertyIterator.hasNext()) {
				var property = propertyIterator.next();
				this.getApplicationAssembler().buildProperty(applicationContext,identifier,hex_ioc_parser_xml_XMLAttributeUtil.getName(property),hex_ioc_parser_xml_XMLAttributeUtil.getValue(property),hex_ioc_parser_xml_XMLAttributeUtil.getType(property),hex_ioc_parser_xml_XMLAttributeUtil.getRef(property),hex_ioc_parser_xml_XMLAttributeUtil.getMethod(property),hex_ioc_parser_xml_XMLAttributeUtil.getStaticRef(property),hex_ioc_parser_xml_XMLParserUtil.getIfList(xml),hex_ioc_parser_xml_XMLParserUtil.getIfNotList(xml));
			}
			var methodCallIterator = xml.elementsNamed("method-call");
			while(methodCallIterator.hasNext()) {
				var methodCallItem = methodCallIterator.next();
				this.getApplicationAssembler().buildMethodCall(applicationContext,identifier,hex_ioc_parser_xml_XMLAttributeUtil.getName(methodCallItem),hex_ioc_parser_xml_XMLParserUtil.getMethodCallArguments(methodCallItem),hex_ioc_parser_xml_XMLParserUtil.getIfList(methodCallItem),hex_ioc_parser_xml_XMLParserUtil.getIfNotList(methodCallItem));
			}
			var listenIterator = xml.elementsNamed("listen");
			while(listenIterator.hasNext()) {
				var listener = listenIterator.next();
				var channelName = hex_ioc_parser_xml_XMLAttributeUtil.getRef(listener);
				if(channelName != null) {
					var listenerArgs = hex_ioc_parser_xml_XMLParserUtil.getEventArguments(listener);
					this.getApplicationAssembler().buildDomainListener(applicationContext,identifier,channelName,listenerArgs,hex_ioc_parser_xml_XMLParserUtil.getIfList(listener),hex_ioc_parser_xml_XMLParserUtil.getIfNotList(listener));
				} else throw new js__$Boot_HaxeError(new hex_error_Exception(Std.string(this) + " encounters parsing error with '" + (function($this) {
					var $r;
					if(xml.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + xml.nodeType;
					$r = xml.nodeName;
					return $r;
				}(this)) + "' node, 'ref' attribute is mandatory in a 'listen' node.",{ fileName : "ObjectXMLParser.hx", lineNumber : 122, className : "hex.ioc.parser.xml.ObjectXMLParser", methodName : "_parseNode"}));
			}
		}
	}
	,__class__: hex_ioc_parser_xml_ObjectXMLParser
});
var hex_ioc_parser_xml_ObjectXMLParserTest = function() { };
$hxClasses["hex.ioc.parser.xml.ObjectXMLParserTest"] = hex_ioc_parser_xml_ObjectXMLParserTest;
hex_ioc_parser_xml_ObjectXMLParserTest.__name__ = ["hex","ioc","parser","xml","ObjectXMLParserTest"];
hex_ioc_parser_xml_ObjectXMLParserTest.prototype = {
	_contextParser: null
	,_applicationContext: null
	,_builderFactory: null
	,_applicationAssembler: null
	,setUp: function() {
		this._applicationAssembler = new hex_ioc_assembler_ApplicationAssembler();
		this._applicationContext = this._applicationAssembler.getApplicationContext("applicationContext");
		this._builderFactory = this._applicationAssembler.getBuilderFactory(this._applicationContext);
	}
	,tearDown: function() {
		hex_domain_ApplicationDomainDispatcher.getInstance().clear();
		this._applicationAssembler.release();
	}
	,_build: function(xml,applicationContext) {
		this._contextParser = new hex_ioc_parser_xml_ApplicationXMLParser();
		this._contextParser.parse(this._applicationAssembler,xml);
		this._applicationAssembler.buildEverything();
	}
	,build: function(xml) {
		this._contextParser = new hex_ioc_parser_xml_ApplicationXMLParser();
		this._contextParser.parse(this._applicationAssembler,Xml.parse(xml));
		this._applicationAssembler.buildEverything();
	}
	,testBuildingString: function() {
		this.build("<root name=\"applicationContext\">\n    <test id=\"s\" value=\"hello\"/>\n</root>");
		var s = this._builderFactory.getCoreFactory().locate("s");
		hex_unittest_assertion_Assert.equals("hello",s,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 91, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingString"});
	}
	,testBuildingAnonymousObject: function() {
		this.build("<root name=\"applicationContext\">\n    <test id=\"obj\" type=\"Object\">\n        <property name=\"name\" value=\"Francis\"/>\n        <property name=\"age\" type=\"Int\" value=\"44\"/>\n        <property name=\"height\" type=\"Float\" value=\"1.75\"/>\n        <property name=\"isWorking\" type=\"Bool\" value=\"true\"/>\n        <property name=\"isSleeping\" type=\"Bool\" value=\"false\"/>\n    </test>\n</root>");
		var obj = this._builderFactory.getCoreFactory().locate("obj");
		hex_unittest_assertion_Assert.equals("Francis",obj.name,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 100, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingAnonymousObject"});
		hex_unittest_assertion_Assert.equals(44,obj.age,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 101, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingAnonymousObject"});
		hex_unittest_assertion_Assert.equals(1.75,obj.height,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 102, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingAnonymousObject"});
		hex_unittest_assertion_Assert.isTrue(obj.isWorking,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 103, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingAnonymousObject"});
		hex_unittest_assertion_Assert.isFalse(obj.isSleeping,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 104, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingAnonymousObject"});
		hex_unittest_assertion_Assert.equals(1.75,this._builderFactory.getCoreFactory().locate("obj.height"),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 105, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingAnonymousObject"});
	}
	,testBuildingSimpleInstanceWithArguments: function() {
		this.build("<root name=\"applicationContext\">\n    <bean id=\"size\" type=\"hex.structures.Size\">\n        <argument type=\"Int\" value=\"10\"/>\n        <argument type=\"Int\" value=\"20\"/>\n    </bean>\n</root>");
		var size = this._builderFactory.getCoreFactory().locate("size");
		hex_unittest_assertion_Assert.isInstanceOf(size,hex_structures_Size,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 114, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingSimpleInstanceWithArguments"});
		hex_unittest_assertion_Assert.equals(10,size.width,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 115, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingSimpleInstanceWithArguments"});
		hex_unittest_assertion_Assert.equals(20,size.height,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 116, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingSimpleInstanceWithArguments"});
	}
	,testBuildingMultipleInstancesWithReferences: function() {
		this.build("<root name=\"applicationContext\">\n    <rectangle id=\"rect\" type=\"hex.ioc.parser.xml.mock.MockRectangle\">\n        <argument ref=\"rectPosition.x\"/>\n        <argument ref=\"rectPosition.y\"/>\n        <property name=\"size\" ref=\"rectSize\" />\n    </rectangle>\n\n    <size id=\"rectSize\" type=\"hex.structures.Point\">\n        <argument type=\"Int\" value=\"30\"/>\n        <argument type=\"Int\" value=\"40\"/>\n    </size>\n\n    <position id=\"rectPosition\" type=\"hex.structures.Point\">\n        <property type=\"Int\" name=\"x\" value=\"10\"/>\n        <property type=\"Int\" name=\"y\" value=\"20\"/>\n    </position>\n</root>");
		var rectSize = this._builderFactory.getCoreFactory().locate("rectSize");
		hex_unittest_assertion_Assert.isInstanceOf(rectSize,hex_structures_Point,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 125, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithReferences"});
		hex_unittest_assertion_Assert.equals(30,rectSize.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 126, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithReferences"});
		hex_unittest_assertion_Assert.equals(40,rectSize.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 127, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithReferences"});
		var rectPosition = this._builderFactory.getCoreFactory().locate("rectPosition");
		hex_unittest_assertion_Assert.isInstanceOf(rectPosition,hex_structures_Point,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 130, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithReferences"});
		hex_unittest_assertion_Assert.equals(10,rectPosition.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 131, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithReferences"});
		hex_unittest_assertion_Assert.equals(20,rectPosition.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 132, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithReferences"});
		var rect = this._builderFactory.getCoreFactory().locate("rect");
		hex_unittest_assertion_Assert.isInstanceOf(rect,hex_ioc_parser_xml_mock_MockRectangle,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 136, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithReferences"});
		hex_unittest_assertion_Assert.equals(10,rect.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 137, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithReferences"});
		hex_unittest_assertion_Assert.equals(20,rect.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 138, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithReferences"});
		hex_unittest_assertion_Assert.equals(30,rect.get_size().x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 139, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithReferences"});
		hex_unittest_assertion_Assert.equals(40,rect.get_size().y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 140, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithReferences"});
	}
	,testBuildingMultipleInstancesWithMethodCall: function() {
		this.build("<root name=\"applicationContext\">\n    <rectangle id=\"rect\" type=\"hex.ioc.parser.xml.mock.MockRectangle\">\n        <property name=\"size\" ref=\"rectSize\" />\n        <method-call name=\"offsetPoint\">\n            <argument ref=\"rectPosition\"/>\n        </method-call></rectangle>\n\n    <size id=\"rectSize\" type=\"hex.structures.Point\">\n        <argument type=\"Int\" value=\"30\"/>\n        <argument type=\"Int\" value=\"40\"/>\n    </size>\n\n    <position id=\"rectPosition\" type=\"hex.structures.Point\">\n        <property type=\"Int\" name=\"x\" value=\"10\"/>\n        <property type=\"Int\" name=\"y\" value=\"20\"/>\n    </position>\n\n    <rectangle id=\"anotherRect\" type=\"hex.ioc.parser.xml.mock.MockRectangle\">\n        <property name=\"size\" ref=\"rectSize\" />\n        <method-call name=\"reset\"/>\n    </rectangle>\n</root>");
		var rectSize = this._builderFactory.getCoreFactory().locate("rectSize");
		hex_unittest_assertion_Assert.isInstanceOf(rectSize,hex_structures_Point,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 149, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		hex_unittest_assertion_Assert.equals(30,rectSize.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 150, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		hex_unittest_assertion_Assert.equals(40,rectSize.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 151, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		var rectPosition = this._builderFactory.getCoreFactory().locate("rectPosition");
		hex_unittest_assertion_Assert.isInstanceOf(rectPosition,hex_structures_Point,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 154, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		hex_unittest_assertion_Assert.equals(10,rectPosition.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 155, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		hex_unittest_assertion_Assert.equals(20,rectPosition.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 156, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		var rect = this._builderFactory.getCoreFactory().locate("rect");
		hex_unittest_assertion_Assert.isInstanceOf(rect,hex_ioc_parser_xml_mock_MockRectangle,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 160, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		hex_unittest_assertion_Assert.equals(10,rect.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 161, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		hex_unittest_assertion_Assert.equals(20,rect.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 162, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		hex_unittest_assertion_Assert.equals(30,rect.width,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 163, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		hex_unittest_assertion_Assert.equals(40,rect.height,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 164, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		var anotherRect = this._builderFactory.getCoreFactory().locate("anotherRect");
		hex_unittest_assertion_Assert.isInstanceOf(anotherRect,hex_ioc_parser_xml_mock_MockRectangle,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 167, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		hex_unittest_assertion_Assert.equals(0,anotherRect.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 168, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		hex_unittest_assertion_Assert.equals(0,anotherRect.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 169, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		hex_unittest_assertion_Assert.equals(0,anotherRect.width,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 170, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
		hex_unittest_assertion_Assert.equals(0,anotherRect.height,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 171, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMultipleInstancesWithMethodCall"});
	}
	,testBuildingInstanceWithSingletonMethod: function() {
		this.build("<root name=\"applicationContext\">\n    <gateway id=\"gateway\" value=\"http://localhost/amfphp/gateway.php\"/>\n\n    <service id=\"service\" type=\"hex.ioc.parser.xml.mock.MockServiceProvider\" singleton-access=\"getInstance\">\n        <method-call name=\"setGateway\">\n            <argument ref=\"gateway\" />\n        </method-call>\n    </service>\n</root>");
		var service = this._builderFactory.getCoreFactory().locate("service");
		hex_unittest_assertion_Assert.isInstanceOf(service,hex_ioc_parser_xml_mock_MockServiceProvider,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 180, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingInstanceWithSingletonMethod"});
		hex_unittest_assertion_Assert.equals("http://localhost/amfphp/gateway.php",hex_ioc_parser_xml_mock_MockServiceProvider.getInstance().getGateway(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 181, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingInstanceWithSingletonMethod"});
	}
	,testBuildingInstanceWithFactoryStaticMethod: function() {
		this.build("<root name=\"applicationContext\">\n    <rectangle id=\"rect\" type=\"hex.ioc.parser.xml.mock.MockRectangleFactory\" factory=\"getRectangle\">\n        <argument type=\"Int\" value=\"10\"/><argument type=\"Int\" value=\"20\"/>\n        <argument type=\"Int\" value=\"30\"/><argument type=\"Int\" value=\"40\"/>\n    </rectangle>\n</root>");
		var rect = this._builderFactory.getCoreFactory().locate("rect");
		hex_unittest_assertion_Assert.isInstanceOf(rect,hex_ioc_parser_xml_mock_MockRectangle,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 190, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingInstanceWithFactoryStaticMethod"});
		hex_unittest_assertion_Assert.equals(10,rect.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 191, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingInstanceWithFactoryStaticMethod"});
		hex_unittest_assertion_Assert.equals(20,rect.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 192, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingInstanceWithFactoryStaticMethod"});
		hex_unittest_assertion_Assert.equals(30,rect.width,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 193, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingInstanceWithFactoryStaticMethod"});
		hex_unittest_assertion_Assert.equals(40,rect.height,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 194, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingInstanceWithFactoryStaticMethod"});
	}
	,testFactoryWithFactorySingletonMethod: function() {
		this.build("<root name=\"applicationContext\">\n    <point id=\"point\" type=\"hex.ioc.parser.xml.mock.MockPointFactory\" singleton-access=\"getInstance\" factory=\"getPoint\">\n        <argument type=\"Int\" value=\"10\"/>\n        <argument type=\"Int\" value=\"20\"/>\n    </point>\n</root>");
		var point = this._builderFactory.getCoreFactory().locate("point");
		hex_unittest_assertion_Assert.isInstanceOf(point,hex_structures_Point,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 203, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testFactoryWithFactorySingletonMethod"});
		hex_unittest_assertion_Assert.equals(10,point.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 204, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testFactoryWithFactorySingletonMethod"});
		hex_unittest_assertion_Assert.equals(20,point.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 205, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testFactoryWithFactorySingletonMethod"});
	}
	,testInjectIntoAttribute: function() {
		var injector = this._applicationContext.getBasicInjector();
		injector.mapToValue(String,"hola mundo");
		this.build("<root name=\"applicationContext\">\n    <instance id=\"instance\" type=\"hex.ioc.parser.xml.mock.MockClassWithInjectedProperty\" inject-into=\"true\"/>\n</root>");
		var instance = this._builderFactory.getCoreFactory().locate("instance");
		hex_unittest_assertion_Assert.isInstanceOf(instance,hex_ioc_parser_xml_mock_MockClassWithInjectedProperty,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 217, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testInjectIntoAttribute"});
		hex_unittest_assertion_Assert.equals("hola mundo",instance.property,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 218, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testInjectIntoAttribute"});
	}
	,testBuildingXMLWithParserClass: function() {
		this.build("<root name=\"applicationContext\">\n\n    <data id=\"fruits\" type=\"XML\" parser-class=\"hex.ioc.parser.xml.mock.MockXMLParser\">\n        <root>\n            <node>orange</node>\n            <node>apple</node>\n            <node>banana</node>\n        </root>\n    </data>\n\n</root>");
		var fruits = this._builderFactory.getCoreFactory().locate("fruits");
		hex_unittest_assertion_Assert.equals(3,fruits.length,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 227, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingXMLWithParserClass"});
		var orange = fruits[0];
		var apple = fruits[1];
		var banana = fruits[2];
		hex_unittest_assertion_Assert.equals("orange",orange.toString(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 233, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingXMLWithParserClass"});
		hex_unittest_assertion_Assert.equals("apple",apple.toString(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 234, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingXMLWithParserClass"});
		hex_unittest_assertion_Assert.equals("banana",banana.toString(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 235, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingXMLWithParserClass"});
	}
	,testBuildingArrayFilledWithReferences: function() {
		this.build("<root name=\"applicationContext\">\n\n    <collection id=\"fruits\" type=\"Array\">\n        <argument ref=\"fruit0\" />\n        <argument ref=\"fruit1\" />\n        <argument ref=\"fruit2\" />\n    </collection>\n\n    <fruit id=\"fruit0\" type=\"hex.ioc.parser.xml.mock.MockFruitVO\"><argument value=\"orange\"/></fruit>\n    <fruit id=\"fruit1\" type=\"hex.ioc.parser.xml.mock.MockFruitVO\"><argument value=\"apple\"/></fruit>\n    <fruit id=\"fruit2\" type=\"hex.ioc.parser.xml.mock.MockFruitVO\"><argument value=\"banana\"/></fruit>\n\n</root>");
		var fruits = this._builderFactory.getCoreFactory().locate("fruits");
		hex_unittest_assertion_Assert.equals(3,fruits.length,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 244, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingArrayFilledWithReferences"});
		var orange = fruits[0];
		var apple = fruits[1];
		var banana = fruits[2];
		hex_unittest_assertion_Assert.equals("orange",orange.toString(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 250, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingArrayFilledWithReferences"});
		hex_unittest_assertion_Assert.equals("apple",apple.toString(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 251, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingArrayFilledWithReferences"});
		hex_unittest_assertion_Assert.equals("banana",banana.toString(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 252, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingArrayFilledWithReferences"});
	}
	,testBuildingMapFilledWithReferences: function() {
		this.build("<root name=\"applicationContext\">\n    <collection id=\"fruits\" type=\"hex.collection.HashMap\">\n        <item> <key value=\"0\"/> <value ref=\"fruit0\"/></item>\n        <item> <key type=\"Int\" value=\"1\"/> <value ref=\"fruit1\"/></item>\n        <item> <key ref=\"stubKey\"/> <value ref=\"fruit2\"/></item>\n    </collection>\n    <fruit id=\"fruit0\" type=\"hex.ioc.parser.xml.mock.MockFruitVO\"><argument value=\"orange\"/></fruit>\n    <fruit id=\"fruit1\" type=\"hex.ioc.parser.xml.mock.MockFruitVO\"><argument value=\"apple\"/></fruit>\n    <fruit id=\"fruit2\" type=\"hex.ioc.parser.xml.mock.MockFruitVO\"><argument value=\"banana\"/></fruit>\n    <point id=\"stubKey\" type=\"hex.structures.Point\"/>\n</root>");
		var fruits = this._builderFactory.getCoreFactory().locate("fruits");
		hex_unittest_assertion_Assert.isNotNull(fruits,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 261, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMapFilledWithReferences"});
		var stubKey = this._builderFactory.getCoreFactory().locate("stubKey");
		hex_unittest_assertion_Assert.isNotNull(stubKey,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 264, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMapFilledWithReferences"});
		var orange = fruits.get("0");
		var apple = fruits.get(1);
		var banana = fruits.get(stubKey);
		hex_unittest_assertion_Assert.equals("orange",orange.toString(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 270, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMapFilledWithReferences"});
		hex_unittest_assertion_Assert.equals("apple",apple.toString(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 271, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMapFilledWithReferences"});
		hex_unittest_assertion_Assert.equals("banana",banana.toString(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 272, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingMapFilledWithReferences"});
	}
	,testBuildingTwoModulesListeningEachOther: function() {
		this.build("<root name=\"applicationContext\">\n\n    <chat id=\"chat\" type=\"hex.ioc.parser.xml.mock.MockChatModule\">\n        <listen ref=\"translation\"/>\n    </chat>\n\n    <translation id=\"translation\" type=\"hex.ioc.parser.xml.mock.MockTranslationModule\">\n        <listen ref=\"chat\">\n            <event static-ref=\"hex.ioc.parser.xml.mock.MockChatModule.TEXT_INPUT\" method=\"onSomethingToTranslate\"/>\n        </listen>\n    </translation>\n\n</root>");
		var chat = this._builderFactory.getCoreFactory().locate("chat");
		hex_unittest_assertion_Assert.isNotNull(chat,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 281, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOther"});
		hex_unittest_assertion_Assert.isNull(chat.translatedMessage,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 282, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOther"});
		var translation = this._builderFactory.getCoreFactory().locate("translation");
		hex_unittest_assertion_Assert.isNotNull(translation,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 285, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOther"});
		chat.dispatchDomainEvent(hex_ioc_parser_xml_mock_MockChatModule.TEXT_INPUT,["Bonjour"]);
		hex_unittest_assertion_Assert.equals("Hello",chat.translatedMessage,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 288, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOther"});
	}
	,testBuildingTwoModulesListeningEachOtherWithAdapter: function() {
		this.build("<root name=\"applicationContext\">\n\n    <chat id=\"chat\" type=\"hex.ioc.parser.xml.mock.MockChatModule\">\n        <listen ref=\"translation\"/>\n    </chat>\n\n    <translation id=\"translation\" type=\"hex.ioc.parser.xml.mock.MockTranslationModule\">\n        <listen ref=\"chat\">\n            <event static-ref=\"hex.ioc.parser.xml.mock.MockChatModule.TEXT_INPUT\" method=\"onTranslateWithTime\" strategy=\"hex.ioc.parser.xml.mock.MockChatAdapterStrategy\"/>\n        </listen>\n    </translation>\n\n</root>");
		var chat = this._builderFactory.getCoreFactory().locate("chat");
		hex_unittest_assertion_Assert.isNotNull(chat,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 297, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOtherWithAdapter"});
		hex_unittest_assertion_Assert.isNull(chat.translatedMessage,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 298, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOtherWithAdapter"});
		var translation = this._builderFactory.getCoreFactory().locate("translation");
		hex_unittest_assertion_Assert.isNotNull(translation,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 301, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOtherWithAdapter"});
		chat.dispatchDomainEvent(hex_ioc_parser_xml_mock_MockChatModule.TEXT_INPUT,["Bonjour"]);
		hex_unittest_assertion_Assert.equals("Hello",chat.translatedMessage,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 304, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOtherWithAdapter"});
		hex_unittest_assertion_Assert.isInstanceOf(chat.date,Date,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 305, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOtherWithAdapter"});
	}
	,testBuildingTwoModulesListeningEachOtherWithAdapterAndInjection: function() {
		this.build("<root name=\"applicationContext\">\n\n    <chat id=\"chat\" type=\"hex.ioc.parser.xml.mock.MockChatModule\"/>\n\n    <receiver id=\"receiver\" type=\"hex.ioc.parser.xml.mock.MockReceiverModule\">\n        <listen ref=\"chat\">\n            <event static-ref=\"hex.ioc.parser.xml.mock.MockChatModule.TEXT_INPUT\" method=\"onMessage\" strategy=\"hex.ioc.parser.xml.mock.MockChatEventAdapterStrategyWithInjection\"/>\n        </listen>\n    </receiver>\n\n    <parser id=\"parser\" type=\"hex.ioc.parser.xml.mock.MockMessageParserModule\" map-type=\"hex.ioc.parser.xml.mock.IMockMessageParserModule\"/>\n\n</root>");
		var chat = this._builderFactory.getCoreFactory().locate("chat");
		hex_unittest_assertion_Assert.isNotNull(chat,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 314, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOtherWithAdapterAndInjection"});
		var receiver = this._builderFactory.getCoreFactory().locate("receiver");
		hex_unittest_assertion_Assert.isNotNull(receiver,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 317, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOtherWithAdapterAndInjection"});
		var parser = this._builderFactory.getCoreFactory().locate("parser");
		hex_unittest_assertion_Assert.isNotNull(parser,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 320, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOtherWithAdapterAndInjection"});
		chat.dispatchDomainEvent(hex_ioc_parser_xml_mock_MockChatModule.TEXT_INPUT,["Bonjour"]);
		hex_unittest_assertion_Assert.equals("BONJOUR",receiver.message,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 323, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingTwoModulesListeningEachOtherWithAdapterAndInjection"});
	}
	,testDomainDispatchAfterModuleInitialisation: function() {
		this.build("<root name=\"applicationContext\">\n\n    <sender id=\"sender\" type=\"hex.ioc.parser.xml.mock.MockSenderModule\"/>\n\n    <receiver id=\"receiver\" type=\"hex.ioc.parser.xml.mock.MockReceiverModule\">\n        <listen ref=\"sender\">\n            <event static-ref=\"hex.ioc.parser.xml.mock.MockChatModule.TEXT_INPUT\" method=\"onMessageEvent\"/>\n        </listen>\n    </receiver>\n\n</root>");
		var sender = this._builderFactory.getCoreFactory().locate("sender");
		hex_unittest_assertion_Assert.isNotNull(sender,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 332, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testDomainDispatchAfterModuleInitialisation"});
		var receiver = this._builderFactory.getCoreFactory().locate("receiver");
		hex_unittest_assertion_Assert.isNotNull(receiver,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 335, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testDomainDispatchAfterModuleInitialisation"});
		hex_unittest_assertion_Assert.equals("hello receiver",receiver.message,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 337, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testDomainDispatchAfterModuleInitialisation"});
	}
	,testBuildingDifferentApplicationContext: function() {
		var parentSource = "\n\t\t<root name=\"applicationContextParent\">\n\n\t\t\t<bean id=\"rect0\" type=\"hex.ioc.parser.xml.mock.MockRectangle\">\n\t\t\t\t<argument type=\"Int\" value=\"10\"/>\n\t\t\t\t<argument type=\"Int\" value=\"20\"/>\n\t\t\t\t<argument type=\"Int\" value=\"30\"/>\n\t\t\t\t<argument ref=\"applicationContextChild.applicationContextSubChild.rect0.height\"/>\n\t\t\t</bean>\n\n\t\t</root>";
		var childSource = "\n\t\t<root name=\"applicationContextChild\" parent=\"applicationContextParent\">\n\n\t\t\t<bean id=\"rect0\" type=\"hex.ioc.parser.xml.mock.MockRectangle\">\n\t\t\t\t<argument type=\"Int\" value=\"40\"/>\n\t\t\t\t<argument type=\"Int\" value=\"50\"/>\n\t\t\t\t<argument type=\"Int\" value=\"60\"/>\n\t\t\t\t<argument type=\"Int\" value=\"70\"/>\n\t\t\t</bean>\n\n\t\t</root>";
		var subChildSource = "\n\t\t<root name=\"applicationContextSubChild\" parent=\"applicationContextChild\">\n\n\t\t\t<bean id=\"rect0\" type=\"hex.ioc.parser.xml.mock.MockRectangle\">\n\t\t\t\t<argument type=\"Int\" value=\"80\"/>\n\t\t\t\t<argument type=\"Int\" value=\"90\"/>\n\t\t\t\t<argument type=\"Int\" value=\"100\"/>\n\t\t\t\t<argument type=\"Int\" value=\"110\"/>\n\t\t\t</bean>\n\n\t\t</root>";
		var applicationContextParent = this._applicationAssembler.getApplicationContext("applicationContextParent");
		var applicationContextChild = this._applicationAssembler.getApplicationContext("applicationContextChild");
		var applicationContextSubChild = this._applicationAssembler.getApplicationContext("applicationContextSubChild");
		applicationContextParent.addChild(applicationContextChild);
		applicationContextChild.addChild(applicationContextSubChild);
		this._build(Xml.parse(subChildSource),applicationContextSubChild);
		this._build(Xml.parse(childSource),applicationContextChild);
		this._build(Xml.parse(parentSource),applicationContextParent);
		var builderFactory;
		builderFactory = this._applicationAssembler.getBuilderFactory(applicationContextParent);
		var parentRectangle = builderFactory.getCoreFactory().locate("rect0");
		hex_unittest_assertion_Assert.isInstanceOf(parentRectangle,hex_ioc_parser_xml_mock_MockRectangle,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 394, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(10,parentRectangle.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 395, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(20,parentRectangle.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 396, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(30,parentRectangle.width,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 397, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(110,parentRectangle.height,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 398, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		builderFactory = this._applicationAssembler.getBuilderFactory(applicationContextChild);
		var childRectangle = builderFactory.getCoreFactory().locate("rect0");
		hex_unittest_assertion_Assert.isInstanceOf(childRectangle,hex_ioc_parser_xml_mock_MockRectangle,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 402, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(40,childRectangle.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 403, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(50,childRectangle.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 404, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(60,childRectangle.width,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 405, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(70,childRectangle.height,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 406, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		builderFactory = this._applicationAssembler.getBuilderFactory(applicationContextSubChild);
		var subChildRectangle = builderFactory.getCoreFactory().locate("rect0");
		hex_unittest_assertion_Assert.isInstanceOf(subChildRectangle,hex_ioc_parser_xml_mock_MockRectangle,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 410, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(80,subChildRectangle.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 411, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(90,subChildRectangle.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 412, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(100,subChildRectangle.width,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 413, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(110,subChildRectangle.height,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 414, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(applicationContextChild,applicationContextParent.resolve("applicationContextChild"),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 416, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(childRectangle,applicationContextParent.resolve("applicationContextChild").resolve("rect0"),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 417, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
		hex_unittest_assertion_Assert.equals(subChildRectangle,applicationContextParent.resolve("applicationContextChild").resolve("applicationContextSubChild").resolve("rect0"),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 418, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingDifferentApplicationContext"});
	}
	,testTargetSubProperty: function() {
		this.build("<root name=\"applicationContext\">\n\n    <test id=\"mockObject\" type=\"hex.ioc.parser.xml.mock.MockObjectWithRegtangleProperty\">\n        <property name=\"rectangle.x\" type=\"Float\" value=\"1.5\"/>\n    </test>\n\n</root>");
		var mockObject = this._builderFactory.getCoreFactory().locate("mockObject");
		hex_unittest_assertion_Assert.isInstanceOf(mockObject,hex_ioc_parser_xml_mock_MockObjectWithRegtangleProperty,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 427, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testTargetSubProperty"});
		hex_unittest_assertion_Assert.equals(1.5,mockObject.rectangle.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 428, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testTargetSubProperty"});
	}
	,testBuildingClassReference: function() {
		this.build("<root name=\"applicationContext\">\n\n    <RectangleClass id=\"RectangleClass\" type=\"Class\" value=\"hex.ioc.parser.xml.mock.MockRectangle\"/>\n\n    <test id=\"classContainer\" type=\"Object\">\n        <property name=\"AnotherRectangleClass\" ref=\"RectangleClass\"/>\n    </test>\n\n</root>");
		var rectangleClass = this._builderFactory.getCoreFactory().locate("RectangleClass");
		hex_unittest_assertion_Assert.isInstanceOf(rectangleClass,Class,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 437, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingClassReference"});
		hex_unittest_assertion_Assert.isInstanceOf(Type.createInstance(rectangleClass,[]),hex_ioc_parser_xml_mock_MockRectangle,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 438, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingClassReference"});
		var classContainer = this._builderFactory.getCoreFactory().locate("classContainer");
		var anotherRectangleClass = classContainer.AnotherRectangleClass;
		hex_unittest_assertion_Assert.isInstanceOf(anotherRectangleClass,Class,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 443, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingClassReference"});
		hex_unittest_assertion_Assert.isInstanceOf(Type.createInstance(anotherRectangleClass,[]),hex_ioc_parser_xml_mock_MockRectangle,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 444, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingClassReference"});
		hex_unittest_assertion_Assert.equals(rectangleClass,anotherRectangleClass,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 446, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingClassReference"});
		var anotherRectangleClassRef = this._builderFactory.getCoreFactory().locate("classContainer.AnotherRectangleClass");
		hex_unittest_assertion_Assert.isInstanceOf(anotherRectangleClassRef,Class,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 449, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingClassReference"});
		hex_unittest_assertion_Assert.equals(anotherRectangleClass,anotherRectangleClassRef,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 450, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingClassReference"});
	}
	,testBuildingServiceLocator: function() {
		this.build("<root name=\"applicationContext\">\n\n    <serviceLocator id=\"serviceLocator\" type=\"hex.config.stateful.ServiceLocator\">\n        <item> <key type=\"Class\" value=\"hex.ioc.parser.xml.mock.IMockAmazonService\"/> <value type=\"Class\" value=\"hex.ioc.parser.xml.mock.MockAmazonService\"/></item>\n        <item> <key type=\"Class\" value=\"hex.ioc.parser.xml.mock.IMockFacebookService\"/> <value ref=\"facebookService\"/></item>\n    </serviceLocator>\n\n    <facebookService id=\"facebookService\" type=\"hex.ioc.parser.xml.mock.MockFacebookService\"/>\n\n</root>");
		var serviceLocator = this._builderFactory.getCoreFactory().locate("serviceLocator");
		hex_unittest_assertion_Assert.isInstanceOf(serviceLocator,hex_config_stateful_ServiceLocator,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 459, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingServiceLocator"});
		var amazonService = serviceLocator.getService(hex_ioc_parser_xml_mock_IMockAmazonService);
		var facebookService = serviceLocator.getService(hex_ioc_parser_xml_mock_IMockFacebookService);
		hex_unittest_assertion_Assert.isInstanceOf(amazonService,hex_ioc_parser_xml_mock_MockAmazonService,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 463, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingServiceLocator"});
		hex_unittest_assertion_Assert.isInstanceOf(facebookService,hex_ioc_parser_xml_mock_MockFacebookService,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 464, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingServiceLocator"});
		var injector = new hex_di_Injector();
		serviceLocator.configure(injector,new hex_event_Dispatcher(),null);
		hex_unittest_assertion_Assert.isInstanceOf(injector.getInstance(hex_ioc_parser_xml_mock_IMockAmazonService),hex_ioc_parser_xml_mock_MockAmazonService,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 469, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingServiceLocator"});
		hex_unittest_assertion_Assert.isInstanceOf(injector.getInstance(hex_ioc_parser_xml_mock_IMockFacebookService),hex_ioc_parser_xml_mock_MockFacebookService,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 470, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingServiceLocator"});
		hex_unittest_assertion_Assert.equals(facebookService,injector.getInstance(hex_ioc_parser_xml_mock_IMockFacebookService),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 471, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingServiceLocator"});
	}
	,testBuildingServiceLocatorWithMapNames: function() {
		this.build("<root name=\"applicationContext\">\n\n    <serviceLocator id=\"serviceLocator\" type=\"hex.config.stateful.ServiceLocator\">\n        <item map-name=\"amazon0\"> <key type=\"Class\" value=\"hex.ioc.parser.xml.mock.IMockAmazonService\"/> <value type=\"Class\" value=\"hex.ioc.parser.xml.mock.MockAmazonService\"/></item>\n        <item map-name=\"amazon1\"> <key type=\"Class\" value=\"hex.ioc.parser.xml.mock.IMockAmazonService\"/> <value type=\"Class\" value=\"hex.ioc.parser.xml.mock.AnotherMockAmazonService\"/></item>\n    </serviceLocator>\n\n</root>");
		var serviceLocator = this._builderFactory.getCoreFactory().locate("serviceLocator");
		hex_unittest_assertion_Assert.isInstanceOf(serviceLocator,hex_config_stateful_ServiceLocator,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 480, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingServiceLocatorWithMapNames"});
		var amazonService0 = serviceLocator.getService(hex_ioc_parser_xml_mock_IMockAmazonService,"amazon0");
		var amazonService1 = serviceLocator.getService(hex_ioc_parser_xml_mock_IMockAmazonService,"amazon1");
		hex_unittest_assertion_Assert.isNotNull(amazonService0,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 484, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingServiceLocatorWithMapNames"});
		hex_unittest_assertion_Assert.isNotNull(amazonService1,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 485, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingServiceLocatorWithMapNames"});
		var injector = new hex_di_Injector();
		serviceLocator.configure(injector,new hex_event_Dispatcher(),null);
		hex_unittest_assertion_Assert.isInstanceOf(injector.getInstance(hex_ioc_parser_xml_mock_IMockAmazonService,"amazon0"),hex_ioc_parser_xml_mock_MockAmazonService,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 490, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingServiceLocatorWithMapNames"});
		hex_unittest_assertion_Assert.isInstanceOf(injector.getInstance(hex_ioc_parser_xml_mock_IMockAmazonService,"amazon1"),hex_ioc_parser_xml_mock_AnotherMockAmazonService,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 491, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testBuildingServiceLocatorWithMapNames"});
	}
	,testParsingTwice: function() {
		this.build("<root name=\"applicationContext\">\n\n    <bean id=\"rect0\" type=\"hex.ioc.parser.xml.mock.MockRectangle\">\n        <argument type=\"Int\" value=\"10\"/>\n        <argument type=\"Int\" value=\"20\"/>\n        <argument type=\"Int\" value=\"30\"/>\n        <argument type=\"Int\" value=\"40\"/>\n    </bean>\n\n</root>");
		this.build("<root name=\"applicationContext\">\n\n    <bean id=\"rect1\" type=\"hex.ioc.parser.xml.mock.MockRectangle\">\n        <argument type=\"Int\" value=\"50\"/>\n        <argument type=\"Int\" value=\"60\"/>\n        <argument type=\"Int\" value=\"70\"/>\n        <argument ref=\"rect0.height\"/>\n    </bean>\n\n</root>");
		var rect0 = this._builderFactory.getCoreFactory().locate("rect0");
		hex_unittest_assertion_Assert.isInstanceOf(rect0,hex_ioc_parser_xml_mock_MockRectangle,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 501, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testParsingTwice"});
		hex_unittest_assertion_Assert.equals(10,rect0.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 502, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testParsingTwice"});
		hex_unittest_assertion_Assert.equals(20,rect0.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 503, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testParsingTwice"});
		hex_unittest_assertion_Assert.equals(30,rect0.width,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 504, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testParsingTwice"});
		hex_unittest_assertion_Assert.equals(40,rect0.height,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 505, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testParsingTwice"});
		var rect1 = this._builderFactory.getCoreFactory().locate("rect1");
		hex_unittest_assertion_Assert.isInstanceOf(rect1,hex_ioc_parser_xml_mock_MockRectangle,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 508, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testParsingTwice"});
		hex_unittest_assertion_Assert.equals(50,rect1.x,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 509, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testParsingTwice"});
		hex_unittest_assertion_Assert.equals(60,rect1.y,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 510, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testParsingTwice"});
		hex_unittest_assertion_Assert.equals(70,rect1.width,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 511, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testParsingTwice"});
		hex_unittest_assertion_Assert.equals(40,rect1.height,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 512, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testParsingTwice"});
	}
	,testModuleListeningService: function() {
		this.build("<root name=\"applicationContext\">\n\n    <service id=\"myService\" type=\"hex.ioc.parser.xml.mock.MockStubStatefulService\"/>\n\n    <module id=\"myModule\" type=\"hex.ioc.parser.xml.mock.MockModuleWithServiceCallback\">\n        <listen ref=\"myService\">\n            <event static-ref=\"hex.ioc.parser.xml.mock.MockStubStatefulService.BOOLEAN_VO_UPDATE\" method=\"onBooleanServiceCallback\"/>\n        </listen>\n    </module>\n\n</root>");
		var myService = this._builderFactory.getCoreFactory().locate("myService");
		hex_unittest_assertion_Assert.isNotNull(myService,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 521, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testModuleListeningService"});
		var myModule = this._builderFactory.getCoreFactory().locate("myModule");
		hex_unittest_assertion_Assert.isNotNull(myModule,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 524, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testModuleListeningService"});
		var booleanVO = new hex_ioc_parser_xml_mock_MockBooleanVO(true);
		myService.setBooleanVO(booleanVO);
		hex_unittest_assertion_Assert.isTrue(myModule.getBooleanValue(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 528, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testModuleListeningService"});
	}
	,testModuleListeningServiceWithStrategyAndModuleInjection: function() {
		this.build("<root name=\"applicationContext\">\n\n    <service id=\"myService\" type=\"hex.ioc.parser.xml.mock.MockStubStatefulService\"/>\n\n    <module id=\"myModule\" type=\"hex.ioc.parser.xml.mock.MockModuleWithServiceCallback\">\n        <listen ref=\"myService\">\n            <event static-ref=\"hex.ioc.parser.xml.mock.MockStubStatefulService.INT_VO_UPDATE\"\n                   method=\"onFloatServiceCallback\"\n                   strategy=\"hex.ioc.parser.xml.mock.MockIntDividerEventAdapterStrategy\"\n                   injectedInModule=\"true\"/>\n        </listen>\n    </module>\n\n</root>");
		var myService = this._builderFactory.getCoreFactory().locate("myService");
		hex_unittest_assertion_Assert.isNotNull(myService,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 537, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testModuleListeningServiceWithStrategyAndModuleInjection"});
		var myModule = this._builderFactory.getCoreFactory().locate("myModule");
		hex_unittest_assertion_Assert.isNotNull(myModule,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 540, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testModuleListeningServiceWithStrategyAndModuleInjection"});
		var intVO = new hex_ioc_parser_xml_mock_MockIntVO(7);
		myService.setIntVO(intVO);
		hex_unittest_assertion_Assert.equals(3.5,myModule.getFloatValue(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 544, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testModuleListeningServiceWithStrategyAndModuleInjection"});
	}
	,testModuleListeningServiceWithStrategyAndContextInjection: function() {
		this.build("<root name=\"applicationContext\">\n\n    <helper id=\"mockDividerHelper\" type=\"hex.ioc.parser.xml.mock.MockDividerHelper\" map-type=\"hex.ioc.parser.xml.mock.IMockDividerHelper\"/>\n\n    <service id=\"myService\" type=\"hex.ioc.parser.xml.mock.MockStubStatefulService\"/>\n\n    <module id=\"myModuleA\" type=\"hex.ioc.parser.xml.mock.MockModuleWithServiceCallback\">\n        <listen ref=\"myService\">\n            <event static-ref=\"hex.ioc.parser.xml.mock.MockStubStatefulService.INT_VO_UPDATE\"\n                   method=\"onFloatServiceCallback\"\n                   strategy=\"hex.ioc.parser.xml.mock.MockIntDividerEventAdapterStrategy\"\n                   injectedInModule=\"true\"/>\n        </listen>\n    </module>\n\n    <module id=\"myModuleB\" type=\"hex.ioc.parser.xml.mock.AnotherMockModuleWithServiceCallback\">\n        <listen ref=\"myService\">\n            <event static-ref=\"hex.ioc.parser.xml.mock.MockStubStatefulService.INT_VO_UPDATE\"\n                   method=\"onFloatServiceCallback\"\n                   strategy=\"hex.ioc.parser.xml.mock.MockIntDividerEventAdapterStrategy\"\n                   injectedInModule=\"false\"/>\n        </listen>\n    </module>\n\n</root>");
		var mockDividerHelper = this._builderFactory.getCoreFactory().locate("mockDividerHelper");
		hex_unittest_assertion_Assert.isNotNull(mockDividerHelper,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 553, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testModuleListeningServiceWithStrategyAndContextInjection"});
		var myService = this._builderFactory.getCoreFactory().locate("myService");
		hex_unittest_assertion_Assert.isNotNull(myService,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 556, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testModuleListeningServiceWithStrategyAndContextInjection"});
		var myModuleA = this._builderFactory.getCoreFactory().locate("myModuleA");
		hex_unittest_assertion_Assert.isNotNull(myModuleA,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 559, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testModuleListeningServiceWithStrategyAndContextInjection"});
		var myModuleB = this._builderFactory.getCoreFactory().locate("myModuleB");
		hex_unittest_assertion_Assert.isNotNull(myModuleB,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 562, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testModuleListeningServiceWithStrategyAndContextInjection"});
		myService.setIntVO(new hex_ioc_parser_xml_mock_MockIntVO(7));
		hex_unittest_assertion_Assert.equals(3.5,myModuleA.getFloatValue(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 565, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testModuleListeningServiceWithStrategyAndContextInjection"});
		myService.setIntVO(new hex_ioc_parser_xml_mock_MockIntVO(9));
		hex_unittest_assertion_Assert.equals(4.5,myModuleB.getFloatValue(),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 568, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testModuleListeningServiceWithStrategyAndContextInjection"});
	}
	,testStaticRef: function() {
		this.build("<root name=\"applicationContext\">\n\n    <constant id=\"constant\" static-ref=\"hex.ioc.parser.xml.mock.MockStubStatefulService.INT_VO_UPDATE\"/>\n\n    <object id=\"object\" type=\"Object\">\n        <property name=\"property\" static-ref=\"hex.ioc.parser.xml.mock.MockStubStatefulService.INT_VO_UPDATE\"/>\n    </object>\n\n    <instance id=\"instance\" type=\"hex.ioc.parser.xml.mock.ClassWithConstantConstantArgument\">\n        <argument static-ref=\"hex.ioc.parser.xml.mock.MockStubStatefulService.INT_VO_UPDATE\"/>\n    </instance>\n\n</root>");
		var note = this._builderFactory.getCoreFactory().locate("constant");
		hex_unittest_assertion_Assert.isNotNull(note,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 577, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testStaticRef"});
		hex_unittest_assertion_Assert.equals(note,hex_ioc_parser_xml_mock_MockStubStatefulService.INT_VO_UPDATE,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 578, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testStaticRef"});
		var object = this._builderFactory.getCoreFactory().locate("object");
		hex_unittest_assertion_Assert.isNotNull(object,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 581, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testStaticRef"});
		hex_unittest_assertion_Assert.equals(object.property,hex_ioc_parser_xml_mock_MockStubStatefulService.INT_VO_UPDATE,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 582, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testStaticRef"});
		var instance = this._builderFactory.getCoreFactory().locate("instance");
		hex_unittest_assertion_Assert.isNotNull(instance,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 585, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testStaticRef"});
		hex_unittest_assertion_Assert.equals(instance.constant,hex_ioc_parser_xml_mock_MockStubStatefulService.INT_VO_UPDATE,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 586, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testStaticRef"});
	}
	,testEventProxy: function() {
		this.build("<root name=\"applicationContext\">\n\n    <chat id=\"chat\" type=\"hex.ioc.parser.xml.mock.MockChatModule\"/>\n\n    <receiver id=\"receiver\" type=\"hex.ioc.parser.xml.mock.MockReceiverModule\"/>\n\n    <parser id=\"parser\" type=\"hex.ioc.parser.xml.mock.MockMessageParserModule\" map-type=\"hex.ioc.parser.xml.mock.IMockMessageParserModule\"/>\n\n    <proxy id=\"eventProxy\" type=\"hex.event.EventProxy\">\n        <argument ref=\"receiver\"/>\n        <argument ref=\"receiver.onMessage\"/>\n        <listen ref=\"chat\">\n            <event static-ref=\"hex.ioc.parser.xml.mock.MockChatModule.TEXT_INPUT\" strategy=\"hex.ioc.parser.xml.mock.MockChatEventAdapterStrategyMacro\"/>\n        </listen>\n    </proxy>\n\n</root>");
		var eventProxy = this._builderFactory.getCoreFactory().locate("eventProxy");
		hex_unittest_assertion_Assert.isNotNull(eventProxy,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 595, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testEventProxy"});
		var chat = this._builderFactory.getCoreFactory().locate("chat");
		hex_unittest_assertion_Assert.isNotNull(chat,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 598, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testEventProxy"});
		var receiver = this._builderFactory.getCoreFactory().locate("receiver");
		hex_unittest_assertion_Assert.isNotNull(receiver,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 601, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testEventProxy"});
		var eventProxy1 = this._builderFactory.getCoreFactory().locate("eventProxy");
		hex_unittest_assertion_Assert.isNotNull(eventProxy1,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 604, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testEventProxy"});
		var parser = this._builderFactory.getCoreFactory().locate("parser");
		hex_unittest_assertion_Assert.isNotNull(parser,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 607, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testEventProxy"});
		haxe_Timer.delay(hex_unittest_runner_MethodRunner.asyncHandler($bind(this,this._onCompleteHandler)),500);
		chat.dispatchDomainEvent(hex_ioc_parser_xml_mock_MockChatModule.TEXT_INPUT,["bonjour"]);
	}
	,_onCompleteHandler: function() {
		var receiver = this._builderFactory.getCoreFactory().locate("receiver");
		hex_unittest_assertion_Assert.equals("BONJOUR:HTTP://GOOGLE.COM",receiver.message,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 616, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "_onCompleteHandler"});
	}
	,testEventTrigger: function() {
		this.build("<root name=\"applicationContext\">\n\n    <chat id=\"chat\" type=\"hex.ioc.parser.xml.mock.MockChatModule\"/>\n\n    <receiver id=\"receiver\" type=\"hex.ioc.parser.xml.mock.MockReceiverModule\" map-type=\"hex.ioc.parser.xml.mock.MockReceiverModule\"/>\n\n    <parser id=\"parser\" type=\"hex.ioc.parser.xml.mock.MockMessageParserModule\" map-type=\"hex.ioc.parser.xml.mock.IMockMessageParserModule\"/>\n\n    <trigger id=\"eventTrigger\" type=\"Object\">\n        <listen ref=\"chat\">\n            <event static-ref=\"hex.ioc.parser.xml.mock.MockChatModule.TEXT_INPUT\" strategy=\"hex.ioc.parser.xml.mock.MockChatAdapterStrategyMacro\"/>\n        </listen>\n    </trigger>\n\n</root>");
		var eventTrigger = this._builderFactory.getCoreFactory().locate("eventTrigger");
		hex_unittest_assertion_Assert.isNotNull(eventTrigger,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 625, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testEventTrigger"});
		var chat = this._builderFactory.getCoreFactory().locate("chat");
		hex_unittest_assertion_Assert.isNotNull(chat,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 628, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testEventTrigger"});
		var receiver = this._builderFactory.getCoreFactory().locate("receiver");
		hex_unittest_assertion_Assert.isNotNull(receiver,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 631, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testEventTrigger"});
		var parser = this._builderFactory.getCoreFactory().locate("parser");
		hex_unittest_assertion_Assert.isNotNull(parser,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 634, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testEventTrigger"});
		haxe_Timer.delay(hex_unittest_runner_MethodRunner.asyncHandler($bind(this,this._onCompleteHandler)),500);
		chat.dispatchDomainEvent(hex_ioc_parser_xml_mock_MockChatModule.TEXT_INPUT,["bonjour"]);
	}
	,testMapTypeAttribute: function() {
		this.build("<root name=\"applicationContext\">\n\n    <module id=\"myModule\" type=\"hex.ioc.parser.xml.mock.MockMappedModule\" map-type=\"hex.ioc.parser.xml.mock.IMockMappedModule\"/>\n\n</root>");
		var myModule = this._builderFactory.getCoreFactory().locate("myModule");
		hex_unittest_assertion_Assert.isNotNull(myModule,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 646, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testMapTypeAttribute"});
		hex_unittest_assertion_Assert.isInstanceOf(myModule,hex_ioc_parser_xml_mock_MockMappedModule,"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 647, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testMapTypeAttribute"});
		hex_unittest_assertion_Assert.equals(myModule,this._applicationContext.getBasicInjector().getInstance(hex_ioc_parser_xml_mock_IMockMappedModule,"myModule"),"",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 649, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testMapTypeAttribute"});
	}
	,testIfAttribute: function() {
		this._applicationAssembler.addConditionalProperty((function($this) {
			var $r;
			var _g = new haxe_ds_StringMap();
			if(__map_reserved.production != null) _g.setReserved("production",true); else _g.h["production"] = true;
			if(__map_reserved.debug != null) _g.setReserved("debug",false); else _g.h["debug"] = false;
			if(__map_reserved.release != null) _g.setReserved("release",false); else _g.h["release"] = false;
			$r = _g;
			return $r;
		}(this)));
		this.build("<root name=\"applicationContext\">\n\n    <msg id=\"message\" value=\"hello debug\" if=\"debug,release\"/>\n    <msg id=\"message\" value=\"hello production\" if=\"production\"/>\n\n</root>");
		hex_unittest_assertion_Assert.equals("hello production",this._builderFactory.getCoreFactory().locate("message"),"message value should equal 'hello production'",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 658, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testIfAttribute"});
	}
	,testFilePreprocessor: function() {
		var source = "\n\t\t<root $" + "{context}>\n\n\t\t\t$" + "{node}\n\n\t\t</root>";
		var preprocessor = new hex_ioc_parser_preprocess_Preprocessor();
		preprocessor.addProperty("hello","bonjour");
		preprocessor.addProperty("contextName","applicationContext");
		preprocessor.addProperty("context","name=\"$" + "{contextName}\"");
		preprocessor.addProperty("node","<msg id=\"message\" value=\"$" + "{hello}\"/>");
		var xml = Xml.parse(preprocessor.parse(source));
		this._build(xml);
		hex_unittest_assertion_Assert.equals("bonjour",this._builderFactory.getCoreFactory().locate("message"),"message value should equal 'bonjour'",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 681, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testFilePreprocessor"});
	}
	,testAnotherFilePreprocessor: function() {
		this.build("<root name=\"applicationContext\">\n\n    <msg id=\"message\" value=\"bonjour\"/>\n\n</root>");
		hex_unittest_assertion_Assert.equals("bonjour",this._builderFactory.getCoreFactory().locate("message"),"message value should equal 'bonjour'",{ fileName : "ObjectXMLParserTest.hx", lineNumber : 692, className : "hex.ioc.parser.xml.ObjectXMLParserTest", methodName : "testAnotherFilePreprocessor"});
	}
	,__class__: hex_ioc_parser_xml_ObjectXMLParserTest
};
var hex_ioc_parser_xml_StateXMLParser = function() {
	hex_ioc_parser_xml_AbstractXMLParser.call(this);
};
$hxClasses["hex.ioc.parser.xml.StateXMLParser"] = hex_ioc_parser_xml_StateXMLParser;
hex_ioc_parser_xml_StateXMLParser.__name__ = ["hex","ioc","parser","xml","StateXMLParser"];
hex_ioc_parser_xml_StateXMLParser.__super__ = hex_ioc_parser_xml_AbstractXMLParser;
hex_ioc_parser_xml_StateXMLParser.prototype = $extend(hex_ioc_parser_xml_AbstractXMLParser.prototype,{
	parse: function() {
		var iterator = this.getXMLContext().firstElement().elementsNamed("state");
		while(iterator.hasNext()) {
			var node = iterator.next();
			this._parseNode(node);
			this.getXMLContext().firstElement().removeChild(node);
		}
		this._handleComplete();
	}
	,_parseNode: function(xml) {
		var applicationContext = this.getApplicationContext();
		var applicationAssembler = this.getApplicationAssembler();
		var identifier = hex_ioc_parser_xml_XMLAttributeUtil.getID(xml);
		if(identifier == null) throw new js__$Boot_HaxeError(new hex_ioc_error_ParsingException(Std.string(this) + " encounters parsing error with '" + (function($this) {
			var $r;
			if(xml.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + xml.nodeType;
			$r = xml.nodeName;
			return $r;
		}(this)) + "' node. You must set an id attribute.",{ fileName : "StateXMLParser.hx", lineNumber : 41, className : "hex.ioc.parser.xml.StateXMLParser", methodName : "_parseNode"}));
		var staticReference = hex_ioc_parser_xml_XMLAttributeUtil.getStaticRef(xml);
		var instanceReference = hex_ioc_parser_xml_XMLAttributeUtil.getRef(xml);
		var enterListIterator = xml.elementsNamed("enter");
		var enterList = [];
		while(enterListIterator.hasNext()) {
			var enterListItem = enterListIterator.next();
			enterList.push(new hex_ioc_vo_CommandMappingVO(hex_ioc_parser_xml_XMLAttributeUtil.getCommandClass(enterListItem),hex_ioc_parser_xml_XMLAttributeUtil.getFireOnce(enterListItem),hex_ioc_parser_xml_XMLAttributeUtil.getContextOwner(enterListItem)));
		}
		var exitListIterator = xml.elementsNamed("exit");
		var exitList = [];
		while(exitListIterator.hasNext()) {
			var exitListItem = exitListIterator.next();
			exitList.push(new hex_ioc_vo_CommandMappingVO(hex_ioc_parser_xml_XMLAttributeUtil.getCommandClass(exitListItem),hex_ioc_parser_xml_XMLAttributeUtil.getFireOnce(exitListItem),hex_ioc_parser_xml_XMLAttributeUtil.getContextOwner(exitListItem)));
		}
		applicationAssembler.configureStateTransition(applicationContext,identifier,staticReference,instanceReference,enterList,exitList);
	}
	,__class__: hex_ioc_parser_xml_StateXMLParser
});
var hex_ioc_parser_xml_XMLAttributeUtil = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException("'XMLAttributeUtil' class can't be instantiated.",{ fileName : "XMLAttributeUtil.hx", lineNumber : 14, className : "hex.ioc.parser.xml.XMLAttributeUtil", methodName : "new"}));
};
$hxClasses["hex.ioc.parser.xml.XMLAttributeUtil"] = hex_ioc_parser_xml_XMLAttributeUtil;
hex_ioc_parser_xml_XMLAttributeUtil.__name__ = ["hex","ioc","parser","xml","XMLAttributeUtil"];
hex_ioc_parser_xml_XMLAttributeUtil.getID = function(xml) {
	return xml.get("id");
};
hex_ioc_parser_xml_XMLAttributeUtil.getType = function(xml) {
	return xml.get("type");
};
hex_ioc_parser_xml_XMLAttributeUtil.getName = function(xml) {
	return xml.get("name");
};
hex_ioc_parser_xml_XMLAttributeUtil.getRef = function(xml) {
	return xml.get("ref");
};
hex_ioc_parser_xml_XMLAttributeUtil.getValue = function(xml) {
	return xml.get("value");
};
hex_ioc_parser_xml_XMLAttributeUtil.getFactoryMethod = function(xml) {
	return xml.get("factory");
};
hex_ioc_parser_xml_XMLAttributeUtil.getSingletonAccess = function(xml) {
	return xml.get("singleton-access");
};
hex_ioc_parser_xml_XMLAttributeUtil.getInjectInto = function(xml) {
	return xml.get("inject-into") == "true";
};
hex_ioc_parser_xml_XMLAttributeUtil.getMethod = function(xml) {
	return xml.get("method");
};
hex_ioc_parser_xml_XMLAttributeUtil.getParserClass = function(xml) {
	return xml.get("parser-class");
};
hex_ioc_parser_xml_XMLAttributeUtil.getLocator = function(xml) {
	return xml.get("locator");
};
hex_ioc_parser_xml_XMLAttributeUtil.getAttribute = function(xml,attName) {
	return xml.get(attName);
};
hex_ioc_parser_xml_XMLAttributeUtil.getMapType = function(xml) {
	return xml.get("map-type");
};
hex_ioc_parser_xml_XMLAttributeUtil.getMapName = function(xml) {
	return xml.get("map-name");
};
hex_ioc_parser_xml_XMLAttributeUtil.getStaticRef = function(xml) {
	return xml.get("static-ref");
};
hex_ioc_parser_xml_XMLAttributeUtil.getCommandClass = function(xml) {
	return xml.get("command-class");
};
hex_ioc_parser_xml_XMLAttributeUtil.getFireOnce = function(xml) {
	return xml.get("fire-once") == "true";
};
hex_ioc_parser_xml_XMLAttributeUtil.getContextOwner = function(xml) {
	return xml.get("context-owner");
};
hex_ioc_parser_xml_XMLAttributeUtil.getIf = function(xml) {
	return xml.get("if");
};
hex_ioc_parser_xml_XMLAttributeUtil.getIfNot = function(xml) {
	return xml.get("if-not");
};
hex_ioc_parser_xml_XMLAttributeUtil.prototype = {
	__class__: hex_ioc_parser_xml_XMLAttributeUtil
};
var hex_ioc_parser_xml_XMLFileReader = function() { };
$hxClasses["hex.ioc.parser.xml.XMLFileReader"] = hex_ioc_parser_xml_XMLFileReader;
hex_ioc_parser_xml_XMLFileReader.__name__ = ["hex","ioc","parser","xml","XMLFileReader"];
var hex_ioc_parser_xml_XMLParserCollection = function() {
	hex_ioc_parser_AbstractParserCollection.call(this);
};
$hxClasses["hex.ioc.parser.xml.XMLParserCollection"] = hex_ioc_parser_xml_XMLParserCollection;
hex_ioc_parser_xml_XMLParserCollection.__name__ = ["hex","ioc","parser","xml","XMLParserCollection"];
hex_ioc_parser_xml_XMLParserCollection.__super__ = hex_ioc_parser_AbstractParserCollection;
hex_ioc_parser_xml_XMLParserCollection.prototype = $extend(hex_ioc_parser_AbstractParserCollection.prototype,{
	_buildParserList: function() {
		this._parserCommandCollection.push(new hex_ioc_parser_xml_ApplicationContextXMLParser());
		this._parserCommandCollection.push(new hex_ioc_parser_xml_StateXMLParser());
		this._parserCommandCollection.push(new hex_ioc_parser_xml_ObjectXMLParser());
	}
	,__class__: hex_ioc_parser_xml_XMLParserCollection
});
var hex_ioc_parser_xml_XMLParserUtil = function() {
};
$hxClasses["hex.ioc.parser.xml.XMLParserUtil"] = hex_ioc_parser_xml_XMLParserUtil;
hex_ioc_parser_xml_XMLParserUtil.__name__ = ["hex","ioc","parser","xml","XMLParserUtil"];
hex_ioc_parser_xml_XMLParserUtil.getArguments = function(xml,type) {
	var args = [];
	var iterator = xml.elementsNamed("argument");
	if(iterator.hasNext()) while(iterator.hasNext()) {
		var item = iterator.next();
		var argItem = { };
		argItem.staticRef = item.get("static-ref");
		argItem.ref = item.get("ref");
		argItem.type = item.get("type");
		argItem.value = item.get("value");
		args.push(argItem);
	} else {
		var value = hex_ioc_parser_xml_XMLAttributeUtil.getValue(xml);
		if(value != null) args.push({ type : "String", value : xml.get("value")});
	}
	return args;
};
hex_ioc_parser_xml_XMLParserUtil.getMethodCallArguments = function(xml) {
	var args = [];
	var iterator = xml.elementsNamed("argument");
	while(iterator.hasNext()) {
		var item = iterator.next();
		var argItem = { };
		argItem.id = item.get("id");
		argItem.staticRef = item.get("static-ref");
		argItem.ref = item.get("ref");
		argItem.type = item.get("type");
		argItem.value = item.get("value");
		args.push(argItem);
	}
	return args;
};
hex_ioc_parser_xml_XMLParserUtil.getEventArguments = function(xml) {
	var args = [];
	var iterator = xml.elementsNamed("event");
	while(iterator.hasNext()) {
		var item = iterator.next();
		var domainListenerVOArguments = new hex_ioc_vo_DomainListenerVOArguments();
		domainListenerVOArguments.name = item.get("name");
		domainListenerVOArguments.staticRef = item.get("static-ref");
		domainListenerVOArguments.method = item.get("method");
		domainListenerVOArguments.strategy = item.get("strategy");
		domainListenerVOArguments.injectedInModule = item.get("injectedInModule") == "true";
		args.push(domainListenerVOArguments);
	}
	return args;
};
hex_ioc_parser_xml_XMLParserUtil.getItems = function(xml) {
	var args = [];
	var iterator = xml.elementsNamed("item");
	while(iterator.hasNext()) {
		var item = iterator.next();
		var keyList = item.elementsNamed("key");
		var valueList = item.elementsNamed("value");
		if(keyList.hasNext()) args.push({ mapName : hex_ioc_parser_xml_XMLAttributeUtil.getMapName(item), key : hex_ioc_parser_xml_XMLParserUtil._getAttributes(keyList.next()), value : hex_ioc_parser_xml_XMLParserUtil._getAttributes(valueList.next())});
	}
	return args;
};
hex_ioc_parser_xml_XMLParserUtil._getAttributes = function(xml) {
	var obj = { };
	var iterator = xml.attributes();
	while(iterator.hasNext()) {
		var attribute = iterator.next();
		Reflect.setField(obj,attribute,xml.get(attribute));
	}
	return obj;
};
hex_ioc_parser_xml_XMLParserUtil.concatXmlList = function(configList,name) {
	var result = "<?xml version=\"1.0\" encoding=\"utf-8\" ?><root name=\"" + name + "\">";
	var l = configList.length;
	var matcher = new EReg("<\\?xml[^>]+>\\s*<\\s*(\\w+)\\s*>([\\s\\S]*)<\\s*/\\s*\\1\\s*>","");
	var _g = 0;
	while(_g < l) {
		var i = _g++;
		if(matcher.match(configList[i])) result += matcher.matched(2);
	}
	result += "</root>";
	return result;
};
hex_ioc_parser_xml_XMLParserUtil.getConfigList = function(list) {
	var result = [];
	var l = list.length;
	var _g = 0;
	while(_g < l) {
		var i = _g++;
		result.push(haxe_Resource.getString(list[i]));
	}
	return result;
};
hex_ioc_parser_xml_XMLParserUtil.getConcatenatedConfig = function(configKeyList,name) {
	return hex_ioc_parser_xml_XMLParserUtil.concatXmlList(hex_ioc_parser_xml_XMLParserUtil.getConfigList(configKeyList),name);
};
hex_ioc_parser_xml_XMLParserUtil.getIfList = function(xml) {
	var s = hex_ioc_parser_xml_XMLAttributeUtil.getIf(xml);
	if(s != null) return s.split(","); else return null;
};
hex_ioc_parser_xml_XMLParserUtil.getIfNotList = function(xml) {
	var s = hex_ioc_parser_xml_XMLAttributeUtil.getIfNot(xml);
	if(s != null) return s.split(","); else return null;
};
hex_ioc_parser_xml_XMLParserUtil.prototype = {
	__class__: hex_ioc_parser_xml_XMLParserUtil
};
var hex_ioc_parser_xml_XmlParserUtilTest = function() { };
$hxClasses["hex.ioc.parser.xml.XmlParserUtilTest"] = hex_ioc_parser_xml_XmlParserUtilTest;
hex_ioc_parser_xml_XmlParserUtilTest.__name__ = ["hex","ioc","parser","xml","XmlParserUtilTest"];
hex_ioc_parser_xml_XmlParserUtilTest.prototype = {
	testGetArgumentsWithListOfArguments: function() {
		var xml = "<size id=\"rectSize\" type=\"flash.geom.Point\"><argument type=\"Int\" value=\"30\"/><argument type=\"Bool\" value=\"true\"/></size>";
		var argXML = Xml.parse(xml);
		var args = hex_ioc_parser_xml_XMLParserUtil.getArguments(argXML.firstElement(),"");
		hex_unittest_assertion_Assert.equals(2,args.length,"Arguments length should be 2",{ fileName : "XmlParserUtilTest.hx", lineNumber : 18, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetArgumentsWithListOfArguments"});
		hex_unittest_assertion_Assert.equals("Int",args[0].type,"Type should be 'Int'",{ fileName : "XmlParserUtilTest.hx", lineNumber : 19, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetArgumentsWithListOfArguments"});
		hex_unittest_assertion_Assert.equals("30",args[0].value,"Value should be '30'",{ fileName : "XmlParserUtilTest.hx", lineNumber : 20, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetArgumentsWithListOfArguments"});
		hex_unittest_assertion_Assert.equals("Bool",args[1].type,"Type should be 'Bool'",{ fileName : "XmlParserUtilTest.hx", lineNumber : 21, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetArgumentsWithListOfArguments"});
		hex_unittest_assertion_Assert.equals("true",args[1].value,"Value should be 'true'",{ fileName : "XmlParserUtilTest.hx", lineNumber : 22, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetArgumentsWithListOfArguments"});
	}
	,testGetArgumentsWithSingleArgument: function() {
		var xml = "<class id=\"userInfoServiceNoteClass\" type=\"Class\" value=\"service.userinfo.note.UserInfoServiceNote\"/>";
		var argXML = Xml.parse(xml);
		var args = hex_ioc_parser_xml_XMLParserUtil.getArguments(argXML.firstElement(),"");
		hex_unittest_assertion_Assert.equals(1,args.length,"Arguments length should be 1",{ fileName : "XmlParserUtilTest.hx", lineNumber : 32, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetArgumentsWithSingleArgument"});
		hex_unittest_assertion_Assert.equals("String",args[0].type,"Type should be 'Class'",{ fileName : "XmlParserUtilTest.hx", lineNumber : 33, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetArgumentsWithSingleArgument"});
		hex_unittest_assertion_Assert.equals("service.userinfo.note.UserInfoServiceNote",args[0].value,"Value should be 'service.userinfo.note.UserInfoServiceNote'",{ fileName : "XmlParserUtilTest.hx", lineNumber : 34, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetArgumentsWithSingleArgument"});
	}
	,testGetEventArguments: function() {
		var xml = "<listen ref=\"bottomIconListModule\"><event static-ref=\"constant.iconlist.CIconNote.SET_SIZE_ICON\" method=\"setSizeIconButton\"/><event name=\"onAddLine\" strategy=\"eventstrategy.chat.AddLineEventStrategy\" method=\"addNewLine\" injectedInModule=\"true\"/></listen>";
		var argXML = Xml.parse(xml);
		var args = hex_ioc_parser_xml_XMLParserUtil.getEventArguments(argXML.firstElement());
		hex_unittest_assertion_Assert.equals(2,args.length,"Arguments length should be 2",{ fileName : "XmlParserUtilTest.hx", lineNumber : 44, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetEventArguments"});
		hex_unittest_assertion_Assert.isFalse(args[0].injectedInModule,"'injectedInModule' should be false",{ fileName : "XmlParserUtilTest.hx", lineNumber : 45, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetEventArguments"});
		hex_unittest_assertion_Assert.isNull(args[0].name,"'name' should be null",{ fileName : "XmlParserUtilTest.hx", lineNumber : 46, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetEventArguments"});
		hex_unittest_assertion_Assert.equals("constant.iconlist.CIconNote.SET_SIZE_ICON",args[0].staticRef,"'staticRef' should be 'constant.iconlist.CIconNote.SET_SIZE_ICON'",{ fileName : "XmlParserUtilTest.hx", lineNumber : 47, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetEventArguments"});
		hex_unittest_assertion_Assert.equals("setSizeIconButton",args[0].method,"'method' should be 'setSizeIconButton'",{ fileName : "XmlParserUtilTest.hx", lineNumber : 48, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetEventArguments"});
		hex_unittest_assertion_Assert.isNull(args[0].strategy,"'strategy' should be null",{ fileName : "XmlParserUtilTest.hx", lineNumber : 49, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetEventArguments"});
		hex_unittest_assertion_Assert.isTrue(args[1].injectedInModule,"'injectedInModule' should be true",{ fileName : "XmlParserUtilTest.hx", lineNumber : 51, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetEventArguments"});
		hex_unittest_assertion_Assert.equals("onAddLine",args[1].name,"'name' should be 'onAddLine'",{ fileName : "XmlParserUtilTest.hx", lineNumber : 52, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetEventArguments"});
		hex_unittest_assertion_Assert.isNull(args[1].staticRef,"'staticRef' should be null",{ fileName : "XmlParserUtilTest.hx", lineNumber : 53, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetEventArguments"});
		hex_unittest_assertion_Assert.equals("addNewLine",args[1].method,"'method' should be 'addNewLine'",{ fileName : "XmlParserUtilTest.hx", lineNumber : 54, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetEventArguments"});
		hex_unittest_assertion_Assert.equals("eventstrategy.chat.AddLineEventStrategy",args[1].strategy,"'strategy' should be 'eventstrategy.chat.AddLineEventStrateg'",{ fileName : "XmlParserUtilTest.hx", lineNumber : 55, className : "hex.ioc.parser.xml.XmlParserUtilTest", methodName : "testGetEventArguments"});
	}
	,__class__: hex_ioc_parser_xml_XmlParserUtilTest
};
var hex_ioc_parser_xml_assembler_ApplicationAssemblerStateTest = function() { };
$hxClasses["hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest"] = hex_ioc_parser_xml_assembler_ApplicationAssemblerStateTest;
hex_ioc_parser_xml_assembler_ApplicationAssemblerStateTest.__name__ = ["hex","ioc","parser","xml","assembler","ApplicationAssemblerStateTest"];
hex_ioc_parser_xml_assembler_ApplicationAssemblerStateTest.prototype = {
	_contextParser: null
	,_builderFactory: null
	,_applicationAssembler: null
	,setUp: function() {
		this._applicationAssembler = new hex_ioc_assembler_ApplicationAssembler();
	}
	,tearDown: function() {
		hex_domain_ApplicationDomainDispatcher.getInstance().clear();
		this._applicationAssembler.release();
		hex_ioc_parser_xml_assembler_mock_MockStateCommand.callCount = 0;
		hex_ioc_parser_xml_assembler_mock_MockStateCommand.lastInjecteContext = null;
		hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.callCount = 0;
		hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.lastInjectedModule = null;
	}
	,_build: function(xml) {
		this._contextParser = new hex_ioc_parser_xml_ApplicationXMLParser();
		this._contextParser.parse(this._applicationAssembler,xml);
		this._applicationAssembler.buildEverything();
	}
	,testBuildingStateTransitions: function() {
		var source = "\n\t\t<root name=\"applicationContext\">\n\n\t\t\t<state id=\"assemblingStart\" ref=\"applicationContext.state.ASSEMBLING_START\">\n\t\t\t\t<enter command-class=\"hex.ioc.parser.xml.assembler.mock.MockStateCommand\"/>\n\t\t\t</state>\n\t\t\t\n\t\t\t<state id=\"objectsBuilt\" ref=\"applicationContext.state.OBJECTS_BUILT\">\n\t\t\t\t<enter command-class=\"hex.ioc.parser.xml.assembler.mock.MockStateCommandWithModule\" fire-once=\"true\" context-owner=\"module\"/>\n\t\t\t</state>\n\t\t\t\n\t\t\t<state id=\"domainListenersAssigned\" ref=\"applicationContext.state.DOMAIN_LISTENERS_ASSIGNED\">\n\t\t\t\t<enter command-class=\"hex.ioc.parser.xml.assembler.mock.MockStateCommand\"/>\n\t\t\t</state>\n\t\t\t\n\t\t\t<state id=\"methodsCalled\" ref=\"applicationContext.state.METHODS_CALLED\">\n\t\t\t\t<enter command-class=\"hex.ioc.parser.xml.assembler.mock.MockStateCommand\"/>\n\t\t\t</state>\n\t\t\t\n\t\t\t<state id=\"modulesInitialized\" ref=\"applicationContext.state.MODULES_INITIALIZED\">\n\t\t\t\t<enter command-class=\"hex.ioc.parser.xml.assembler.mock.MockStateCommand\"/>\n\t\t\t</state>\n\t\t\t\n\t\t\t<state id=\"assemblingEnd\" ref=\"applicationContext.state.ASSEMBLING_END\">\n\t\t\t\t<enter command-class=\"hex.ioc.parser.xml.assembler.mock.MockStateCommandWithModule\" fire-once=\"true\" context-owner=\"anotherModule\"/>\n\t\t\t</state>\n\t\t\t\n\t\t\t<module id=\"module\" type=\"hex.ioc.parser.xml.assembler.mock.MockModule\" map-type=\"hex.module.IModule\"/>\n\t\t\t<module id=\"anotherModule\" type=\"hex.ioc.parser.xml.assembler.mock.MockModule\" map-type=\"hex.module.IModule\"/>\n\n\t\t</root>";
		var xml = Xml.parse(source);
		this._build(xml);
		this._builderFactory = this._applicationAssembler.getBuilderFactory(this._applicationAssembler.getApplicationContext("applicationContext"));
	}
	,testExtendingStateTransitions: function() {
		var source = "\n\t\t<root name=\"applicationContext\" type=\"hex.ioc.parser.xml.assembler.mock.MockApplicationContext\">\n\n\t\t\t<state id=\"customState\" ref=\"applicationContext.state.CUSTOM_STATE\">\n\t\t\t\t<enter command-class=\"hex.ioc.parser.xml.assembler.mock.MockStateCommandWithModule\" context-owner=\"anotherModule\"/>\n\t\t\t</state>\n\t\t\t\n\t\t\t<state id=\"anotherState\" ref=\"applicationContext.state.ANOTHER_STATE\">\n\t\t\t\t<enter command-class=\"hex.ioc.parser.xml.assembler.mock.MockStateCommand\" fire-once=\"true\"/>\n\t\t\t</state>\n\t\t\t\n\t\t\t<module id=\"module\" type=\"hex.ioc.parser.xml.assembler.mock.MockModule\" map-type=\"hex.module.IModule\"/>\n\t\t\t<module id=\"anotherModule\" type=\"hex.ioc.parser.xml.assembler.mock.MockModule\" map-type=\"hex.module.IModule\"/>\n\n\t\t</root>";
		var xml = Xml.parse(source);
		this._build(xml);
		var builderFactory = this._applicationAssembler.getBuilderFactory(this._applicationAssembler.getApplicationContext("applicationContext"));
		var coreFactory = builderFactory.getCoreFactory();
		var module = coreFactory.locate("module");
		var anotherModule = coreFactory.locate("anotherModule");
		hex_unittest_assertion_Assert.isNotNull(module,"'module' shouldn't be null",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 115, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
		hex_unittest_assertion_Assert.isNotNull(anotherModule,"'anotherModule' shouldn't be null",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 116, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
		var applicationContext = builderFactory.getCoreFactory().locate("applicationContext");
		hex_unittest_assertion_Assert.isNotNull(applicationContext,"applicationContext shouldn't be null",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 119, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
		hex_unittest_assertion_Assert.isInstanceOf(applicationContext,hex_ioc_parser_xml_assembler_mock_MockApplicationContext,"applicationContext shouldn't be an instance of 'MockApplicationContext'",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 120, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
		hex_unittest_assertion_Assert.isNotNull(applicationContext.state.CUSTOM_STATE,"CUSTOM_STATE shouldn't be null",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 122, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
		applicationContext.fireApplicationInit();
		hex_unittest_assertion_Assert.equals(1,hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.callCount,"'MockStateCommandWithModule' should have been called once",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 125, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
		hex_unittest_assertion_Assert.equals(anotherModule,hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.lastInjectedModule,"module should be the same",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 126, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
		applicationContext.fireSwitchState();
		hex_unittest_assertion_Assert.equals(1,hex_ioc_parser_xml_assembler_mock_MockStateCommand.callCount,"'MockStateCommand' should have been called once",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 129, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
		hex_unittest_assertion_Assert.equals(applicationContext,hex_ioc_parser_xml_assembler_mock_MockStateCommand.lastInjecteContext,"applicationContext should be the same",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 130, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
		hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.lastInjectedModule = null;
		applicationContext.fireSwitchBack();
		hex_unittest_assertion_Assert.equals(2,hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.callCount,"'MockStateCommandWithModule' should have been called twice",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 134, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
		hex_unittest_assertion_Assert.equals(anotherModule,hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.lastInjectedModule,"module should be the same",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 135, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
		applicationContext.fireSwitchState();
		hex_ioc_parser_xml_assembler_mock_MockStateCommand.lastInjecteContext = null;
		hex_unittest_assertion_Assert.equals(1,hex_ioc_parser_xml_assembler_mock_MockStateCommand.callCount,"'MockStateCommand' should have been called once",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 139, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
		hex_unittest_assertion_Assert.isNull(hex_ioc_parser_xml_assembler_mock_MockStateCommand.lastInjecteContext,"applicationContext should be null",{ fileName : "ApplicationAssemblerStateTest.hx", lineNumber : 140, className : "hex.ioc.parser.xml.assembler.ApplicationAssemblerStateTest", methodName : "testExtendingStateTransitions"});
	}
	,__class__: hex_ioc_parser_xml_assembler_ApplicationAssemblerStateTest
};
var hex_ioc_parser_xml_assembler_mock_MockApplicationContext = function(dispatcher,coreFactory,applicationContextName) {
	hex_ioc_assembler_ApplicationContext.call(this,dispatcher,coreFactory,applicationContextName);
};
$hxClasses["hex.ioc.parser.xml.assembler.mock.MockApplicationContext"] = hex_ioc_parser_xml_assembler_mock_MockApplicationContext;
hex_ioc_parser_xml_assembler_mock_MockApplicationContext.__name__ = ["hex","ioc","parser","xml","assembler","mock","MockApplicationContext"];
hex_ioc_parser_xml_assembler_mock_MockApplicationContext.__super__ = hex_ioc_assembler_ApplicationContext;
hex_ioc_parser_xml_assembler_mock_MockApplicationContext.prototype = $extend(hex_ioc_assembler_ApplicationContext.prototype,{
	_initStateList: function() {
		this.state = new hex_ioc_parser_xml_assembler_mock_MockApplicationContextStateList();
	}
	,fireApplicationInit: function() {
		this._dispatch(hex_ioc_parser_xml_assembler_mock_MockStateContextMessage.APPLICATION_INIT);
	}
	,fireSwitchState: function() {
		this._dispatch(hex_ioc_parser_xml_assembler_mock_MockStateContextMessage.SWITCH_STATE);
	}
	,fireSwitchBack: function() {
		this._dispatch(hex_ioc_parser_xml_assembler_mock_MockStateContextMessage.SWITCH_BACK);
	}
	,__class__: hex_ioc_parser_xml_assembler_mock_MockApplicationContext
});
var hex_ioc_parser_xml_assembler_mock_MockApplicationContextStateList = function() {
	this.ANOTHER_STATE = new hex_state_State("onAnotherState");
	this.CUSTOM_STATE = new hex_state_State("onCustomState");
	hex_ioc_assembler_ApplicationContextStateList.call(this);
	this.ASSEMBLING_END.addTransition(hex_ioc_parser_xml_assembler_mock_MockStateContextMessage.APPLICATION_INIT,this.CUSTOM_STATE);
	this.CUSTOM_STATE.addTransition(hex_ioc_parser_xml_assembler_mock_MockStateContextMessage.SWITCH_STATE,this.ANOTHER_STATE);
	this.ANOTHER_STATE.addTransition(hex_ioc_parser_xml_assembler_mock_MockStateContextMessage.SWITCH_BACK,this.CUSTOM_STATE);
};
$hxClasses["hex.ioc.parser.xml.assembler.mock.MockApplicationContextStateList"] = hex_ioc_parser_xml_assembler_mock_MockApplicationContextStateList;
hex_ioc_parser_xml_assembler_mock_MockApplicationContextStateList.__name__ = ["hex","ioc","parser","xml","assembler","mock","MockApplicationContextStateList"];
hex_ioc_parser_xml_assembler_mock_MockApplicationContextStateList.__super__ = hex_ioc_assembler_ApplicationContextStateList;
hex_ioc_parser_xml_assembler_mock_MockApplicationContextStateList.prototype = $extend(hex_ioc_assembler_ApplicationContextStateList.prototype,{
	CUSTOM_STATE: null
	,ANOTHER_STATE: null
	,__class__: hex_ioc_parser_xml_assembler_mock_MockApplicationContextStateList
});
var hex_module_Module = function() {
	this._injector = new hex_di_Injector();
	this._injector.mapToValue(hex_di_IBasicInjector,this._injector);
	this._injector.mapToValue(hex_di_IDependencyInjector,this._injector);
	this._domainDispatcher = hex_domain_ApplicationDomainDispatcher.getInstance().getDomainDispatcher(this.getDomain());
	this._annotationProvider = hex_metadata_AnnotationProvider.getAnnotationProvider(this.getDomain());
	this._annotationProvider.registerInjector(this._injector);
	this._internalDispatcher = new hex_event_Dispatcher();
	this._injector.mapToValue(hex_control_IFrontController,new hex_control_FrontController(this._internalDispatcher,this._injector,this));
	this._injector.mapToValue(hex_event_IDispatcher,this._internalDispatcher);
	this._injector.mapToType(hex_control_macro_IMacroExecutor,hex_control_macro_MacroExecutor);
	this._injector.mapToValue(hex_module_IModule,this);
	this._logger = new hex_log_DomainLogger(this.getDomain());
};
$hxClasses["hex.module.Module"] = hex_module_Module;
hex_module_Module.__name__ = ["hex","module","Module"];
hex_module_Module.__interfaces__ = [hex_module_IModule];
hex_module_Module.prototype = {
	_internalDispatcher: null
	,_domainDispatcher: null
	,_injector: null
	,_annotationProvider: null
	,_logger: null
	,initialize: function() {
		if(!this.get_isInitialized()) {
			this._onInitialisation();
			this._checkRuntimeDependencies(this._getRuntimeDependencies());
			this.isInitialized = true;
			this._fireInitialisationEvent();
		} else throw new js__$Boot_HaxeError(new hex_error_IllegalStateException(Std.string(this) + ".initialize can't be called more than once. Check your code.",{ fileName : "Module.hx", lineNumber : 78, className : "hex.module.Module", methodName : "initialize"}));
	}
	,isInitialized: null
	,get_isInitialized: function() {
		return this.isInitialized;
	}
	,isReleased: null
	,get_isReleased: function() {
		return this.isReleased;
	}
	,getDomain: function() {
		return hex_domain_DomainExpert.getInstance().getDomainFor(this);
	}
	,dispatchPublicMessage: function(messageType,data) {
		if(this._domainDispatcher != null) this._domainDispatcher.dispatch(messageType,data); else throw new js__$Boot_HaxeError(new hex_error_IllegalStateException("Domain dispatcher is null. Try to use 'Module.registerInternalDomain' before calling super constructor to fix the problem",{ fileName : "Module.hx", lineNumber : 125, className : "hex.module.Module", methodName : "dispatchPublicMessage"}));
	}
	,addHandler: function(messageType,scope,callback) {
		if(this._domainDispatcher != null) this._domainDispatcher.addHandler(messageType,scope,callback); else throw new js__$Boot_HaxeError(new hex_error_IllegalStateException("Domain dispatcher is null. Try to use 'Module.registerInternalDomain' before calling super constructor to fix the problem",{ fileName : "Module.hx", lineNumber : 140, className : "hex.module.Module", methodName : "addHandler"}));
	}
	,removeHandler: function(messageType,scope,callback) {
		if(this._domainDispatcher != null) this._domainDispatcher.removeHandler(messageType,scope,callback); else throw new js__$Boot_HaxeError(new hex_error_IllegalStateException("Domain dispatcher is null. Try to use 'Module.registerInternalDomain' before calling super constructor to fix the problem",{ fileName : "Module.hx", lineNumber : 155, className : "hex.module.Module", methodName : "removeHandler"}));
	}
	,_dispatchPrivateMessage: function(messageType,data) {
		this._internalDispatcher.dispatch(messageType,data);
	}
	,buildViewHelper: function(type,view) {
		return hex_view_viewhelper_ViewHelperManager.getInstance(this).buildViewHelper(this._injector,type,view);
	}
	,release: function() {
		if(!this.get_isReleased()) {
			this.isReleased = true;
			this._onRelease();
			this._fireReleaseEvent();
			hex_view_viewhelper_ViewHelperManager.release(this);
			if(this._domainDispatcher != null) this._domainDispatcher.removeAllListeners();
			this._internalDispatcher.removeAllListeners();
			hex_domain_DomainExpert.getInstance().releaseDomain(this);
			this._annotationProvider.unregisterInjector(this._injector);
			this._injector.destroyInstance(this);
			this._injector.teardown();
			this._logger = null;
		} else throw new js__$Boot_HaxeError(new hex_error_IllegalStateException(Std.string(this) + ".release can't be called more than once. Check your code.",{ fileName : "Module.hx", lineNumber : 199, className : "hex.module.Module", methodName : "release"}));
	}
	,getBasicInjector: function() {
		return this._injector;
	}
	,getLogger: function() {
		return this._logger;
	}
	,_fireInitialisationEvent: function() {
		if(this.get_isInitialized()) this.dispatchPublicMessage(hex_module_ModuleMessage.INITIALIZED,[this]); else throw new js__$Boot_HaxeError(new hex_error_IllegalStateException(Std.string(this) + ".fireModuleInitialisationNote can't be called with previous initialize call.",{ fileName : "Module.hx", lineNumber : 225, className : "hex.module.Module", methodName : "_fireInitialisationEvent"}));
	}
	,_fireReleaseEvent: function() {
		if(this.get_isReleased()) this.dispatchPublicMessage(hex_module_ModuleMessage.RELEASED,[this]); else throw new js__$Boot_HaxeError(new hex_error_IllegalStateException(Std.string(this) + ".fireModuleReleaseNote can't be called with previous release call.",{ fileName : "Module.hx", lineNumber : 241, className : "hex.module.Module", methodName : "_fireReleaseEvent"}));
	}
	,_onInitialisation: function() {
	}
	,_onRelease: function() {
	}
	,_getDependencyInjector: function() {
		return this._injector;
	}
	,_getRuntimeDependencies: function() {
		throw new js__$Boot_HaxeError(new hex_error_VirtualMethodException(hex_log_Stringifier.stringify(this) + ".checkDependencies is not implemented",{ fileName : "Module.hx", lineNumber : 277, className : "hex.module.Module", methodName : "_getRuntimeDependencies"}));
	}
	,_checkRuntimeDependencies: function(dependencies) {
		hex_module_dependency_RuntimeDependencyChecker.check(this,this._injector,dependencies);
	}
	,_addStatelessConfigClasses: function(configurations) {
		var _g = 0;
		while(_g < configurations.length) {
			var configurationClass = configurations[_g];
			++_g;
			var config = this._injector.instantiateUnmapped(configurationClass);
			config.configure();
		}
	}
	,_addStatefulConfigs: function(configurations) {
		var _g = 0;
		while(_g < configurations.length) {
			var configuration = configurations[_g];
			++_g;
			configuration.configure(this._injector,this._internalDispatcher,this);
		}
	}
	,__class__: hex_module_Module
	,__properties__: {get_isReleased:"get_isReleased",get_isInitialized:"get_isInitialized"}
};
var hex_ioc_parser_xml_assembler_mock_MockModule = function() {
	hex_module_Module.call(this);
};
$hxClasses["hex.ioc.parser.xml.assembler.mock.MockModule"] = hex_ioc_parser_xml_assembler_mock_MockModule;
hex_ioc_parser_xml_assembler_mock_MockModule.__name__ = ["hex","ioc","parser","xml","assembler","mock","MockModule"];
hex_ioc_parser_xml_assembler_mock_MockModule.__super__ = hex_module_Module;
hex_ioc_parser_xml_assembler_mock_MockModule.prototype = $extend(hex_module_Module.prototype,{
	_getRuntimeDependencies: function() {
		return new hex_module_dependency_RuntimeDependencies();
	}
	,__class__: hex_ioc_parser_xml_assembler_mock_MockModule
});
var hex_ioc_parser_xml_assembler_mock_MockStateCommand = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.ioc.parser.xml.assembler.mock.MockStateCommand"] = hex_ioc_parser_xml_assembler_mock_MockStateCommand;
hex_ioc_parser_xml_assembler_mock_MockStateCommand.__name__ = ["hex","ioc","parser","xml","assembler","mock","MockStateCommand"];
hex_ioc_parser_xml_assembler_mock_MockStateCommand.__super__ = hex_control_command_BasicCommand;
hex_ioc_parser_xml_assembler_mock_MockStateCommand.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	context: null
	,execute: function(request) {
		hex_ioc_parser_xml_assembler_mock_MockStateCommand.callCount++;
		hex_ioc_parser_xml_assembler_mock_MockStateCommand.lastInjecteContext = this.context;
	}
	,__class__: hex_ioc_parser_xml_assembler_mock_MockStateCommand
});
var hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.ioc.parser.xml.assembler.mock.MockStateCommandWithModule"] = hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule;
hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.__name__ = ["hex","ioc","parser","xml","assembler","mock","MockStateCommandWithModule"];
hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.__super__ = hex_control_command_BasicCommand;
hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	module: null
	,execute: function(request) {
		hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.callCount++;
		hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.lastInjectedModule = this.module;
	}
	,__class__: hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule
});
var hex_ioc_parser_xml_assembler_mock_MockStateContextMessage = function() {
};
$hxClasses["hex.ioc.parser.xml.assembler.mock.MockStateContextMessage"] = hex_ioc_parser_xml_assembler_mock_MockStateContextMessage;
hex_ioc_parser_xml_assembler_mock_MockStateContextMessage.__name__ = ["hex","ioc","parser","xml","assembler","mock","MockStateContextMessage"];
hex_ioc_parser_xml_assembler_mock_MockStateContextMessage.prototype = {
	__class__: hex_ioc_parser_xml_assembler_mock_MockStateContextMessage
};
var hex_ioc_parser_xml_context_ApplicationContextBuildingTest = function() { };
$hxClasses["hex.ioc.parser.xml.context.ApplicationContextBuildingTest"] = hex_ioc_parser_xml_context_ApplicationContextBuildingTest;
hex_ioc_parser_xml_context_ApplicationContextBuildingTest.__name__ = ["hex","ioc","parser","xml","context","ApplicationContextBuildingTest"];
hex_ioc_parser_xml_context_ApplicationContextBuildingTest.prototype = {
	_contextParser: null
	,_applicationAssembler: null
	,setUp: function() {
		this._applicationAssembler = new hex_ioc_assembler_ApplicationAssembler();
	}
	,tearDown: function() {
		hex_domain_ApplicationDomainDispatcher.getInstance().clear();
		this._applicationAssembler.release();
	}
	,_build: function(xml) {
		this._contextParser = new hex_ioc_parser_xml_ApplicationXMLParser();
		this._contextParser.parse(this._applicationAssembler,xml);
		this._applicationAssembler.buildEverything();
	}
	,testApplicationContextBuilding: function() {
		var source = "\n\t\t<root name=\"applicationContext\" type=\"hex.ioc.parser.xml.context.mock.MockApplicationContext\">\n\n\t\t\t<test id=\"test\" value=\"Hola Mundo\"/>\n\n\t\t</root>";
		var xml = Xml.parse(source);
		this._build(xml);
		var builderFactory = this._applicationAssembler.getBuilderFactory(this._applicationAssembler.getApplicationContext("applicationContext"));
		var applicationContext = builderFactory.getCoreFactory().locate("applicationContext");
		hex_unittest_assertion_Assert.isNotNull(applicationContext,"applicationContext shouldn't be null",{ fileName : "ApplicationContextBuildingTest.hx", lineNumber : 57, className : "hex.ioc.parser.xml.context.ApplicationContextBuildingTest", methodName : "testApplicationContextBuilding"});
		hex_unittest_assertion_Assert.isInstanceOf(applicationContext,hex_ioc_parser_xml_context_mock_MockApplicationContext,"applicationContext shouldn't be an instance of 'MockApplicationContext'",{ fileName : "ApplicationContextBuildingTest.hx", lineNumber : 58, className : "hex.ioc.parser.xml.context.ApplicationContextBuildingTest", methodName : "testApplicationContextBuilding"});
		hex_unittest_assertion_Assert.equals("Hola Mundo",builderFactory.getCoreFactory().locate("test"),"String values should be the same",{ fileName : "ApplicationContextBuildingTest.hx", lineNumber : 59, className : "hex.ioc.parser.xml.context.ApplicationContextBuildingTest", methodName : "testApplicationContextBuilding"});
	}
	,__class__: hex_ioc_parser_xml_context_ApplicationContextBuildingTest
};
var hex_ioc_parser_xml_context_mock_MockApplicationContext = function(dispatcher,coreFactory,applicationContextName) {
	hex_ioc_assembler_ApplicationContext.call(this,dispatcher,coreFactory,applicationContextName);
};
$hxClasses["hex.ioc.parser.xml.context.mock.MockApplicationContext"] = hex_ioc_parser_xml_context_mock_MockApplicationContext;
hex_ioc_parser_xml_context_mock_MockApplicationContext.__name__ = ["hex","ioc","parser","xml","context","mock","MockApplicationContext"];
hex_ioc_parser_xml_context_mock_MockApplicationContext.__super__ = hex_ioc_assembler_ApplicationContext;
hex_ioc_parser_xml_context_mock_MockApplicationContext.prototype = $extend(hex_ioc_assembler_ApplicationContext.prototype,{
	__class__: hex_ioc_parser_xml_context_mock_MockApplicationContext
});
var hex_service_stateless_IStatelessService = function() { };
$hxClasses["hex.service.stateless.IStatelessService"] = hex_service_stateless_IStatelessService;
hex_service_stateless_IStatelessService.__name__ = ["hex","service","stateless","IStatelessService"];
hex_service_stateless_IStatelessService.__interfaces__ = [hex_control_ICancellable,hex_service_IService];
hex_service_stateless_IStatelessService.prototype = {
	get_wasUsed: null
	,get_isRunning: null
	,get_hasCompleted: null
	,get_hasFailed: null
	,get_isCancelled: null
	,getResult: null
	,getRawResult: null
	,setParser: null
	,handleComplete: null
	,handleFail: null
	,handleCancel: null
	,release: null
	,removeAllListeners: null
	,wasUsed: null
	,isRunning: null
	,hasCompleted: null
	,hasFailed: null
	,isCancelled: null
	,__class__: hex_service_stateless_IStatelessService
	,__properties__: {get_isCancelled:"get_isCancelled",get_hasFailed:"get_hasFailed",get_hasCompleted:"get_hasCompleted",get_isRunning:"get_isRunning",get_wasUsed:"get_wasUsed"}
};
var hex_service_stateless_StatelessService = function() {
	this._status = "WAS_NEVER_USED";
	hex_service_AbstractService.call(this);
	this._ed = new hex_event_Dispatcher();
};
$hxClasses["hex.service.stateless.StatelessService"] = hex_service_stateless_StatelessService;
hex_service_stateless_StatelessService.__name__ = ["hex","service","stateless","StatelessService"];
hex_service_stateless_StatelessService.__interfaces__ = [hex_service_stateless_IStatelessService];
hex_service_stateless_StatelessService.__super__ = hex_service_AbstractService;
hex_service_stateless_StatelessService.prototype = $extend(hex_service_AbstractService.prototype,{
	_ed: null
	,_result: null
	,_rawResult: null
	,_parser: null
	,_status: null
	,setConfiguration: function(configuration) {
		if(this.get_wasUsed()) throw new js__$Boot_HaxeError(new hex_error_IllegalStateException("'setConfiguration' can't be called after service call @" + hex_log_Stringifier.stringify(this),{ fileName : "StatelessService.hx", lineNumber : 45, className : "hex.service.stateless.StatelessService", methodName : "setConfiguration"})); else this._configuration = configuration;
	}
	,addHandler: function(messageType,scope,callback) {
		this._ed.addHandler(messageType,scope,callback);
	}
	,removeHandler: function(messageType,scope,callback) {
		this._ed.removeHandler(messageType,scope,callback);
	}
	,release: function() {
		if(!this.get_wasUsed()) this.cancel(); else this._release();
	}
	,call: function() {
		this.get_wasUsed() && this._throwExecutionIllegalStateError("call");
		this._status = "IS_RUNNING";
	}
	,cancel: function() {
		this.handleCancel();
	}
	,wasUsed: null
	,get_wasUsed: function() {
		return this._status != "WAS_NEVER_USED";
	}
	,isRunning: null
	,get_isRunning: function() {
		return this._status == "IS_RUNNING";
	}
	,hasCompleted: null
	,get_hasCompleted: function() {
		return this._status == "IS_COMPLETED";
	}
	,hasFailed: null
	,get_hasFailed: function() {
		return this._status == "IS_FAILED";
	}
	,isCancelled: null
	,get_isCancelled: function() {
		return this._status == "IS_CANCELLED";
	}
	,_throwExecutionIllegalStateError: function(methodName) {
		var msg = "";
		if(this.get_isRunning()) msg = "'" + methodName + "' call failed. This service is running and can't be called twice "; else if(this.get_isCancelled()) msg = "'" + methodName + "' call failed. This service is cancelled and can't be called twice "; else if(this.get_hasCompleted()) msg = "'" + methodName + "' call failed. This service is completed and can't be called twice "; else if(this.get_hasFailed()) msg = "'" + methodName + "' call failed. This service has failed and can't be called twice ";
		this._release();
		return this._throwIllegalStateError(msg + "@" + hex_log_Stringifier.stringify(this));
	}
	,_throwIllegalStateError: function(msg) {
		throw new js__$Boot_HaxeError(new hex_error_IllegalStateException(msg,{ fileName : "StatelessService.hx", lineNumber : 148, className : "hex.service.stateless.StatelessService", methodName : "_throwIllegalStateError"}));
	}
	,_release: function() {
		this.removeAllListeners();
		this._result = null;
		this._parser = null;
	}
	,_onResultHandler: function(result) {
		if(this._status == "IS_RUNNING") {
			this._setResult(result);
			this.handleComplete();
		}
	}
	,_onErrorHandler: function(result) {
		this._rawResult = null;
		this._result = null;
		this.handleFail();
	}
	,_onException: function(e) {
		if(this._ed.hasHandler(hex_service_stateless_StatelessServiceMessage.FAIL)) this._onErrorHandler(null); else throw new js__$Boot_HaxeError(e);
	}
	,getResult: function() {
		return this._result;
	}
	,_setResult: function(response) {
		this._rawResult = response;
		if(this._parser != null) this._result = this._parser.parse(this._rawResult); else this._result = this._rawResult;
		return this._result;
	}
	,getRawResult: function() {
		return this._rawResult;
	}
	,setParser: function(parser) {
		this._parser = parser;
	}
	,handleComplete: function() {
		this.get_wasUsed() && this._status != "IS_RUNNING" && this._throwIllegalStateError("handleComplete failed");
		this._status = "IS_COMPLETED";
		this._ed.dispatch(hex_service_stateless_StatelessServiceMessage.COMPLETE,[this]);
		this._release();
	}
	,handleFail: function() {
		this.get_wasUsed() && this._status != "IS_RUNNING" && this._throwIllegalStateError("handleFail failed");
		this._status = "IS_FAILED";
		this._ed.dispatch(hex_service_stateless_StatelessServiceMessage.FAIL,[this]);
		this._release();
	}
	,handleCancel: function() {
		this.get_wasUsed() && this._status != "IS_RUNNING" && this._throwIllegalStateError("handleCancel failed");
		this._status = "IS_CANCELLED";
		this._ed.dispatch(hex_service_stateless_StatelessServiceMessage.CANCEL,[this]);
		this._release();
	}
	,removeAllListeners: function() {
		this._ed.removeAllListeners();
	}
	,_getRemoteArguments: function() {
		throw new js__$Boot_HaxeError(new hex_error_UnsupportedOperationException(Std.string(this) + ".getRemoteArguments is unsupported.",{ fileName : "StatelessService.hx", lineNumber : 245, className : "hex.service.stateless.StatelessService", methodName : "_getRemoteArguments"}));
	}
	,_reset: function() {
		this._status = "WAS_NEVER_USED";
	}
	,__class__: hex_service_stateless_StatelessService
	,__properties__: {get_isCancelled:"get_isCancelled",get_hasFailed:"get_hasFailed",get_hasCompleted:"get_hasCompleted",get_isRunning:"get_isRunning",get_wasUsed:"get_wasUsed"}
});
var hex_ioc_parser_xml_mock_IMockAmazonService = function() { };
$hxClasses["hex.ioc.parser.xml.mock.IMockAmazonService"] = hex_ioc_parser_xml_mock_IMockAmazonService;
hex_ioc_parser_xml_mock_IMockAmazonService.__name__ = ["hex","ioc","parser","xml","mock","IMockAmazonService"];
hex_ioc_parser_xml_mock_IMockAmazonService.__interfaces__ = [hex_service_stateless_IStatelessService];
hex_ioc_parser_xml_mock_IMockAmazonService.prototype = {
	getBooks: null
	,__class__: hex_ioc_parser_xml_mock_IMockAmazonService
};
var hex_ioc_parser_xml_mock_AnotherMockAmazonService = function() {
	hex_service_stateless_StatelessService.call(this);
};
$hxClasses["hex.ioc.parser.xml.mock.AnotherMockAmazonService"] = hex_ioc_parser_xml_mock_AnotherMockAmazonService;
hex_ioc_parser_xml_mock_AnotherMockAmazonService.__name__ = ["hex","ioc","parser","xml","mock","AnotherMockAmazonService"];
hex_ioc_parser_xml_mock_AnotherMockAmazonService.__interfaces__ = [hex_ioc_parser_xml_mock_IMockAmazonService];
hex_ioc_parser_xml_mock_AnotherMockAmazonService.__super__ = hex_service_stateless_StatelessService;
hex_ioc_parser_xml_mock_AnotherMockAmazonService.prototype = $extend(hex_service_stateless_StatelessService.prototype,{
	createConfiguration: function() {
	}
	,getBooks: function() {
		return [];
	}
	,__class__: hex_ioc_parser_xml_mock_AnotherMockAmazonService
});
var hex_ioc_parser_xml_mock_AnotherMockModuleWithServiceCallback = function() {
	hex_module_Module.call(this);
};
$hxClasses["hex.ioc.parser.xml.mock.AnotherMockModuleWithServiceCallback"] = hex_ioc_parser_xml_mock_AnotherMockModuleWithServiceCallback;
hex_ioc_parser_xml_mock_AnotherMockModuleWithServiceCallback.__name__ = ["hex","ioc","parser","xml","mock","AnotherMockModuleWithServiceCallback"];
hex_ioc_parser_xml_mock_AnotherMockModuleWithServiceCallback.__super__ = hex_module_Module;
hex_ioc_parser_xml_mock_AnotherMockModuleWithServiceCallback.prototype = $extend(hex_module_Module.prototype,{
	_floatValue: null
	,onFloatServiceCallback: function(value) {
		this._floatValue = value;
	}
	,getFloatValue: function() {
		return this._floatValue;
	}
	,_getRuntimeDependencies: function() {
		return new hex_module_dependency_RuntimeDependencies();
	}
	,__class__: hex_ioc_parser_xml_mock_AnotherMockModuleWithServiceCallback
});
var hex_ioc_parser_xml_mock_ClassWithConstantConstantArgument = function(constant) {
	this.constant = constant;
};
$hxClasses["hex.ioc.parser.xml.mock.ClassWithConstantConstantArgument"] = hex_ioc_parser_xml_mock_ClassWithConstantConstantArgument;
hex_ioc_parser_xml_mock_ClassWithConstantConstantArgument.__name__ = ["hex","ioc","parser","xml","mock","ClassWithConstantConstantArgument"];
hex_ioc_parser_xml_mock_ClassWithConstantConstantArgument.prototype = {
	constant: null
	,__class__: hex_ioc_parser_xml_mock_ClassWithConstantConstantArgument
};
var hex_ioc_parser_xml_mock_IMockDividerHelper = function() { };
$hxClasses["hex.ioc.parser.xml.mock.IMockDividerHelper"] = hex_ioc_parser_xml_mock_IMockDividerHelper;
hex_ioc_parser_xml_mock_IMockDividerHelper.__name__ = ["hex","ioc","parser","xml","mock","IMockDividerHelper"];
hex_ioc_parser_xml_mock_IMockDividerHelper.prototype = {
	divide: null
	,__class__: hex_ioc_parser_xml_mock_IMockDividerHelper
};
var hex_ioc_parser_xml_mock_IMockFacebookService = function() { };
$hxClasses["hex.ioc.parser.xml.mock.IMockFacebookService"] = hex_ioc_parser_xml_mock_IMockFacebookService;
hex_ioc_parser_xml_mock_IMockFacebookService.__name__ = ["hex","ioc","parser","xml","mock","IMockFacebookService"];
hex_ioc_parser_xml_mock_IMockFacebookService.__interfaces__ = [hex_service_stateful_IStatefulService];
hex_ioc_parser_xml_mock_IMockFacebookService.prototype = {
	getFriends: null
	,__class__: hex_ioc_parser_xml_mock_IMockFacebookService
};
var hex_ioc_parser_xml_mock_IMockMappedModule = function() { };
$hxClasses["hex.ioc.parser.xml.mock.IMockMappedModule"] = hex_ioc_parser_xml_mock_IMockMappedModule;
hex_ioc_parser_xml_mock_IMockMappedModule.__name__ = ["hex","ioc","parser","xml","mock","IMockMappedModule"];
hex_ioc_parser_xml_mock_IMockMappedModule.prototype = {
	doSomething: null
	,__class__: hex_ioc_parser_xml_mock_IMockMappedModule
};
var hex_ioc_parser_xml_mock_IMockMessageParserModule = function() { };
$hxClasses["hex.ioc.parser.xml.mock.IMockMessageParserModule"] = hex_ioc_parser_xml_mock_IMockMessageParserModule;
hex_ioc_parser_xml_mock_IMockMessageParserModule.__name__ = ["hex","ioc","parser","xml","mock","IMockMessageParserModule"];
hex_ioc_parser_xml_mock_IMockMessageParserModule.__interfaces__ = [hex_module_IModule];
hex_ioc_parser_xml_mock_IMockMessageParserModule.prototype = {
	parse: null
	,__class__: hex_ioc_parser_xml_mock_IMockMessageParserModule
};
var hex_ioc_parser_xml_mock_IMockStubStatefulService = function() { };
$hxClasses["hex.ioc.parser.xml.mock.IMockStubStatefulService"] = hex_ioc_parser_xml_mock_IMockStubStatefulService;
hex_ioc_parser_xml_mock_IMockStubStatefulService.__name__ = ["hex","ioc","parser","xml","mock","IMockStubStatefulService"];
hex_ioc_parser_xml_mock_IMockStubStatefulService.__interfaces__ = [hex_service_stateful_IStatefulService];
hex_ioc_parser_xml_mock_IMockStubStatefulService.prototype = {
	setIntVO: null
	,setBooleanVO: null
	,__class__: hex_ioc_parser_xml_mock_IMockStubStatefulService
};
var hex_ioc_parser_xml_mock_MockAmazonService = function() {
	hex_service_stateless_StatelessService.call(this);
};
$hxClasses["hex.ioc.parser.xml.mock.MockAmazonService"] = hex_ioc_parser_xml_mock_MockAmazonService;
hex_ioc_parser_xml_mock_MockAmazonService.__name__ = ["hex","ioc","parser","xml","mock","MockAmazonService"];
hex_ioc_parser_xml_mock_MockAmazonService.__interfaces__ = [hex_ioc_parser_xml_mock_IMockAmazonService];
hex_ioc_parser_xml_mock_MockAmazonService.__super__ = hex_service_stateless_StatelessService;
hex_ioc_parser_xml_mock_MockAmazonService.prototype = $extend(hex_service_stateless_StatelessService.prototype,{
	createConfiguration: function() {
	}
	,getBooks: function() {
		return [];
	}
	,__class__: hex_ioc_parser_xml_mock_MockAmazonService
});
var hex_ioc_parser_xml_mock_MockBooleanVO = function(value) {
	this.value = value;
};
$hxClasses["hex.ioc.parser.xml.mock.MockBooleanVO"] = hex_ioc_parser_xml_mock_MockBooleanVO;
hex_ioc_parser_xml_mock_MockBooleanVO.__name__ = ["hex","ioc","parser","xml","mock","MockBooleanVO"];
hex_ioc_parser_xml_mock_MockBooleanVO.prototype = {
	value: null
	,__class__: hex_ioc_parser_xml_mock_MockBooleanVO
};
var hex_ioc_parser_xml_mock_MockChatAdapterStrategy = function() {
	hex_event_AdapterStrategy.call(this,this,$bind(this,this.onAdapt));
};
$hxClasses["hex.ioc.parser.xml.mock.MockChatAdapterStrategy"] = hex_ioc_parser_xml_mock_MockChatAdapterStrategy;
hex_ioc_parser_xml_mock_MockChatAdapterStrategy.__name__ = ["hex","ioc","parser","xml","mock","MockChatAdapterStrategy"];
hex_ioc_parser_xml_mock_MockChatAdapterStrategy.__super__ = hex_event_AdapterStrategy;
hex_ioc_parser_xml_mock_MockChatAdapterStrategy.prototype = $extend(hex_event_AdapterStrategy.prototype,{
	onAdapt: function(args) {
		return [args[0],new Date()];
	}
	,__class__: hex_ioc_parser_xml_mock_MockChatAdapterStrategy
});
var hex_ioc_parser_xml_mock_MockChatAdapterStrategyMacro = function() {
	this.url = "http://google.com";
	hex_event_MacroAdapterStrategy.call(this,this,$bind(this,this.onAdapt));
};
$hxClasses["hex.ioc.parser.xml.mock.MockChatAdapterStrategyMacro"] = hex_ioc_parser_xml_mock_MockChatAdapterStrategyMacro;
hex_ioc_parser_xml_mock_MockChatAdapterStrategyMacro.__name__ = ["hex","ioc","parser","xml","mock","MockChatAdapterStrategyMacro"];
hex_ioc_parser_xml_mock_MockChatAdapterStrategyMacro.__super__ = hex_event_MacroAdapterStrategy;
hex_ioc_parser_xml_mock_MockChatAdapterStrategyMacro.prototype = $extend(hex_event_MacroAdapterStrategy.prototype,{
	_message: null
	,url: null
	,module: null
	,onAdapt: function(message) {
		this._message = message;
	}
	,_prepare: function() {
		this.add(hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyCommand).withPayloads([new hex_control_payload_ExecutionPayload(this._message + ":" + this.url,String)]).withCompleteHandlers(new hex_control_async_AsyncHandler(this,$bind(this,this._end)));
	}
	,_end: function(async) {
		this.module.onMessage(async.getResult()[0]);
	}
	,__class__: hex_ioc_parser_xml_mock_MockChatAdapterStrategyMacro
});
var hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyCommand = function() {
	hex_control_async_AsyncCommand.call(this);
};
$hxClasses["hex.ioc.parser.xml.mock.MockChatEventAdapterStrategyCommand"] = hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyCommand;
hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyCommand.__name__ = ["hex","ioc","parser","xml","mock","MockChatEventAdapterStrategyCommand"];
hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyCommand.__super__ = hex_control_async_AsyncCommand;
hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyCommand.prototype = $extend(hex_control_async_AsyncCommand.prototype,{
	parser: null
	,message: null
	,execute: function(request) {
		haxe_Timer.delay($bind(this,this.testAsyncCallback),300);
	}
	,getResult: function() {
		var message = this.parser.parse(this.message);
		return [message];
	}
	,testAsyncCallback: function() {
		this._handleComplete();
	}
	,__class__: hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyCommand
});
var hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyMacro = function() {
	this.url = "http://google.com";
	hex_event_MacroAdapterStrategy.call(this,this,$bind(this,this.onAdapt));
};
$hxClasses["hex.ioc.parser.xml.mock.MockChatEventAdapterStrategyMacro"] = hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyMacro;
hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyMacro.__name__ = ["hex","ioc","parser","xml","mock","MockChatEventAdapterStrategyMacro"];
hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyMacro.__super__ = hex_event_MacroAdapterStrategy;
hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyMacro.prototype = $extend(hex_event_MacroAdapterStrategy.prototype,{
	_message: null
	,url: null
	,onAdapt: function(message) {
		this._message = message;
	}
	,_prepare: function() {
		this.add(hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyCommand).withPayloads([new hex_control_payload_ExecutionPayload(this._message + ":" + this.url,String)]).withCompleteHandlers(new hex_control_async_AsyncHandler(this,$bind(this,this._end)));
	}
	,_end: function(async) {
		var cmd = async;
		this._result = cmd.getResult();
	}
	,__class__: hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyMacro
});
var hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyWithInjection = function() {
	hex_event_AdapterStrategy.call(this,this,$bind(this,this.onAdapt));
};
$hxClasses["hex.ioc.parser.xml.mock.MockChatEventAdapterStrategyWithInjection"] = hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyWithInjection;
hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyWithInjection.__name__ = ["hex","ioc","parser","xml","mock","MockChatEventAdapterStrategyWithInjection"];
hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyWithInjection.__super__ = hex_event_AdapterStrategy;
hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyWithInjection.prototype = $extend(hex_event_AdapterStrategy.prototype,{
	parser: null
	,onAdapt: function(args) {
		return [this.parser.parse(args[0])];
	}
	,__class__: hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyWithInjection
});
var hex_ioc_parser_xml_mock_MockModule = function() {
	this._domainDispatcher = hex_domain_ApplicationDomainDispatcher.getInstance().getDomainDispatcher(this.getDomain());
};
$hxClasses["hex.ioc.parser.xml.mock.MockModule"] = hex_ioc_parser_xml_mock_MockModule;
hex_ioc_parser_xml_mock_MockModule.__name__ = ["hex","ioc","parser","xml","mock","MockModule"];
hex_ioc_parser_xml_mock_MockModule.__interfaces__ = [hex_module_IModule];
hex_ioc_parser_xml_mock_MockModule.prototype = {
	_domainDispatcher: null
	,dispatchDomainEvent: function(messageType,data) {
		this._domainDispatcher.dispatch(messageType,data);
	}
	,getDomain: function() {
		return hex_domain_DomainExpert.getInstance().getDomainFor(this);
	}
	,initialize: function() {
	}
	,isInitialized: null
	,get_isInitialized: function() {
		return this.isInitialized;
	}
	,release: function() {
	}
	,isReleased: null
	,get_isReleased: function() {
		return this.isReleased;
	}
	,dispatchPublicMessage: function(messageType,data) {
	}
	,addHandler: function(messageType,scope,callback) {
	}
	,removeHandler: function(messageType,scope,callback) {
	}
	,getBasicInjector: function() {
		return null;
	}
	,getLogger: function() {
		return null;
	}
	,__class__: hex_ioc_parser_xml_mock_MockModule
	,__properties__: {get_isReleased:"get_isReleased",get_isInitialized:"get_isInitialized"}
};
var hex_ioc_parser_xml_mock_MockChatModule = function() {
	hex_ioc_parser_xml_mock_MockModule.call(this);
};
$hxClasses["hex.ioc.parser.xml.mock.MockChatModule"] = hex_ioc_parser_xml_mock_MockChatModule;
hex_ioc_parser_xml_mock_MockChatModule.__name__ = ["hex","ioc","parser","xml","mock","MockChatModule"];
hex_ioc_parser_xml_mock_MockChatModule.__super__ = hex_ioc_parser_xml_mock_MockModule;
hex_ioc_parser_xml_mock_MockChatModule.prototype = $extend(hex_ioc_parser_xml_mock_MockModule.prototype,{
	translatedMessage: null
	,date: null
	,onTranslation: function(translatedMessage,date) {
		this.translatedMessage = translatedMessage;
		this.date = date;
	}
	,__class__: hex_ioc_parser_xml_mock_MockChatModule
});
var hex_ioc_parser_xml_mock_MockClassWithInjectedProperty = function() {
};
$hxClasses["hex.ioc.parser.xml.mock.MockClassWithInjectedProperty"] = hex_ioc_parser_xml_mock_MockClassWithInjectedProperty;
hex_ioc_parser_xml_mock_MockClassWithInjectedProperty.__name__ = ["hex","ioc","parser","xml","mock","MockClassWithInjectedProperty"];
hex_ioc_parser_xml_mock_MockClassWithInjectedProperty.prototype = {
	property: null
	,__class__: hex_ioc_parser_xml_mock_MockClassWithInjectedProperty
};
var hex_ioc_parser_xml_mock_MockDividerHelper = function() {
};
$hxClasses["hex.ioc.parser.xml.mock.MockDividerHelper"] = hex_ioc_parser_xml_mock_MockDividerHelper;
hex_ioc_parser_xml_mock_MockDividerHelper.__name__ = ["hex","ioc","parser","xml","mock","MockDividerHelper"];
hex_ioc_parser_xml_mock_MockDividerHelper.__interfaces__ = [hex_ioc_parser_xml_mock_IMockDividerHelper];
hex_ioc_parser_xml_mock_MockDividerHelper.prototype = {
	divide: function(target,divider) {
		return target / divider;
	}
	,__class__: hex_ioc_parser_xml_mock_MockDividerHelper
};
var hex_ioc_parser_xml_mock_MockFacebookService = function() {
	hex_service_stateful_StatefulService.call(this);
};
$hxClasses["hex.ioc.parser.xml.mock.MockFacebookService"] = hex_ioc_parser_xml_mock_MockFacebookService;
hex_ioc_parser_xml_mock_MockFacebookService.__name__ = ["hex","ioc","parser","xml","mock","MockFacebookService"];
hex_ioc_parser_xml_mock_MockFacebookService.__interfaces__ = [hex_ioc_parser_xml_mock_IMockFacebookService];
hex_ioc_parser_xml_mock_MockFacebookService.__super__ = hex_service_stateful_StatefulService;
hex_ioc_parser_xml_mock_MockFacebookService.prototype = $extend(hex_service_stateful_StatefulService.prototype,{
	createConfiguration: function() {
	}
	,getFriends: function() {
		return [];
	}
	,__class__: hex_ioc_parser_xml_mock_MockFacebookService
});
var hex_ioc_parser_xml_mock_MockFruitVO = function(name) {
	this._name = name;
};
$hxClasses["hex.ioc.parser.xml.mock.MockFruitVO"] = hex_ioc_parser_xml_mock_MockFruitVO;
hex_ioc_parser_xml_mock_MockFruitVO.__name__ = ["hex","ioc","parser","xml","mock","MockFruitVO"];
hex_ioc_parser_xml_mock_MockFruitVO.prototype = {
	_name: null
	,toString: function() {
		return this._name;
	}
	,__class__: hex_ioc_parser_xml_mock_MockFruitVO
};
var hex_ioc_parser_xml_mock_MockIntDividerEventAdapterStrategy = function() {
	hex_event_AdapterStrategy.call(this,this,$bind(this,this.onAdapt));
};
$hxClasses["hex.ioc.parser.xml.mock.MockIntDividerEventAdapterStrategy"] = hex_ioc_parser_xml_mock_MockIntDividerEventAdapterStrategy;
hex_ioc_parser_xml_mock_MockIntDividerEventAdapterStrategy.__name__ = ["hex","ioc","parser","xml","mock","MockIntDividerEventAdapterStrategy"];
hex_ioc_parser_xml_mock_MockIntDividerEventAdapterStrategy.__super__ = hex_event_AdapterStrategy;
hex_ioc_parser_xml_mock_MockIntDividerEventAdapterStrategy.prototype = $extend(hex_event_AdapterStrategy.prototype,{
	helper: null
	,onAdapt: function(args) {
		var mockIntVO = args[0];
		var result = this.helper.divide(mockIntVO.value,2);
		return [result];
	}
	,__class__: hex_ioc_parser_xml_mock_MockIntDividerEventAdapterStrategy
});
var hex_ioc_parser_xml_mock_MockIntVO = function(value) {
	this.value = value;
};
$hxClasses["hex.ioc.parser.xml.mock.MockIntVO"] = hex_ioc_parser_xml_mock_MockIntVO;
hex_ioc_parser_xml_mock_MockIntVO.__name__ = ["hex","ioc","parser","xml","mock","MockIntVO"];
hex_ioc_parser_xml_mock_MockIntVO.prototype = {
	value: null
	,__class__: hex_ioc_parser_xml_mock_MockIntVO
};
var hex_ioc_parser_xml_mock_MockMappedModule = function() {
	hex_module_Module.call(this);
};
$hxClasses["hex.ioc.parser.xml.mock.MockMappedModule"] = hex_ioc_parser_xml_mock_MockMappedModule;
hex_ioc_parser_xml_mock_MockMappedModule.__name__ = ["hex","ioc","parser","xml","mock","MockMappedModule"];
hex_ioc_parser_xml_mock_MockMappedModule.__interfaces__ = [hex_ioc_parser_xml_mock_IMockMappedModule];
hex_ioc_parser_xml_mock_MockMappedModule.__super__ = hex_module_Module;
hex_ioc_parser_xml_mock_MockMappedModule.prototype = $extend(hex_module_Module.prototype,{
	doSomething: function() {
	}
	,_getRuntimeDependencies: function() {
		return new hex_module_dependency_RuntimeDependencies();
	}
	,__class__: hex_ioc_parser_xml_mock_MockMappedModule
});
var hex_ioc_parser_xml_mock_MockMessageParserModule = function() {
	hex_ioc_parser_xml_mock_MockModule.call(this);
};
$hxClasses["hex.ioc.parser.xml.mock.MockMessageParserModule"] = hex_ioc_parser_xml_mock_MockMessageParserModule;
hex_ioc_parser_xml_mock_MockMessageParserModule.__name__ = ["hex","ioc","parser","xml","mock","MockMessageParserModule"];
hex_ioc_parser_xml_mock_MockMessageParserModule.__interfaces__ = [hex_ioc_parser_xml_mock_IMockMessageParserModule];
hex_ioc_parser_xml_mock_MockMessageParserModule.__super__ = hex_ioc_parser_xml_mock_MockModule;
hex_ioc_parser_xml_mock_MockMessageParserModule.prototype = $extend(hex_ioc_parser_xml_mock_MockModule.prototype,{
	parse: function(message) {
		return message.toUpperCase();
	}
	,__class__: hex_ioc_parser_xml_mock_MockMessageParserModule
});
var hex_ioc_parser_xml_mock_MockModuleWithServiceCallback = function() {
	hex_module_Module.call(this);
	this._getDependencyInjector().mapToType(hex_ioc_parser_xml_mock_IMockDividerHelper,hex_ioc_parser_xml_mock_MockDividerHelper,"mockDividerHelper");
};
$hxClasses["hex.ioc.parser.xml.mock.MockModuleWithServiceCallback"] = hex_ioc_parser_xml_mock_MockModuleWithServiceCallback;
hex_ioc_parser_xml_mock_MockModuleWithServiceCallback.__name__ = ["hex","ioc","parser","xml","mock","MockModuleWithServiceCallback"];
hex_ioc_parser_xml_mock_MockModuleWithServiceCallback.__super__ = hex_module_Module;
hex_ioc_parser_xml_mock_MockModuleWithServiceCallback.prototype = $extend(hex_module_Module.prototype,{
	_floatValue: null
	,_booleanValue: null
	,onFloatServiceCallback: function(value) {
		this._floatValue = value;
	}
	,onBooleanServiceCallback: function(mockBooleanVO) {
		this._booleanValue = mockBooleanVO.value;
	}
	,getFloatValue: function() {
		return this._floatValue;
	}
	,getBooleanValue: function() {
		return this._booleanValue;
	}
	,_getRuntimeDependencies: function() {
		return new hex_module_dependency_RuntimeDependencies();
	}
	,__class__: hex_ioc_parser_xml_mock_MockModuleWithServiceCallback
});
var hex_ioc_parser_xml_mock_MockObjectWithRegtangleProperty = function() {
	this.rectangle = new hex_ioc_parser_xml_mock_MockRectangle();
};
$hxClasses["hex.ioc.parser.xml.mock.MockObjectWithRegtangleProperty"] = hex_ioc_parser_xml_mock_MockObjectWithRegtangleProperty;
hex_ioc_parser_xml_mock_MockObjectWithRegtangleProperty.__name__ = ["hex","ioc","parser","xml","mock","MockObjectWithRegtangleProperty"];
hex_ioc_parser_xml_mock_MockObjectWithRegtangleProperty.prototype = {
	rectangle: null
	,__class__: hex_ioc_parser_xml_mock_MockObjectWithRegtangleProperty
};
var hex_ioc_parser_xml_mock_MockPointFactory = function() {
};
$hxClasses["hex.ioc.parser.xml.mock.MockPointFactory"] = hex_ioc_parser_xml_mock_MockPointFactory;
hex_ioc_parser_xml_mock_MockPointFactory.__name__ = ["hex","ioc","parser","xml","mock","MockPointFactory"];
hex_ioc_parser_xml_mock_MockPointFactory.getInstance = function() {
	if(hex_ioc_parser_xml_mock_MockPointFactory._Instance == null) hex_ioc_parser_xml_mock_MockPointFactory._Instance = new hex_ioc_parser_xml_mock_MockPointFactory();
	return hex_ioc_parser_xml_mock_MockPointFactory._Instance;
};
hex_ioc_parser_xml_mock_MockPointFactory.prototype = {
	getPoint: function(x,y) {
		return new hex_structures_Point(x,y);
	}
	,__class__: hex_ioc_parser_xml_mock_MockPointFactory
};
var hex_ioc_parser_xml_mock_MockReceiverModule = function() {
	hex_ioc_parser_xml_mock_MockModule.call(this);
};
$hxClasses["hex.ioc.parser.xml.mock.MockReceiverModule"] = hex_ioc_parser_xml_mock_MockReceiverModule;
hex_ioc_parser_xml_mock_MockReceiverModule.__name__ = ["hex","ioc","parser","xml","mock","MockReceiverModule"];
hex_ioc_parser_xml_mock_MockReceiverModule.__super__ = hex_ioc_parser_xml_mock_MockModule;
hex_ioc_parser_xml_mock_MockReceiverModule.prototype = $extend(hex_ioc_parser_xml_mock_MockModule.prototype,{
	message: null
	,onMessage: function(text) {
		this.message = text;
	}
	,onMessageEvent: function(message) {
		this.message = message;
	}
	,__class__: hex_ioc_parser_xml_mock_MockReceiverModule
});
var hex_ioc_parser_xml_mock_MockRectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["hex.ioc.parser.xml.mock.MockRectangle"] = hex_ioc_parser_xml_mock_MockRectangle;
hex_ioc_parser_xml_mock_MockRectangle.__name__ = ["hex","ioc","parser","xml","mock","MockRectangle"];
hex_ioc_parser_xml_mock_MockRectangle.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,get_size: function() {
		return new hex_structures_Point(this.width,this.height);
	}
	,set_size: function(size) {
		this.width = size.x;
		this.height = size.y;
		return size;
	}
	,reset: function() {
		this.x = 0;
		this.y = 0;
		this.width = 0;
		this.height = 0;
	}
	,offsetPoint: function(p) {
		this.x += p.x;
		this.y += p.y;
	}
	,__class__: hex_ioc_parser_xml_mock_MockRectangle
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var hex_ioc_parser_xml_mock_MockRectangleFactory = function() {
};
$hxClasses["hex.ioc.parser.xml.mock.MockRectangleFactory"] = hex_ioc_parser_xml_mock_MockRectangleFactory;
hex_ioc_parser_xml_mock_MockRectangleFactory.__name__ = ["hex","ioc","parser","xml","mock","MockRectangleFactory"];
hex_ioc_parser_xml_mock_MockRectangleFactory.getRectangle = function(x,y,width,height) {
	return new hex_ioc_parser_xml_mock_MockRectangle(x,y,width,height);
};
hex_ioc_parser_xml_mock_MockRectangleFactory.prototype = {
	__class__: hex_ioc_parser_xml_mock_MockRectangleFactory
};
var hex_ioc_parser_xml_mock_MockSenderModule = function() {
	hex_ioc_parser_xml_mock_MockModule.call(this);
};
$hxClasses["hex.ioc.parser.xml.mock.MockSenderModule"] = hex_ioc_parser_xml_mock_MockSenderModule;
hex_ioc_parser_xml_mock_MockSenderModule.__name__ = ["hex","ioc","parser","xml","mock","MockSenderModule"];
hex_ioc_parser_xml_mock_MockSenderModule.__super__ = hex_ioc_parser_xml_mock_MockModule;
hex_ioc_parser_xml_mock_MockSenderModule.prototype = $extend(hex_ioc_parser_xml_mock_MockModule.prototype,{
	initialize: function() {
		this.dispatchDomainEvent(hex_ioc_parser_xml_mock_MockChatModule.TEXT_INPUT,["hello receiver"]);
	}
	,__class__: hex_ioc_parser_xml_mock_MockSenderModule
});
var hex_ioc_parser_xml_mock_MockServiceProvider = function() {
};
$hxClasses["hex.ioc.parser.xml.mock.MockServiceProvider"] = hex_ioc_parser_xml_mock_MockServiceProvider;
hex_ioc_parser_xml_mock_MockServiceProvider.__name__ = ["hex","ioc","parser","xml","mock","MockServiceProvider"];
hex_ioc_parser_xml_mock_MockServiceProvider.getInstance = function() {
	if(hex_ioc_parser_xml_mock_MockServiceProvider._Instance == null) hex_ioc_parser_xml_mock_MockServiceProvider._Instance = new hex_ioc_parser_xml_mock_MockServiceProvider();
	return hex_ioc_parser_xml_mock_MockServiceProvider._Instance;
};
hex_ioc_parser_xml_mock_MockServiceProvider.prototype = {
	_gateway: null
	,setGateway: function(gateway) {
		this._gateway = gateway;
	}
	,getGateway: function() {
		return this._gateway;
	}
	,__class__: hex_ioc_parser_xml_mock_MockServiceProvider
};
var hex_ioc_parser_xml_mock_MockStubStatefulService = function() {
	hex_service_stateful_StatefulService.call(this);
};
$hxClasses["hex.ioc.parser.xml.mock.MockStubStatefulService"] = hex_ioc_parser_xml_mock_MockStubStatefulService;
hex_ioc_parser_xml_mock_MockStubStatefulService.__name__ = ["hex","ioc","parser","xml","mock","MockStubStatefulService"];
hex_ioc_parser_xml_mock_MockStubStatefulService.__interfaces__ = [hex_ioc_parser_xml_mock_IMockStubStatefulService];
hex_ioc_parser_xml_mock_MockStubStatefulService.__super__ = hex_service_stateful_StatefulService;
hex_ioc_parser_xml_mock_MockStubStatefulService.prototype = $extend(hex_service_stateful_StatefulService.prototype,{
	_intVO: null
	,_booleanVO: null
	,createConfiguration: function() {
	}
	,setIntVO: function(vo) {
		this._intVO = vo;
		this.getDispatcher().dispatch(hex_ioc_parser_xml_mock_MockStubStatefulService.INT_VO_UPDATE,[vo]);
	}
	,setBooleanVO: function(vo) {
		this._booleanVO = vo;
		this.getDispatcher().dispatch(hex_ioc_parser_xml_mock_MockStubStatefulService.BOOLEAN_VO_UPDATE,[vo]);
	}
	,__class__: hex_ioc_parser_xml_mock_MockStubStatefulService
});
var hex_ioc_parser_xml_mock_MockTranslationModule = function() {
	this._map = new hex_collection_HashMap();
	hex_ioc_parser_xml_mock_MockModule.call(this);
	this._map.put("Bonjour","Hello");
};
$hxClasses["hex.ioc.parser.xml.mock.MockTranslationModule"] = hex_ioc_parser_xml_mock_MockTranslationModule;
hex_ioc_parser_xml_mock_MockTranslationModule.__name__ = ["hex","ioc","parser","xml","mock","MockTranslationModule"];
hex_ioc_parser_xml_mock_MockTranslationModule.__super__ = hex_ioc_parser_xml_mock_MockModule;
hex_ioc_parser_xml_mock_MockTranslationModule.prototype = $extend(hex_ioc_parser_xml_mock_MockModule.prototype,{
	_map: null
	,onSomethingToTranslate: function(textToTranslate) {
		var translation = this._map.get(textToTranslate);
		this.dispatchDomainEvent(hex_ioc_parser_xml_mock_MockTranslationModule.TRANSLATION,[translation]);
	}
	,onTranslateWithTime: function(textToTranslate,date) {
		this.dispatchDomainEvent(hex_ioc_parser_xml_mock_MockTranslationModule.TRANSLATION,[this._map.get(textToTranslate),date]);
	}
	,__class__: hex_ioc_parser_xml_mock_MockTranslationModule
});
var hex_ioc_parser_xml_mock_MockXMLParser = function() {
};
$hxClasses["hex.ioc.parser.xml.mock.MockXMLParser"] = hex_ioc_parser_xml_mock_MockXMLParser;
hex_ioc_parser_xml_mock_MockXMLParser.__name__ = ["hex","ioc","parser","xml","mock","MockXMLParser"];
hex_ioc_parser_xml_mock_MockXMLParser.__interfaces__ = [hex_data_IParser];
hex_ioc_parser_xml_mock_MockXMLParser.prototype = {
	parse: function(serializedContent,target) {
		var collection = [];
		var xml = serializedContent;
		var iterator = xml.firstElement().elements();
		while(iterator.hasNext()) {
			var item = iterator.next();
			collection.push(new hex_ioc_parser_xml_mock_MockFruitVO(((function($this) {
				var $r;
				if(item.nodeType != Xml.Document && item.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + item.nodeType);
				$r = item.children[0];
				return $r;
			}(this))).get_nodeValue()));
		}
		return collection;
	}
	,__class__: hex_ioc_parser_xml_mock_MockXMLParser
};
var hex_ioc_parser_xml_state_StatefulStateMachineConfigTest = function() { };
$hxClasses["hex.ioc.parser.xml.state.StatefulStateMachineConfigTest"] = hex_ioc_parser_xml_state_StatefulStateMachineConfigTest;
hex_ioc_parser_xml_state_StatefulStateMachineConfigTest.__name__ = ["hex","ioc","parser","xml","state","StatefulStateMachineConfigTest"];
hex_ioc_parser_xml_state_StatefulStateMachineConfigTest.prototype = {
	_contextParser: null
	,_builderFactory: null
	,_applicationAssembler: null
	,setUp: function() {
		this._applicationAssembler = new hex_ioc_assembler_ApplicationAssembler();
		this._builderFactory = this._applicationAssembler.getBuilderFactory(this._applicationAssembler.getApplicationContext("applicationContext"));
	}
	,tearDown: function() {
		hex_domain_ApplicationDomainDispatcher.getInstance().clear();
		this._applicationAssembler.release();
	}
	,_build: function(xml) {
		this._contextParser = new hex_ioc_parser_xml_ApplicationXMLParser();
		this._contextParser.parse(this._applicationAssembler,xml);
		this._applicationAssembler.buildEverything();
	}
	,testStateMachineConfiguration: function() {
		var source = "\n\t\t<root name=\"applicationContext\">\n\n\t\t\t<initialState id=\"initialState\" static-ref=\"hex.ioc.parser.xml.state.mock.MockStateEnum.INITIAL_STATE\">\n\t\t\t\t<method-call name=\"addTransition\">\n\t\t\t\t\t<argument static-ref=\"hex.ioc.parser.xml.state.mock.MockStateMessage.TRIGGER_NEXT_STATE\"/>\n\t\t\t\t\t<argument static-ref=\"hex.ioc.parser.xml.state.mock.MockStateEnum.NEXT_STATE\"/>\n\t\t\t\t</method-call>\n\n\t\t\t\t<method-call name=\"addExitCommand\">\n\t\t\t\t\t<argument type=\"Class\" value=\"hex.ioc.parser.xml.state.mock.MockExitStateCommand\"/>\n\t\t\t\t\t<argument ref=\"myModule\"/>\n\t\t\t\t</method-call>\n\n\t\t\t</initialState>\n\n\t\t\t<stateConfig id=\"stateConfig\" type=\"hex.state.config.stateful.StatefulStateMachineConfig\">\n\t\t\t\t<argument ref=\"initialState\"/>\n\t\t\t</stateConfig>\n\n\t\t\t<module id=\"myModule\" type=\"hex.ioc.parser.xml.state.mock.MockModuleWorkingWithStates\">\n\t\t\t\t<argument ref=\"stateConfig\"/>\n\t\t\t</module>\n\n\t\t</root>";
		var xml = Xml.parse(source);
		this._build(xml);
		var initialState = this._builderFactory.getCoreFactory().locate("initialState");
		hex_unittest_assertion_Assert.isNotNull(initialState,"state should not be null",{ fileName : "StatefulStateMachineConfigTest.hx", lineNumber : 82, className : "hex.ioc.parser.xml.state.StatefulStateMachineConfigTest", methodName : "testStateMachineConfiguration"});
		hex_unittest_assertion_Assert.equals(hex_ioc_parser_xml_state_mock_MockStateEnum.INITIAL_STATE,initialState,"state should be the same",{ fileName : "StatefulStateMachineConfigTest.hx", lineNumber : 83, className : "hex.ioc.parser.xml.state.StatefulStateMachineConfigTest", methodName : "testStateMachineConfiguration"});
		var stateConfig = this._builderFactory.getCoreFactory().locate("stateConfig");
		hex_unittest_assertion_Assert.isNotNull(stateConfig,"config should not be null",{ fileName : "StatefulStateMachineConfigTest.hx", lineNumber : 86, className : "hex.ioc.parser.xml.state.StatefulStateMachineConfigTest", methodName : "testStateMachineConfiguration"});
		var myModule = this._builderFactory.getCoreFactory().locate("myModule");
		hex_unittest_assertion_Assert.isNotNull(myModule,"module should not be null",{ fileName : "StatefulStateMachineConfigTest.hx", lineNumber : 89, className : "hex.ioc.parser.xml.state.StatefulStateMachineConfigTest", methodName : "testStateMachineConfiguration"});
		hex_unittest_assertion_Assert.isTrue(myModule.commandWasCalled,"command should be called",{ fileName : "StatefulStateMachineConfigTest.hx", lineNumber : 91, className : "hex.ioc.parser.xml.state.StatefulStateMachineConfigTest", methodName : "testStateMachineConfiguration"});
	}
	,__class__: hex_ioc_parser_xml_state_StatefulStateMachineConfigTest
};
var hex_ioc_parser_xml_state_mock_MockExitStateCommand = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.ioc.parser.xml.state.mock.MockExitStateCommand"] = hex_ioc_parser_xml_state_mock_MockExitStateCommand;
hex_ioc_parser_xml_state_mock_MockExitStateCommand.__name__ = ["hex","ioc","parser","xml","state","mock","MockExitStateCommand"];
hex_ioc_parser_xml_state_mock_MockExitStateCommand.__super__ = hex_control_command_BasicCommand;
hex_ioc_parser_xml_state_mock_MockExitStateCommand.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	execute: function(request) {
		this.getOwner().commandWasCalled = true;
	}
	,__class__: hex_ioc_parser_xml_state_mock_MockExitStateCommand
});
var hex_ioc_parser_xml_state_mock_MockModuleWorkingWithStates = function(stateConfig) {
	this.commandWasCalled = false;
	hex_module_Module.call(this);
	this._addStatefulConfigs([stateConfig]);
};
$hxClasses["hex.ioc.parser.xml.state.mock.MockModuleWorkingWithStates"] = hex_ioc_parser_xml_state_mock_MockModuleWorkingWithStates;
hex_ioc_parser_xml_state_mock_MockModuleWorkingWithStates.__name__ = ["hex","ioc","parser","xml","state","mock","MockModuleWorkingWithStates"];
hex_ioc_parser_xml_state_mock_MockModuleWorkingWithStates.__super__ = hex_module_Module;
hex_ioc_parser_xml_state_mock_MockModuleWorkingWithStates.prototype = $extend(hex_module_Module.prototype,{
	commandWasCalled: null
	,_onInitialisation: function() {
		this._dispatchPrivateMessage(hex_ioc_parser_xml_state_mock_MockStateMessage.TRIGGER_NEXT_STATE);
		hex_module_Module.prototype._onInitialisation.call(this);
	}
	,_getRuntimeDependencies: function() {
		return new hex_module_dependency_RuntimeDependencies();
	}
	,__class__: hex_ioc_parser_xml_state_mock_MockModuleWorkingWithStates
});
var hex_state_State = function(stateName) {
	this._exitHandlers = [];
	this._enterHandlers = [];
	this._exitCommandMappings = [];
	this._enterCommandMappings = [];
	this._transitions = new hex_collection_HashMap();
	this._stateName = stateName;
};
$hxClasses["hex.state.State"] = hex_state_State;
hex_state_State.__name__ = ["hex","state","State"];
hex_state_State.prototype = {
	_stateName: null
	,_stateMachine: null
	,_transitions: null
	,_enterCommandMappings: null
	,_exitCommandMappings: null
	,_enterHandlers: null
	,_exitHandlers: null
	,clearEnterHandler: function() {
		this._enterHandlers = [];
	}
	,clearExitHandler: function() {
		this._exitHandlers = [];
	}
	,getEnterHandlerList: function() {
		return this._enterHandlers;
	}
	,getExitHandlerList: function() {
		return this._exitHandlers;
	}
	,addEnterHandler: function(scope,callback) {
		return this._addHandler(this._enterHandlers,new hex_event_BasicHandler(scope,callback));
	}
	,addExitHandler: function(scope,callback) {
		return this._addHandler(this._exitHandlers,new hex_event_BasicHandler(scope,callback));
	}
	,removeEnterHandler: function(handler) {
		return this._removeHandler(this._enterHandlers,handler);
	}
	,removeExitHandler: function(handler) {
		return this._removeHandler(this._exitHandlers,handler);
	}
	,addEnterCommandMapping: function(mapping) {
		if(HxOverrides.indexOf(this._enterCommandMappings,mapping,0) == -1) this._enterCommandMappings.push(mapping);
	}
	,addExitCommandMapping: function(mapping) {
		if(HxOverrides.indexOf(this._exitCommandMappings,mapping,0) == -1) this._exitCommandMappings.push(mapping);
	}
	,removeEnterCommandMapping: function(mapping) {
		var i = HxOverrides.indexOf(this._enterCommandMappings,mapping,0);
		if(i != -1) this._enterCommandMappings.splice(i,1);
	}
	,removeExitCommandMapping: function(mapping) {
		var i = HxOverrides.indexOf(this._exitCommandMappings,mapping,0);
		if(i != -1) this._exitCommandMappings.splice(i,1);
	}
	,addEnterCommand: function(commandClass,contextOwner) {
		var mapping = new hex_control_command_CommandMapping(commandClass);
		mapping.setContextOwner(contextOwner);
		this._enterCommandMappings.push(mapping);
		return mapping;
	}
	,addExitCommand: function(commandClass,contextOwner) {
		var mapping = new hex_control_command_CommandMapping(commandClass);
		mapping.setContextOwner(contextOwner);
		this._exitCommandMappings.push(mapping);
		return mapping;
	}
	,addTransition: function(messageType,targetState) {
		this._transitions.put(messageType,new hex_state_Transition(this,messageType,targetState));
	}
	,getMachine: function() {
		return this._stateMachine;
	}
	,getEvents: function() {
		var transitions = this._transitions.getValues();
		var result = [];
		var _g = 0;
		while(_g < transitions.length) {
			var transition = transitions[_g];
			++_g;
			result[result.length] = transition.getMessageType();
		}
		return result;
	}
	,getAllTargets: function() {
		var transitions = this._transitions.getValues();
		var result = [];
		var _g = 0;
		while(_g < transitions.length) {
			var transition = transitions[_g];
			++_g;
			result.push(transition.getTarget());
		}
		return result;
	}
	,getTransitions: function() {
		return this._transitions.getValues();
	}
	,hasTransition: function(messageType) {
		return this._transitions.containsKey(messageType);
	}
	,targetState: function(messageType) {
		return this._transitions.get(messageType).getTarget();
	}
	,getEnterCommandMapping: function() {
		return this._enterCommandMappings;
	}
	,getExitCommandMapping: function() {
		return this._exitCommandMappings;
	}
	,toString: function() {
		return hex_log_Stringifier.stringify(this) + "::" + this._stateName;
	}
	,_addHandler: function(handlers,handler) {
		if(HxOverrides.indexOf(handlers,handler,0) == -1) {
			handlers.push(handler);
			return true;
		} else return false;
	}
	,_removeHandler: function(handlers,handler) {
		var id = HxOverrides.indexOf(handlers,handler,0);
		if(id != -1) {
			handlers.splice(id,1);
			return true;
		} else return false;
	}
	,__class__: hex_state_State
};
var hex_ioc_parser_xml_state_mock_MockStateEnum = function() {
};
$hxClasses["hex.ioc.parser.xml.state.mock.MockStateEnum"] = hex_ioc_parser_xml_state_mock_MockStateEnum;
hex_ioc_parser_xml_state_mock_MockStateEnum.__name__ = ["hex","ioc","parser","xml","state","mock","MockStateEnum"];
hex_ioc_parser_xml_state_mock_MockStateEnum.prototype = {
	__class__: hex_ioc_parser_xml_state_mock_MockStateEnum
};
var hex_ioc_parser_xml_state_mock_MockStateMessage = function() {
};
$hxClasses["hex.ioc.parser.xml.state.mock.MockStateMessage"] = hex_ioc_parser_xml_state_mock_MockStateMessage;
hex_ioc_parser_xml_state_mock_MockStateMessage.__name__ = ["hex","ioc","parser","xml","state","mock","MockStateMessage"];
hex_ioc_parser_xml_state_mock_MockStateMessage.prototype = {
	__class__: hex_ioc_parser_xml_state_mock_MockStateMessage
};
var hex_ioc_vo_BuildHelperVO = function() {
};
$hxClasses["hex.ioc.vo.BuildHelperVO"] = hex_ioc_vo_BuildHelperVO;
hex_ioc_vo_BuildHelperVO.__name__ = ["hex","ioc","vo","BuildHelperVO"];
hex_ioc_vo_BuildHelperVO.prototype = {
	type: null
	,contextFactory: null
	,coreFactory: null
	,constructorVO: null
	,moduleLocator: null
	,__class__: hex_ioc_vo_BuildHelperVO
};
var hex_ioc_vo_CommandMappingVO = function(commandClassName,fireOnce,contextOwner) {
	if(fireOnce == null) fireOnce = false;
	this.commandClassName = commandClassName;
	this.fireOnce = fireOnce;
	this.contextOwner = contextOwner;
};
$hxClasses["hex.ioc.vo.CommandMappingVO"] = hex_ioc_vo_CommandMappingVO;
hex_ioc_vo_CommandMappingVO.__name__ = ["hex","ioc","vo","CommandMappingVO"];
hex_ioc_vo_CommandMappingVO.prototype = {
	commandClassName: null
	,fireOnce: null
	,contextOwner: null
	,__class__: hex_ioc_vo_CommandMappingVO
};
var hex_ioc_vo_ConstructorVO = function(id,type,args,factory,singleton,injectInto,ref,mapType,staticRef) {
	if(injectInto == null) injectInto = false;
	this.ID = id;
	this.type = type;
	this["arguments"] = args;
	this.factory = factory;
	this.singleton = singleton;
	this.injectInto = injectInto;
	this.ref = ref;
	this.mapType = mapType;
	this.staticRef = staticRef;
};
$hxClasses["hex.ioc.vo.ConstructorVO"] = hex_ioc_vo_ConstructorVO;
hex_ioc_vo_ConstructorVO.__name__ = ["hex","ioc","vo","ConstructorVO"];
hex_ioc_vo_ConstructorVO.prototype = {
	ID: null
	,type: null
	,'arguments': null
	,factory: null
	,singleton: null
	,injectInto: null
	,ref: null
	,result: null
	,mapType: null
	,staticRef: null
	,toString: function() {
		return "(" + "id:" + this.ID + ", " + "type:" + this.type + ", " + "arguments:[" + Std.string(this["arguments"]) + "], " + "factory:" + this.factory + ", " + "singleton:" + this.singleton + ", " + "injectInto:" + Std.string(this.injectInto) + ", " + "ref:" + this.ref + ", " + "mapType:" + this.mapType + ", " + "staticRef:" + this.staticRef + ")";
	}
	,__class__: hex_ioc_vo_ConstructorVO
};
var hex_ioc_vo_DomainListenerVO = function(ownerID,listenedDomainName,$arguments) {
	this.ownerID = ownerID;
	this.listenedDomainName = listenedDomainName;
	this["arguments"] = $arguments;
};
$hxClasses["hex.ioc.vo.DomainListenerVO"] = hex_ioc_vo_DomainListenerVO;
hex_ioc_vo_DomainListenerVO.__name__ = ["hex","ioc","vo","DomainListenerVO"];
hex_ioc_vo_DomainListenerVO.prototype = {
	ownerID: null
	,listenedDomainName: null
	,'arguments': null
	,__class__: hex_ioc_vo_DomainListenerVO
};
var hex_ioc_vo_DomainListenerVOArguments = function(name,staticRef,method,strategy,injectedInModule) {
	if(injectedInModule == null) injectedInModule = false;
	this.injectedInModule = false;
	this.name = name;
	this.staticRef = staticRef;
	this.method = method;
	this.strategy = strategy;
	this.injectedInModule = injectedInModule;
};
$hxClasses["hex.ioc.vo.DomainListenerVOArguments"] = hex_ioc_vo_DomainListenerVOArguments;
hex_ioc_vo_DomainListenerVOArguments.__name__ = ["hex","ioc","vo","DomainListenerVOArguments"];
hex_ioc_vo_DomainListenerVOArguments.prototype = {
	name: null
	,staticRef: null
	,method: null
	,strategy: null
	,injectedInModule: null
	,__class__: hex_ioc_vo_DomainListenerVOArguments
};
var hex_ioc_vo_IoCVOSuite = function() {
	this.list = [hex_ioc_vo_PropertyVOTest];
};
$hxClasses["hex.ioc.vo.IoCVOSuite"] = hex_ioc_vo_IoCVOSuite;
hex_ioc_vo_IoCVOSuite.__name__ = ["hex","ioc","vo","IoCVOSuite"];
hex_ioc_vo_IoCVOSuite.prototype = {
	list: null
	,__class__: hex_ioc_vo_IoCVOSuite
};
var hex_ioc_vo_MapVO = function(key,value) {
	this._key = key;
	this._value = value;
};
$hxClasses["hex.ioc.vo.MapVO"] = hex_ioc_vo_MapVO;
hex_ioc_vo_MapVO.__name__ = ["hex","ioc","vo","MapVO"];
hex_ioc_vo_MapVO.prototype = {
	_key: null
	,_value: null
	,key: null
	,value: null
	,getPropertyKey: function() {
		return this._key;
	}
	,getPropertyValue: function() {
		return this._value;
	}
	,__class__: hex_ioc_vo_MapVO
};
var hex_ioc_vo_MethodCallVO = function(ownerID,name,args) {
	this.ownerID = ownerID;
	this.name = name;
	this["arguments"] = args;
};
$hxClasses["hex.ioc.vo.MethodCallVO"] = hex_ioc_vo_MethodCallVO;
hex_ioc_vo_MethodCallVO.__name__ = ["hex","ioc","vo","MethodCallVO"];
hex_ioc_vo_MethodCallVO.prototype = {
	ownerID: null
	,name: null
	,'arguments': null
	,__class__: hex_ioc_vo_MethodCallVO
};
var hex_ioc_vo_PropertyVO = function(ownerID,name,value,type,ref,method,staticRef) {
	this.ownerID = ownerID;
	this.name = name;
	this.value = value;
	this.type = type;
	this.ref = ref;
	this.method = method;
	this.staticRef = staticRef;
};
$hxClasses["hex.ioc.vo.PropertyVO"] = hex_ioc_vo_PropertyVO;
hex_ioc_vo_PropertyVO.__name__ = ["hex","ioc","vo","PropertyVO"];
hex_ioc_vo_PropertyVO.prototype = {
	ownerID: null
	,name: null
	,value: null
	,type: null
	,ref: null
	,method: null
	,staticRef: null
	,__class__: hex_ioc_vo_PropertyVO
};
var hex_ioc_vo_PropertyVOTest = function() { };
$hxClasses["hex.ioc.vo.PropertyVOTest"] = hex_ioc_vo_PropertyVOTest;
hex_ioc_vo_PropertyVOTest.__name__ = ["hex","ioc","vo","PropertyVOTest"];
var hex_ioc_vo_ServiceLocatorVO = function(key,value,mapName) {
	hex_ioc_vo_MapVO.call(this,key,value);
	this.mapName = mapName;
};
$hxClasses["hex.ioc.vo.ServiceLocatorVO"] = hex_ioc_vo_ServiceLocatorVO;
hex_ioc_vo_ServiceLocatorVO.__name__ = ["hex","ioc","vo","ServiceLocatorVO"];
hex_ioc_vo_ServiceLocatorVO.__super__ = hex_ioc_vo_MapVO;
hex_ioc_vo_ServiceLocatorVO.prototype = $extend(hex_ioc_vo_MapVO.prototype,{
	mapName: null
	,__class__: hex_ioc_vo_ServiceLocatorVO
});
var hex_ioc_vo_StateTransitionVO = function(ID,staticReference,instanceReference,enterList,exitList) {
	this.ID = ID;
	this.staticReference = staticReference;
	this.instanceReference = instanceReference;
	this.enterList = enterList;
	this.exitList = exitList;
};
$hxClasses["hex.ioc.vo.StateTransitionVO"] = hex_ioc_vo_StateTransitionVO;
hex_ioc_vo_StateTransitionVO.__name__ = ["hex","ioc","vo","StateTransitionVO"];
hex_ioc_vo_StateTransitionVO.prototype = {
	ID: null
	,staticReference: null
	,instanceReference: null
	,enterList: null
	,exitList: null
	,__class__: hex_ioc_vo_StateTransitionVO
};
var hex_log_ILogger = function() { };
$hxClasses["hex.log.ILogger"] = hex_log_ILogger;
hex_log_ILogger.__name__ = ["hex","log","ILogger"];
hex_log_ILogger.prototype = {
	clear: null
	,debug: null
	,info: null
	,warn: null
	,error: null
	,fatal: null
	,getDomain: null
	,__class__: hex_log_ILogger
};
var hex_log_DomainLogger = function(domain) {
	if(domain == null) throw new js__$Boot_HaxeError(new hex_error_NullPointerException("Domain should be specified for contructor call",{ fileName : "DomainLogger.hx", lineNumber : 21, className : "hex.log.DomainLogger", methodName : "new"}));
	this._domain = domain;
	this._logger = hex_log_Logger.getInstance();
};
$hxClasses["hex.log.DomainLogger"] = hex_log_DomainLogger;
hex_log_DomainLogger.__name__ = ["hex","log","DomainLogger"];
hex_log_DomainLogger.__interfaces__ = [hex_log_ILogger];
hex_log_DomainLogger.prototype = {
	_domain: null
	,_logger: null
	,clear: function() {
		this._logger.clear();
	}
	,debug: function(o,posInfos) {
		this._logger.log(o,hex_log_LogLevel._DEBUG,this._domain,posInfos);
	}
	,info: function(o,posInfos) {
		this._logger.log(o,hex_log_LogLevel._INFO,this._domain,posInfos);
	}
	,warn: function(o,posInfos) {
		this._logger.log(o,hex_log_LogLevel._WARN,this._domain,posInfos);
	}
	,error: function(o,posInfos) {
		this._logger.log(o,hex_log_LogLevel._ERROR,this._domain,posInfos);
	}
	,fatal: function(o,posInfos) {
		this._logger.log(o,hex_log_LogLevel._FATAL,this._domain,posInfos);
	}
	,getDomain: function() {
		return this._domain;
	}
	,__class__: hex_log_DomainLogger
};
var hex_log_ILogListener = function() { };
$hxClasses["hex.log.ILogListener"] = hex_log_ILogListener;
hex_log_ILogListener.__name__ = ["hex","log","ILogListener"];
hex_log_ILogListener.prototype = {
	onClear: null
	,onLog: null
	,__class__: hex_log_ILogListener
};
var hex_log_LoggerMessage = function(message,level,domain,posInfos) {
	this.message = message;
	this.level = level;
	this.domain = domain;
	this.posInfos = posInfos;
};
$hxClasses["hex.log.LoggerMessage"] = hex_log_LoggerMessage;
hex_log_LoggerMessage.__name__ = ["hex","log","LoggerMessage"];
hex_log_LoggerMessage.prototype = {
	message: null
	,level: null
	,domain: null
	,posInfos: null
	,__class__: hex_log_LoggerMessage
};
var hex_metadata_AnnotationProvider = function() {
	this._metadata = new haxe_ds_StringMap();
	this._instances = new haxe_ds_StringMap();
};
$hxClasses["hex.metadata.AnnotationProvider"] = hex_metadata_AnnotationProvider;
hex_metadata_AnnotationProvider.__name__ = ["hex","metadata","AnnotationProvider"];
hex_metadata_AnnotationProvider.__interfaces__ = [hex_metadata_IAnnotationProvider];
hex_metadata_AnnotationProvider.registerToDomain = function(annotationProvider,domain) {
	if(hex_metadata_AnnotationProvider._Domains.h.__keys__[domain.__id__] != null) return false; else {
		hex_metadata_AnnotationProvider._Domains.set(domain,annotationProvider);
		return true;
	}
};
hex_metadata_AnnotationProvider.getAnnotationProvider = function(domain) {
	if(hex_metadata_AnnotationProvider._Domains.h.__keys__[domain.__id__] != null) return hex_metadata_AnnotationProvider._Domains.h[domain.__id__]; else return hex_metadata_AnnotationProvider._Instance;
};
hex_metadata_AnnotationProvider.prototype = {
	_metadata: null
	,_instances: null
	,registerMetaData: function(metaDataName,scope,providerMethod) {
		if(!this._metadata.exists(metaDataName)) {
			var providerHandler = new hex_metadata__$AnnotationProvider_ProviderHandler(scope,providerMethod);
			this._metadata.set(metaDataName,providerHandler);
			var voCollection = this._instances.get(metaDataName);
			if(voCollection != null) {
				var _g = 0;
				while(_g < voCollection.length) {
					var vo = voCollection[_g];
					++_g;
					if(vo.metaDataName == metaDataName) Reflect.setProperty(vo.owner,vo.propertyName,providerHandler.call(vo.metaDataValue));
				}
			}
		} else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("registerMetaData failed. '" + metaDataName + "' is already registered in '" + hex_log_Stringifier.stringify(this) + "'",{ fileName : "AnnotationProvider.hx", lineNumber : 72, className : "hex.metadata.AnnotationProvider", methodName : "registerMetaData"}));
	}
	,clear: function() {
		this._metadata = new haxe_ds_StringMap();
		this._instances = new haxe_ds_StringMap();
	}
	,parse: function(instance) {
		var classMetaDataVO = this._parse(instance);
		if(classMetaDataVO != null) {
			var properties = classMetaDataVO.properties;
			var _g = 0;
			while(_g < properties.length) {
				var property = properties[_g];
				++_g;
				var metaDataName = property.metaDataName;
				if(this._metadata.exists(metaDataName)) {
					var providerHandler = this._metadata.get(metaDataName);
					Reflect.setProperty(instance,property.propertyName,providerHandler.call(property.metaDataValue));
				} else {
					var instanceVO = new hex_metadata__$AnnotationProvider_InstanceVO(instance,property.propertyName,property.metaDataName,property.metaDataValue);
					if(this._instances.exists(metaDataName)) this._instances.get(metaDataName).push(instanceVO); else this._instances.set(metaDataName,[instanceVO]);
				}
			}
		}
	}
	,_parse: function(object) {
		var classMetaDataVO = null;
		var classReference;
		if(object == null) classReference = null; else classReference = js_Boot.getClass(object);
		if(classReference != null) {
			if(hex_metadata_AnnotationProvider._META_DATA.containsKey(classReference)) classMetaDataVO = hex_metadata_AnnotationProvider._META_DATA.get(classReference); else {
				classMetaDataVO = new hex_metadata__$AnnotationProvider_ClassMetaDataVO();
				var properties = classMetaDataVO.properties;
				var metadata = haxe_rtti_Meta.getFields(classReference);
				var fields = Reflect.fields(metadata);
				var _g = 0;
				while(_g < fields.length) {
					var propertyName = fields[_g];
					++_g;
					var o = Reflect.field(metadata,propertyName);
					var f = Reflect.fields(o);
					if(f != null) {
						var metaDataName = f[0];
						if(metaDataName != null) {
							var field = Reflect.field(o,metaDataName);
							if(field != null) {
								var metaDataValue = field[0];
								properties.push(new hex_metadata__$AnnotationProvider_PropertyMetaDataVO(propertyName,metaDataName,metaDataValue));
							}
						}
					}
				}
				hex_metadata_AnnotationProvider._META_DATA.put(classReference,classMetaDataVO);
			}
		}
		return classMetaDataVO;
	}
	,registerInjector: function(injector) {
		injector.addEventListener("onPreConstruct",$bind(this,this._onPostconstruct));
	}
	,unregisterInjector: function(injector) {
		injector.removeEventListener("onPreConstruct",$bind(this,this._onPostconstruct));
	}
	,_onPostconstruct: function(event) {
		if(js_Boot.__instanceof(event.instance,hex_core_IAnnotationParsable)) this.parse(event.instance);
	}
	,__class__: hex_metadata_AnnotationProvider
};
var hex_metadata__$AnnotationProvider_ProviderHandler = function(scope,callback) {
	this.scope = scope;
	this.callback = callback;
};
$hxClasses["hex.metadata._AnnotationProvider.ProviderHandler"] = hex_metadata__$AnnotationProvider_ProviderHandler;
hex_metadata__$AnnotationProvider_ProviderHandler.__name__ = ["hex","metadata","_AnnotationProvider","ProviderHandler"];
hex_metadata__$AnnotationProvider_ProviderHandler.prototype = {
	scope: null
	,callback: null
	,call: function(metaDataValue) {
		return this.callback.apply(this.scope,[metaDataValue]);
	}
	,__class__: hex_metadata__$AnnotationProvider_ProviderHandler
};
var hex_metadata__$AnnotationProvider_ClassMetaDataVO = function() {
	this.properties = [];
};
$hxClasses["hex.metadata._AnnotationProvider.ClassMetaDataVO"] = hex_metadata__$AnnotationProvider_ClassMetaDataVO;
hex_metadata__$AnnotationProvider_ClassMetaDataVO.__name__ = ["hex","metadata","_AnnotationProvider","ClassMetaDataVO"];
hex_metadata__$AnnotationProvider_ClassMetaDataVO.prototype = {
	classReference: null
	,properties: null
	,__class__: hex_metadata__$AnnotationProvider_ClassMetaDataVO
};
var hex_metadata__$AnnotationProvider_PropertyMetaDataVO = function(propertyName,metaDataName,metaDataValue) {
	this.propertyName = propertyName;
	this.metaDataName = metaDataName;
	this.metaDataValue = metaDataValue;
};
$hxClasses["hex.metadata._AnnotationProvider.PropertyMetaDataVO"] = hex_metadata__$AnnotationProvider_PropertyMetaDataVO;
hex_metadata__$AnnotationProvider_PropertyMetaDataVO.__name__ = ["hex","metadata","_AnnotationProvider","PropertyMetaDataVO"];
hex_metadata__$AnnotationProvider_PropertyMetaDataVO.prototype = {
	propertyName: null
	,metaDataName: null
	,metaDataValue: null
	,__class__: hex_metadata__$AnnotationProvider_PropertyMetaDataVO
};
var hex_metadata__$AnnotationProvider_InstanceVO = function(owner,propertyName,metaDataName,metaDataValue) {
	this.owner = owner;
	this.propertyName = propertyName;
	this.metaDataName = metaDataName;
	this.metaDataValue = metaDataValue;
};
$hxClasses["hex.metadata._AnnotationProvider.InstanceVO"] = hex_metadata__$AnnotationProvider_InstanceVO;
hex_metadata__$AnnotationProvider_InstanceVO.__name__ = ["hex","metadata","_AnnotationProvider","InstanceVO"];
hex_metadata__$AnnotationProvider_InstanceVO.prototype = {
	owner: null
	,propertyName: null
	,metaDataName: null
	,metaDataValue: null
	,__class__: hex_metadata__$AnnotationProvider_InstanceVO
};
var hex_metadata_AnnotationProviderTest = function() {
	this._text = new haxe_ds_StringMap();
	this._colors = new haxe_ds_StringMap();
	this._annotationProvider = new hex_metadata_AnnotationProvider();
};
$hxClasses["hex.metadata.AnnotationProviderTest"] = hex_metadata_AnnotationProviderTest;
hex_metadata_AnnotationProviderTest.__name__ = ["hex","metadata","AnnotationProviderTest"];
hex_metadata_AnnotationProviderTest.prototype = {
	_annotationProvider: null
	,_colors: null
	,_text: null
	,setUp: function() {
		this._annotationProvider = new hex_metadata_AnnotationProvider();
		this._colors.set("white",16777215);
		this._text.set("welcome","Bienvenue");
	}
	,tearDown: function() {
		this._colors.remove("white");
		this._text.remove("welcome");
		this._annotationProvider.clear();
	}
	,testRegisterBeforeParsing: function() {
		var mockObjectWithMetaData = new hex_metadata_MockObjectWithAnnotation();
		this._annotationProvider.registerMetaData("color",this,$bind(this,this.getColorByName));
		this._annotationProvider.registerMetaData("language",this,$bind(this,this.getText));
		this._annotationProvider.parse(mockObjectWithMetaData);
		hex_unittest_assertion_Assert.equals(16777215,mockObjectWithMetaData.colorTest,"color should be the same",{ fileName : "AnnotationProviderTest.hx", lineNumber : 41, className : "hex.metadata.AnnotationProviderTest", methodName : "testRegisterBeforeParsing"});
		hex_unittest_assertion_Assert.equals("Bienvenue",mockObjectWithMetaData.languageTest,"text should be the same",{ fileName : "AnnotationProviderTest.hx", lineNumber : 42, className : "hex.metadata.AnnotationProviderTest", methodName : "testRegisterBeforeParsing"});
		hex_unittest_assertion_Assert.isNull(mockObjectWithMetaData.propWithoutMetaData,"property should be null",{ fileName : "AnnotationProviderTest.hx", lineNumber : 43, className : "hex.metadata.AnnotationProviderTest", methodName : "testRegisterBeforeParsing"});
	}
	,testRegisterAfterParsing: function() {
		var mockObjectWithMetaData = new hex_metadata_MockObjectWithAnnotation();
		this._annotationProvider.parse(mockObjectWithMetaData);
		this._annotationProvider.registerMetaData("color",this,$bind(this,this.getColorByName));
		this._annotationProvider.registerMetaData("language",this,$bind(this,this.getText));
		hex_unittest_assertion_Assert.equals(16777215,mockObjectWithMetaData.colorTest,"color should be the same",{ fileName : "AnnotationProviderTest.hx", lineNumber : 56, className : "hex.metadata.AnnotationProviderTest", methodName : "testRegisterAfterParsing"});
		hex_unittest_assertion_Assert.equals("Bienvenue",mockObjectWithMetaData.languageTest,"text should be the same",{ fileName : "AnnotationProviderTest.hx", lineNumber : 57, className : "hex.metadata.AnnotationProviderTest", methodName : "testRegisterAfterParsing"});
		hex_unittest_assertion_Assert.isNull(mockObjectWithMetaData.propWithoutMetaData,"property should be null",{ fileName : "AnnotationProviderTest.hx", lineNumber : 58, className : "hex.metadata.AnnotationProviderTest", methodName : "testRegisterAfterParsing"});
	}
	,testWithModule: function() {
		var module = new hex_metadata_MockModuleForAnnotationProviding();
		this._annotationProvider = module.getAnnotationProvider();
		this._annotationProvider.registerMetaData("color",this,$bind(this,this.getColorByName));
		this._annotationProvider.registerMetaData("language",this,$bind(this,this.getText));
		module.initialize();
		hex_unittest_assertion_Assert.equals(16777215,module.mockObjectWithMetaData.colorTest,"color should be the same",{ fileName : "AnnotationProviderTest.hx", lineNumber : 72, className : "hex.metadata.AnnotationProviderTest", methodName : "testWithModule"});
		hex_unittest_assertion_Assert.equals("Bienvenue",module.mockObjectWithMetaData.languageTest,"text should be the same",{ fileName : "AnnotationProviderTest.hx", lineNumber : 73, className : "hex.metadata.AnnotationProviderTest", methodName : "testWithModule"});
		hex_unittest_assertion_Assert.isNull(module.anotherMockObjectWithMetaData.languageTest,"property should be null when class is not implementing IAnnotationParsable",{ fileName : "AnnotationProviderTest.hx", lineNumber : 74, className : "hex.metadata.AnnotationProviderTest", methodName : "testWithModule"});
	}
	,testClearMethod: function() {
		var mockObjectWithMetaData = new hex_metadata_MockObjectWithAnnotation();
		this._annotationProvider.registerMetaData("color",this,$bind(this,this.getColorByName));
		this._annotationProvider.clear();
		this._annotationProvider.parse(mockObjectWithMetaData);
		hex_unittest_assertion_Assert.equals(0,mockObjectWithMetaData.colorTest,"property should be set to 0 default value",{ fileName : "AnnotationProviderTest.hx", lineNumber : 86, className : "hex.metadata.AnnotationProviderTest", methodName : "testClearMethod"});
	}
	,getColorByName: function(name) {
		return this._colors.get(name);
	}
	,getText: function(name) {
		return this._text.get(name);
	}
	,__class__: hex_metadata_AnnotationProviderTest
};
var hex_metadata_MVCMetadataSuite = function() {
	this.list = [hex_metadata_AnnotationProviderTest];
};
$hxClasses["hex.metadata.MVCMetadataSuite"] = hex_metadata_MVCMetadataSuite;
hex_metadata_MVCMetadataSuite.__name__ = ["hex","metadata","MVCMetadataSuite"];
hex_metadata_MVCMetadataSuite.prototype = {
	list: null
	,__class__: hex_metadata_MVCMetadataSuite
};
var hex_metadata_MockModuleForAnnotationProviding = function() {
	hex_module_Module.call(this);
	this._getDependencyInjector().mapToType(hex_metadata_MockObjectWithAnnotation,hex_metadata_MockObjectWithAnnotation);
	this._getDependencyInjector().mapToType(hex_metadata_MockWithoutIAnnotationParsableImplementation,hex_metadata_MockWithoutIAnnotationParsableImplementation);
};
$hxClasses["hex.metadata.MockModuleForAnnotationProviding"] = hex_metadata_MockModuleForAnnotationProviding;
hex_metadata_MockModuleForAnnotationProviding.__name__ = ["hex","metadata","MockModuleForAnnotationProviding"];
hex_metadata_MockModuleForAnnotationProviding.__super__ = hex_module_Module;
hex_metadata_MockModuleForAnnotationProviding.prototype = $extend(hex_module_Module.prototype,{
	mockObjectWithMetaData: null
	,anotherMockObjectWithMetaData: null
	,getAnnotationProvider: function() {
		return this._annotationProvider;
	}
	,_getRuntimeDependencies: function() {
		return new hex_module_dependency_RuntimeDependencies();
	}
	,_onInitialisation: function() {
		this.mockObjectWithMetaData = this._getDependencyInjector().getInstance(hex_metadata_MockObjectWithAnnotation);
		this.anotherMockObjectWithMetaData = this._getDependencyInjector().getInstance(hex_metadata_MockWithoutIAnnotationParsableImplementation);
	}
	,__class__: hex_metadata_MockModuleForAnnotationProviding
});
var hex_metadata_MockObjectWithAnnotation = function() {
	this.colorTest = 0;
};
$hxClasses["hex.metadata.MockObjectWithAnnotation"] = hex_metadata_MockObjectWithAnnotation;
hex_metadata_MockObjectWithAnnotation.__name__ = ["hex","metadata","MockObjectWithAnnotation"];
hex_metadata_MockObjectWithAnnotation.__interfaces__ = [hex_core_IAnnotationParsable];
hex_metadata_MockObjectWithAnnotation.prototype = {
	colorTest: null
	,languageTest: null
	,propWithoutMetaData: null
	,__class__: hex_metadata_MockObjectWithAnnotation
};
var hex_metadata_MockWithoutIAnnotationParsableImplementation = function() {
};
$hxClasses["hex.metadata.MockWithoutIAnnotationParsableImplementation"] = hex_metadata_MockWithoutIAnnotationParsableImplementation;
hex_metadata_MockWithoutIAnnotationParsableImplementation.__name__ = ["hex","metadata","MockWithoutIAnnotationParsableImplementation"];
hex_metadata_MockWithoutIAnnotationParsableImplementation.prototype = {
	languageTest: null
	,__class__: hex_metadata_MockWithoutIAnnotationParsableImplementation
};
var hex_model_IModelDispatcher = function() { };
$hxClasses["hex.model.IModelDispatcher"] = hex_model_IModelDispatcher;
hex_model_IModelDispatcher.__name__ = ["hex","model","IModelDispatcher"];
hex_model_IModelDispatcher.prototype = {
	addListener: null
	,removeListener: null
	,__class__: hex_model_IModelDispatcher
};
var hex_model_ModelDispatcher = function() {
	this._listeners = [];
};
$hxClasses["hex.model.ModelDispatcher"] = hex_model_ModelDispatcher;
hex_model_ModelDispatcher.__name__ = ["hex","model","ModelDispatcher"];
hex_model_ModelDispatcher.__interfaces__ = [hex_model_IModelDispatcher];
hex_model_ModelDispatcher.prototype = {
	_listeners: null
	,addListener: function(listener) {
		if(HxOverrides.indexOf(this._listeners,listener,0) == -1) {
			this._listeners.push(listener);
			return true;
		} else return false;
	}
	,removeListener: function(listener) {
		var index = HxOverrides.indexOf(this._listeners,listener,0);
		if(index > -1) {
			this._listeners.splice(index,1);
			return true;
		} else return false;
	}
	,__class__: hex_model_ModelDispatcher
};
var hex_module_MVCModuleSuite = function() {
	this.list = [hex_module_ModuleTest];
};
$hxClasses["hex.module.MVCModuleSuite"] = hex_module_MVCModuleSuite;
hex_module_MVCModuleSuite.__name__ = ["hex","module","MVCModuleSuite"];
hex_module_MVCModuleSuite.prototype = {
	list: null
	,__class__: hex_module_MVCModuleSuite
};
var hex_module_MockModule = function() {
};
$hxClasses["hex.module.MockModule"] = hex_module_MockModule;
hex_module_MockModule.__name__ = ["hex","module","MockModule"];
hex_module_MockModule.__interfaces__ = [hex_module_IModule];
hex_module_MockModule.prototype = {
	initialize: function() {
		this.isInitialized = true;
	}
	,isInitialized: null
	,get_isInitialized: function() {
		return this.isInitialized;
	}
	,release: function() {
		this.isReleased = true;
	}
	,isReleased: null
	,get_isReleased: function() {
		return this.isReleased;
	}
	,dispatchPublicMessage: function(messageType,data) {
	}
	,addHandler: function(messageType,scope,callback) {
	}
	,removeHandler: function(messageType,scope,callback) {
	}
	,getDomain: function() {
		return null;
	}
	,getBasicInjector: function() {
		return null;
	}
	,getLogger: function() {
		return null;
	}
	,__class__: hex_module_MockModule
	,__properties__: {get_isReleased:"get_isReleased",get_isInitialized:"get_isInitialized"}
};
var hex_module_ModuleMessage = function() {
};
$hxClasses["hex.module.ModuleMessage"] = hex_module_ModuleMessage;
hex_module_ModuleMessage.__name__ = ["hex","module","ModuleMessage"];
hex_module_ModuleMessage.prototype = {
	__class__: hex_module_ModuleMessage
};
var hex_module_ModuleTest = function() { };
$hxClasses["hex.module.ModuleTest"] = hex_module_ModuleTest;
hex_module_ModuleTest.__name__ = ["hex","module","ModuleTest"];
hex_module_ModuleTest.prototype = {
	testconstructor: function() {
		var module = new hex_module__$ModuleTest_MockModuleForTestingConstructor();
		hex_unittest_assertion_Assert.isInstanceOf(module.injector,hex_di_Injector,"injector shouldn't be null",{ fileName : "ModuleTest.hx", lineNumber : 34, className : "hex.module.ModuleTest", methodName : "testconstructor"});
		hex_unittest_assertion_Assert.isInstanceOf(module.dispatcher,hex_event_Dispatcher,"dispatcher shouldn't be null",{ fileName : "ModuleTest.hx", lineNumber : 35, className : "hex.module.ModuleTest", methodName : "testconstructor"});
		hex_unittest_assertion_Assert.isInstanceOf(module.domainDispatcher,hex_event_IDispatcher,"domainDispatcher shouldn't be null",{ fileName : "ModuleTest.hx", lineNumber : 36, className : "hex.module.ModuleTest", methodName : "testconstructor"});
		hex_unittest_assertion_Assert.isInstanceOf(module.annotationProvider,hex_metadata_AnnotationProvider,"annotationProvider shouldn't be null",{ fileName : "ModuleTest.hx", lineNumber : 37, className : "hex.module.ModuleTest", methodName : "testconstructor"});
	}
	,testAddStatefulConfig: function() {
		var config = new hex_module__$ModuleTest_MockStatefulConfig();
		var module = new hex_module__$ModuleTest_MockModuleForTestingStateFulConfig(config);
		hex_unittest_assertion_Assert.equals(module,config.module,"module should be the same",{ fileName : "ModuleTest.hx", lineNumber : 46, className : "hex.module.ModuleTest", methodName : "testAddStatefulConfig"});
		hex_unittest_assertion_Assert.equals(module.injector,config.injector,"injector should be the same",{ fileName : "ModuleTest.hx", lineNumber : 47, className : "hex.module.ModuleTest", methodName : "testAddStatefulConfig"});
		hex_unittest_assertion_Assert.equals(module.dispatcher,config.dispatcher,"dispatcher should be the same",{ fileName : "ModuleTest.hx", lineNumber : 48, className : "hex.module.ModuleTest", methodName : "testAddStatefulConfig"});
	}
	,testAddStatelessConfig: function() {
		var module = new hex_module__$ModuleTest_MockModuleForTestingStatelessConfig(hex_module__$ModuleTest_MockStatelessConfig);
		hex_unittest_assertion_Assert.equals(1,hex_module__$ModuleTest_MockStatelessConfig.wasInstantiated,"configuration should have been instantiated once",{ fileName : "ModuleTest.hx", lineNumber : 56, className : "hex.module.ModuleTest", methodName : "testAddStatelessConfig"});
		hex_unittest_assertion_Assert.equals(1,hex_module__$ModuleTest_MockStatelessConfig.configureWasCalled,"'configure' method should have been called once",{ fileName : "ModuleTest.hx", lineNumber : 57, className : "hex.module.ModuleTest", methodName : "testAddStatelessConfig"});
	}
	,testRuntimeDependencies: function() {
		var module = new hex_module__$ModuleTest_MockModuleForTestingVirtualException();
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_VirtualMethodException,module,$bind(module,module.initialize),[],"initialize should throw 'VirtualMethodException' when _getRuntimeDependencies is not overriden",{ fileName : "ModuleTest.hx", lineNumber : 64, className : "hex.module.ModuleTest", methodName : "testRuntimeDependencies"});
		var anotherModule = new hex_module__$ModuleTest_MockModuleForTestingRuntimeDependencies();
		hex_unittest_assertion_Assert.methodCallThrows(hex_module_dependency_RuntimeDependencyException,anotherModule,$bind(anotherModule,anotherModule.initialize),[],"initialize should throw 'RuntimeDependencyException' when dependency is not filled",{ fileName : "ModuleTest.hx", lineNumber : 67, className : "hex.module.ModuleTest", methodName : "testRuntimeDependencies"});
		anotherModule.mapServiceClass(hex_module__$ModuleTest_MockService);
		anotherModule.initialize();
	}
	,testGetBasicInjector: function() {
		var module = new hex_module__$ModuleTest_MockModuleForTestigInjector();
		hex_unittest_assertion_Assert.isNotNull(module.getBasicInjector(),"injector shouldn't be null",{ fileName : "ModuleTest.hx", lineNumber : 77, className : "hex.module.ModuleTest", methodName : "testGetBasicInjector"});
	}
	,testInitialize: function() {
		var module = new hex_module__$ModuleTest_MockModuleForTestingInitialisation();
		var listener = new hex_module__$ModuleTest_MockModuleListener();
		module.addHandler(hex_module_ModuleMessage.INITIALIZED,listener,$bind(listener,listener.onInit));
		module.initialize();
		hex_unittest_assertion_Assert.equals(1,module.initialisationCallCount,"initialise should have been called once",{ fileName : "ModuleTest.hx", lineNumber : 88, className : "hex.module.ModuleTest", methodName : "testInitialize"});
		hex_unittest_assertion_Assert.isTrue(module.get_isInitialized(),"'isInitialized' should return true",{ fileName : "ModuleTest.hx", lineNumber : 89, className : "hex.module.ModuleTest", methodName : "testInitialize"});
		hex_unittest_assertion_Assert.equals(1,listener.onInitCallCount,"message should have been dispatched to listeners",{ fileName : "ModuleTest.hx", lineNumber : 91, className : "hex.module.ModuleTest", methodName : "testInitialize"});
		hex_unittest_assertion_Assert.equals(module,listener.moduleReference,"module should be the same",{ fileName : "ModuleTest.hx", lineNumber : 92, className : "hex.module.ModuleTest", methodName : "testInitialize"});
		hex_unittest_assertion_Assert.isInstanceOf(module.getPrivateDispatcher(),hex_event_Dispatcher,"private dispatcher should not be null",{ fileName : "ModuleTest.hx", lineNumber : 94, className : "hex.module.ModuleTest", methodName : "testInitialize"});
		hex_unittest_assertion_Assert.isInstanceOf(module.getPublicDispatcher(),hex_event_Dispatcher,"public dispatcher should not be null",{ fileName : "ModuleTest.hx", lineNumber : 95, className : "hex.module.ModuleTest", methodName : "testInitialize"});
		hex_unittest_assertion_Assert.isInstanceOf(module.getLogger(),hex_log_ILogger,"logger should not be null",{ fileName : "ModuleTest.hx", lineNumber : 96, className : "hex.module.ModuleTest", methodName : "testInitialize"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,module,$bind(module,module.initialize),[],"'initialize' called twice should throw 'IllegalStateException'",{ fileName : "ModuleTest.hx", lineNumber : 98, className : "hex.module.ModuleTest", methodName : "testInitialize"});
		hex_unittest_assertion_Assert.equals(1,module.initialisationCallCount,"initialise should have been called once",{ fileName : "ModuleTest.hx", lineNumber : 99, className : "hex.module.ModuleTest", methodName : "testInitialize"});
	}
	,testRelease: function() {
		var module = new hex_module__$ModuleTest_MockModuleForTestingRelease();
		var listener = new hex_module__$ModuleTest_MockModuleListener();
		module.addHandler(hex_module_ModuleMessage.RELEASED,listener,$bind(listener,listener.onRelease));
		module.release();
		hex_unittest_assertion_Assert.equals(1,module.releaseCallCount,"release should have been called once",{ fileName : "ModuleTest.hx", lineNumber : 110, className : "hex.module.ModuleTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isTrue(module.get_isReleased(),"'isReleased' should return true",{ fileName : "ModuleTest.hx", lineNumber : 111, className : "hex.module.ModuleTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.equals(1,listener.onReleaseCallCount,"message should have been dispatched to listeners",{ fileName : "ModuleTest.hx", lineNumber : 113, className : "hex.module.ModuleTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.equals(module,listener.moduleReference,"module should be the same",{ fileName : "ModuleTest.hx", lineNumber : 114, className : "hex.module.ModuleTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isTrue(module.getPrivateDispatcher().isEmpty(),"all listeners should have been removed",{ fileName : "ModuleTest.hx", lineNumber : 116, className : "hex.module.ModuleTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isTrue(module.getPublicDispatcher().isEmpty(),"all listeners should have been removed",{ fileName : "ModuleTest.hx", lineNumber : 117, className : "hex.module.ModuleTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isNull(hex_domain_DomainExpert.getInstance().getDomainFor(module),"domain should be null",{ fileName : "ModuleTest.hx", lineNumber : 118, className : "hex.module.ModuleTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isNull(module.getLogger(),"logger should be null",{ fileName : "ModuleTest.hx", lineNumber : 119, className : "hex.module.ModuleTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,module,$bind(module,module.release),[],"'release' called twice should throw 'IllegalStateException'",{ fileName : "ModuleTest.hx", lineNumber : 121, className : "hex.module.ModuleTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.equals(1,listener.onReleaseCallCount,"message should have been dispatched to listeners",{ fileName : "ModuleTest.hx", lineNumber : 122, className : "hex.module.ModuleTest", methodName : "testRelease"});
	}
	,__class__: hex_module_ModuleTest
};
var hex_module__$ModuleTest_MockModuleForTestigInjector = function() {
	hex_module_Module.call(this);
};
$hxClasses["hex.module._ModuleTest.MockModuleForTestigInjector"] = hex_module__$ModuleTest_MockModuleForTestigInjector;
hex_module__$ModuleTest_MockModuleForTestigInjector.__name__ = ["hex","module","_ModuleTest","MockModuleForTestigInjector"];
hex_module__$ModuleTest_MockModuleForTestigInjector.__super__ = hex_module_Module;
hex_module__$ModuleTest_MockModuleForTestigInjector.prototype = $extend(hex_module_Module.prototype,{
	__class__: hex_module__$ModuleTest_MockModuleForTestigInjector
});
var hex_module__$ModuleTest_MockModuleForTestingVirtualException = function() {
	hex_module_Module.call(this);
};
$hxClasses["hex.module._ModuleTest.MockModuleForTestingVirtualException"] = hex_module__$ModuleTest_MockModuleForTestingVirtualException;
hex_module__$ModuleTest_MockModuleForTestingVirtualException.__name__ = ["hex","module","_ModuleTest","MockModuleForTestingVirtualException"];
hex_module__$ModuleTest_MockModuleForTestingVirtualException.__super__ = hex_module_Module;
hex_module__$ModuleTest_MockModuleForTestingVirtualException.prototype = $extend(hex_module_Module.prototype,{
	__class__: hex_module__$ModuleTest_MockModuleForTestingVirtualException
});
var hex_module__$ModuleTest_MockModuleListener = function() {
	this.onReleaseCallCount = 0;
	this.onInitCallCount = 0;
};
$hxClasses["hex.module._ModuleTest.MockModuleListener"] = hex_module__$ModuleTest_MockModuleListener;
hex_module__$ModuleTest_MockModuleListener.__name__ = ["hex","module","_ModuleTest","MockModuleListener"];
hex_module__$ModuleTest_MockModuleListener.prototype = {
	onInitCallCount: null
	,onReleaseCallCount: null
	,moduleReference: null
	,onInit: function(moduleReference) {
		this.onInitCallCount++;
		this.moduleReference = moduleReference;
	}
	,onRelease: function(moduleReference) {
		this.onReleaseCallCount++;
		this.moduleReference = moduleReference;
	}
	,__class__: hex_module__$ModuleTest_MockModuleListener
};
var hex_module__$ModuleTest_MockModuleForTestingInitialisation = function() {
	this.initialisationCallCount = 0;
	hex_module_Module.call(this);
};
$hxClasses["hex.module._ModuleTest.MockModuleForTestingInitialisation"] = hex_module__$ModuleTest_MockModuleForTestingInitialisation;
hex_module__$ModuleTest_MockModuleForTestingInitialisation.__name__ = ["hex","module","_ModuleTest","MockModuleForTestingInitialisation"];
hex_module__$ModuleTest_MockModuleForTestingInitialisation.__super__ = hex_module_Module;
hex_module__$ModuleTest_MockModuleForTestingInitialisation.prototype = $extend(hex_module_Module.prototype,{
	initialisationCallCount: null
	,_onInitialisation: function() {
		hex_module_Module.prototype._onInitialisation.call(this);
		this.initialisationCallCount++;
	}
	,_getRuntimeDependencies: function() {
		return new hex_module_dependency_RuntimeDependencies();
	}
	,getPrivateDispatcher: function() {
		return this._internalDispatcher;
	}
	,getPublicDispatcher: function() {
		return this._domainDispatcher;
	}
	,__class__: hex_module__$ModuleTest_MockModuleForTestingInitialisation
});
var hex_module__$ModuleTest_MockModuleForTestingRelease = function() {
	this.releaseCallCount = 0;
	hex_module_Module.call(this);
};
$hxClasses["hex.module._ModuleTest.MockModuleForTestingRelease"] = hex_module__$ModuleTest_MockModuleForTestingRelease;
hex_module__$ModuleTest_MockModuleForTestingRelease.__name__ = ["hex","module","_ModuleTest","MockModuleForTestingRelease"];
hex_module__$ModuleTest_MockModuleForTestingRelease.__super__ = hex_module_Module;
hex_module__$ModuleTest_MockModuleForTestingRelease.prototype = $extend(hex_module_Module.prototype,{
	releaseCallCount: null
	,_onRelease: function() {
		hex_module_Module.prototype._onRelease.call(this);
		this.releaseCallCount++;
	}
	,_getRuntimeDependencies: function() {
		return new hex_module_dependency_RuntimeDependencies();
	}
	,getPrivateDispatcher: function() {
		return this._internalDispatcher;
	}
	,getPublicDispatcher: function() {
		return this._domainDispatcher;
	}
	,__class__: hex_module__$ModuleTest_MockModuleForTestingRelease
});
var hex_module__$ModuleTest_MockModuleForTestingConstructor = function() {
	hex_module_Module.call(this);
	this.injector = this._injector;
	this.dispatcher = this._internalDispatcher;
	this.domainDispatcher = this._domainDispatcher;
	this.annotationProvider = this._annotationProvider;
};
$hxClasses["hex.module._ModuleTest.MockModuleForTestingConstructor"] = hex_module__$ModuleTest_MockModuleForTestingConstructor;
hex_module__$ModuleTest_MockModuleForTestingConstructor.__name__ = ["hex","module","_ModuleTest","MockModuleForTestingConstructor"];
hex_module__$ModuleTest_MockModuleForTestingConstructor.__super__ = hex_module_Module;
hex_module__$ModuleTest_MockModuleForTestingConstructor.prototype = $extend(hex_module_Module.prototype,{
	injector: null
	,dispatcher: null
	,domainDispatcher: null
	,annotationProvider: null
	,__class__: hex_module__$ModuleTest_MockModuleForTestingConstructor
});
var hex_module__$ModuleTest_MockModuleForTestingRuntimeDependencies = function() {
	hex_module_Module.call(this);
};
$hxClasses["hex.module._ModuleTest.MockModuleForTestingRuntimeDependencies"] = hex_module__$ModuleTest_MockModuleForTestingRuntimeDependencies;
hex_module__$ModuleTest_MockModuleForTestingRuntimeDependencies.__name__ = ["hex","module","_ModuleTest","MockModuleForTestingRuntimeDependencies"];
hex_module__$ModuleTest_MockModuleForTestingRuntimeDependencies.__super__ = hex_module_Module;
hex_module__$ModuleTest_MockModuleForTestingRuntimeDependencies.prototype = $extend(hex_module_Module.prototype,{
	mapServiceClass: function(serviceClass) {
		this._injector.mapToType(hex_service_IService,serviceClass);
	}
	,_getRuntimeDependencies: function() {
		var rd = new hex_module_dependency_RuntimeDependencies();
		rd.addServiceDependencies([hex_service_IService]);
		return rd;
	}
	,__class__: hex_module__$ModuleTest_MockModuleForTestingRuntimeDependencies
});
var hex_module__$ModuleTest_MockModuleForTestingStatelessConfig = function(statelessConfigClass) {
	hex_module_Module.call(this);
	this._addStatelessConfigClasses([statelessConfigClass]);
};
$hxClasses["hex.module._ModuleTest.MockModuleForTestingStatelessConfig"] = hex_module__$ModuleTest_MockModuleForTestingStatelessConfig;
hex_module__$ModuleTest_MockModuleForTestingStatelessConfig.__name__ = ["hex","module","_ModuleTest","MockModuleForTestingStatelessConfig"];
hex_module__$ModuleTest_MockModuleForTestingStatelessConfig.__super__ = hex_module_Module;
hex_module__$ModuleTest_MockModuleForTestingStatelessConfig.prototype = $extend(hex_module_Module.prototype,{
	injector: null
	,dispatcher: null
	,__class__: hex_module__$ModuleTest_MockModuleForTestingStatelessConfig
});
var hex_module__$ModuleTest_MockStatelessConfig = function() {
	hex_module__$ModuleTest_MockStatelessConfig.wasInstantiated++;
};
$hxClasses["hex.module._ModuleTest.MockStatelessConfig"] = hex_module__$ModuleTest_MockStatelessConfig;
hex_module__$ModuleTest_MockStatelessConfig.__name__ = ["hex","module","_ModuleTest","MockStatelessConfig"];
hex_module__$ModuleTest_MockStatelessConfig.__interfaces__ = [hex_config_stateless_IStatelessConfig];
hex_module__$ModuleTest_MockStatelessConfig.prototype = {
	configure: function() {
		hex_module__$ModuleTest_MockStatelessConfig.configureWasCalled++;
	}
	,__class__: hex_module__$ModuleTest_MockStatelessConfig
};
var hex_module__$ModuleTest_MockModuleForTestingStateFulConfig = function(statefulConfig) {
	hex_module_Module.call(this);
	this._addStatefulConfigs([statefulConfig]);
	this.injector = this._injector;
	this.dispatcher = this._internalDispatcher;
};
$hxClasses["hex.module._ModuleTest.MockModuleForTestingStateFulConfig"] = hex_module__$ModuleTest_MockModuleForTestingStateFulConfig;
hex_module__$ModuleTest_MockModuleForTestingStateFulConfig.__name__ = ["hex","module","_ModuleTest","MockModuleForTestingStateFulConfig"];
hex_module__$ModuleTest_MockModuleForTestingStateFulConfig.__super__ = hex_module_Module;
hex_module__$ModuleTest_MockModuleForTestingStateFulConfig.prototype = $extend(hex_module_Module.prototype,{
	injector: null
	,dispatcher: null
	,__class__: hex_module__$ModuleTest_MockModuleForTestingStateFulConfig
});
var hex_module__$ModuleTest_MockStatefulConfig = function() {
};
$hxClasses["hex.module._ModuleTest.MockStatefulConfig"] = hex_module__$ModuleTest_MockStatefulConfig;
hex_module__$ModuleTest_MockStatefulConfig.__name__ = ["hex","module","_ModuleTest","MockStatefulConfig"];
hex_module__$ModuleTest_MockStatefulConfig.__interfaces__ = [hex_config_stateful_IStatefulConfig];
hex_module__$ModuleTest_MockStatefulConfig.prototype = {
	injector: null
	,dispatcher: null
	,module: null
	,configure: function(injector,dispatcher,module) {
		this.injector = injector;
		this.dispatcher = dispatcher;
		this.module = module;
	}
	,__class__: hex_module__$ModuleTest_MockStatefulConfig
};
var hex_module__$ModuleTest_MockService = function() { };
$hxClasses["hex.module._ModuleTest.MockService"] = hex_module__$ModuleTest_MockService;
hex_module__$ModuleTest_MockService.__name__ = ["hex","module","_ModuleTest","MockService"];
hex_module__$ModuleTest_MockService.__interfaces__ = [hex_service_IService];
hex_module__$ModuleTest_MockService.prototype = {
	createConfiguration: function() {
	}
	,addHandler: function(messageType,scope,callback) {
	}
	,removeHandler: function(messageType,scope,callback) {
	}
	,getConfiguration: function() {
		return null;
	}
	,setConfiguration: function(configuration) {
	}
	,removeAllListeners: function() {
	}
	,__class__: hex_module__$ModuleTest_MockService
};
var hex_module_dependency_IRuntimeDependencies = function() { };
$hxClasses["hex.module.dependency.IRuntimeDependencies"] = hex_module_dependency_IRuntimeDependencies;
hex_module_dependency_IRuntimeDependencies.__name__ = ["hex","module","dependency","IRuntimeDependencies"];
hex_module_dependency_IRuntimeDependencies.prototype = {
	hasServiceDependencies: null
	,addServiceDependencies: null
	,getServiceDependencies: null
	,__class__: hex_module_dependency_IRuntimeDependencies
};
var hex_module_dependency_RuntimeDependencies = function() {
};
$hxClasses["hex.module.dependency.RuntimeDependencies"] = hex_module_dependency_RuntimeDependencies;
hex_module_dependency_RuntimeDependencies.__name__ = ["hex","module","dependency","RuntimeDependencies"];
hex_module_dependency_RuntimeDependencies.__interfaces__ = [hex_module_dependency_IRuntimeDependencies];
hex_module_dependency_RuntimeDependencies.prototype = {
	_serviceDependencies: null
	,addServiceDependencies: function(serviceDependencies) {
		if(this._serviceDependencies == null) this._serviceDependencies = [];
		this._serviceDependencies = this._serviceDependencies.concat(serviceDependencies);
	}
	,getServiceDependencies: function() {
		return this._serviceDependencies;
	}
	,hasServiceDependencies: function() {
		return this._serviceDependencies != null;
	}
	,__class__: hex_module_dependency_RuntimeDependencies
};
var hex_module_dependency_RuntimeDependencyChecker = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException("'RuntimeDependecyChecker' class can't be instantiated.",{ fileName : "RuntimeDependencyChecker.hx", lineNumber : 17, className : "hex.module.dependency.RuntimeDependencyChecker", methodName : "new"}));
};
$hxClasses["hex.module.dependency.RuntimeDependencyChecker"] = hex_module_dependency_RuntimeDependencyChecker;
hex_module_dependency_RuntimeDependencyChecker.__name__ = ["hex","module","dependency","RuntimeDependencyChecker"];
hex_module_dependency_RuntimeDependencyChecker.check = function(module,injector,dependencies) {
	if(dependencies.hasServiceDependencies()) {
		var serviceDependencies = dependencies.getServiceDependencies();
		var _g = 0;
		while(_g < serviceDependencies.length) {
			var dependency = serviceDependencies[_g];
			++_g;
			if(!injector.hasMapping(dependency)) throw new js__$Boot_HaxeError(new hex_module_dependency_RuntimeDependencyException("'" + Std.string(dependency) + "' class dependency is not available during '" + hex_log_Stringifier.stringify(module) + "' initialisation.",{ fileName : "RuntimeDependencyChecker.hx", lineNumber : 30, className : "hex.module.dependency.RuntimeDependencyChecker", methodName : "check"}));
		}
	}
};
hex_module_dependency_RuntimeDependencyChecker.prototype = {
	__class__: hex_module_dependency_RuntimeDependencyChecker
};
var hex_module_dependency_RuntimeDependencyException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.module.dependency.RuntimeDependencyException"] = hex_module_dependency_RuntimeDependencyException;
hex_module_dependency_RuntimeDependencyException.__name__ = ["hex","module","dependency","RuntimeDependencyException"];
hex_module_dependency_RuntimeDependencyException.__super__ = hex_error_Exception;
hex_module_dependency_RuntimeDependencyException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_module_dependency_RuntimeDependencyException
});
var hex_service_AbstractServiceTest = function() { };
$hxClasses["hex.service.AbstractServiceTest"] = hex_service_AbstractServiceTest;
hex_service_AbstractServiceTest.__name__ = ["hex","service","AbstractServiceTest"];
hex_service_AbstractServiceTest.prototype = {
	testGetConfiguration: function() {
		var configuration = new hex_service_ServiceConfiguration();
		var service = new hex_service__$AbstractServiceTest_MockServiceWithConfigurationSetter();
		hex_unittest_assertion_Assert.isNull(service.getConfiguration(),"configuration should be null by default",{ fileName : "AbstractServiceTest.hx", lineNumber : 19, className : "hex.service.AbstractServiceTest", methodName : "testGetConfiguration"});
		service.setConfiguration(configuration);
		hex_unittest_assertion_Assert.equals(configuration,service.getConfiguration(),"configuration should be retrieved from getter",{ fileName : "AbstractServiceTest.hx", lineNumber : 22, className : "hex.service.AbstractServiceTest", methodName : "testGetConfiguration"});
	}
	,testVirtualMethods: function() {
		var service = new hex_service_MockService();
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_VirtualMethodException,service,$bind(service,service.createConfiguration),[],"'createConfiguration' call should throw an exception",{ fileName : "AbstractServiceTest.hx", lineNumber : 29, className : "hex.service.AbstractServiceTest", methodName : "testVirtualMethods"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_VirtualMethodException,service,$bind(service,service.setConfiguration),[null],"'setConfiguration' call should throw an exception",{ fileName : "AbstractServiceTest.hx", lineNumber : 30, className : "hex.service.AbstractServiceTest", methodName : "testVirtualMethods"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_VirtualMethodException,service,$bind(service,service.addHandler),[null,null,null],"'addHandler' call should throw an exception",{ fileName : "AbstractServiceTest.hx", lineNumber : 31, className : "hex.service.AbstractServiceTest", methodName : "testVirtualMethods"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_VirtualMethodException,service,$bind(service,service.removeHandler),[null,null,null],"'method' removeHandler should throw an exception",{ fileName : "AbstractServiceTest.hx", lineNumber : 32, className : "hex.service.AbstractServiceTest", methodName : "testVirtualMethods"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_VirtualMethodException,service,$bind(service,service.release),[],"'method' release should throw an exception",{ fileName : "AbstractServiceTest.hx", lineNumber : 33, className : "hex.service.AbstractServiceTest", methodName : "testVirtualMethods"});
	}
	,__class__: hex_service_AbstractServiceTest
};
var hex_service_MockService = function() {
	hex_service_AbstractService.call(this);
};
$hxClasses["hex.service.MockService"] = hex_service_MockService;
hex_service_MockService.__name__ = ["hex","service","MockService"];
hex_service_MockService.__super__ = hex_service_AbstractService;
hex_service_MockService.prototype = $extend(hex_service_AbstractService.prototype,{
	__class__: hex_service_MockService
});
var hex_service__$AbstractServiceTest_MockServiceWithConfigurationSetter = function() {
	hex_service_MockService.call(this);
};
$hxClasses["hex.service._AbstractServiceTest.MockServiceWithConfigurationSetter"] = hex_service__$AbstractServiceTest_MockServiceWithConfigurationSetter;
hex_service__$AbstractServiceTest_MockServiceWithConfigurationSetter.__name__ = ["hex","service","_AbstractServiceTest","MockServiceWithConfigurationSetter"];
hex_service__$AbstractServiceTest_MockServiceWithConfigurationSetter.__super__ = hex_service_MockService;
hex_service__$AbstractServiceTest_MockServiceWithConfigurationSetter.prototype = $extend(hex_service_MockService.prototype,{
	setConfiguration: function(configuration) {
		this._configuration = configuration;
	}
	,__class__: hex_service__$AbstractServiceTest_MockServiceWithConfigurationSetter
});
var hex_service_IURLConfigurable = function() { };
$hxClasses["hex.service.IURLConfigurable"] = hex_service_IURLConfigurable;
hex_service_IURLConfigurable.__name__ = ["hex","service","IURLConfigurable"];
hex_service_IURLConfigurable.prototype = {
	setURL: null
	,__class__: hex_service_IURLConfigurable
};
var hex_service_ServiceConfiguration = function(timeout) {
	if(timeout == null) timeout = 5000;
	this.serviceTimeout = timeout;
};
$hxClasses["hex.service.ServiceConfiguration"] = hex_service_ServiceConfiguration;
hex_service_ServiceConfiguration.__name__ = ["hex","service","ServiceConfiguration"];
hex_service_ServiceConfiguration.prototype = {
	serviceTimeout: null
	,__class__: hex_service_ServiceConfiguration
};
var hex_service_ServiceConfigurationTest = function() { };
$hxClasses["hex.service.ServiceConfigurationTest"] = hex_service_ServiceConfigurationTest;
hex_service_ServiceConfigurationTest.__name__ = ["hex","service","ServiceConfigurationTest"];
hex_service_ServiceConfigurationTest.prototype = {
	testDefaultServiceTimeout: function() {
		var serviceConfiguration = new hex_service_ServiceConfiguration();
		hex_unittest_assertion_Assert.equals(5000,serviceConfiguration.serviceTimeout,"'serviceTimeout' property value should be 5000 by default",{ fileName : "ServiceConfigurationTest.hx", lineNumber : 17, className : "hex.service.ServiceConfigurationTest", methodName : "testDefaultServiceTimeout"});
	}
	,testServiceTimeout: function() {
		var serviceTimeout = 400;
		var serviceConfiguration = new hex_service_ServiceConfiguration(serviceTimeout);
		hex_unittest_assertion_Assert.equals(serviceTimeout,serviceConfiguration.serviceTimeout,"'serviceTimeout' property should be the same passed to constructor",{ fileName : "ServiceConfigurationTest.hx", lineNumber : 26, className : "hex.service.ServiceConfigurationTest", methodName : "testServiceTimeout"});
	}
	,__class__: hex_service_ServiceConfigurationTest
};
var hex_service_ServiceServiceSuite = function() {
	this.list = [hex_service_monitor_MVCMonitorSuite,hex_service_stateless_MVCStatelessServiceSuite,hex_service_stateful_MVCStatefulServiceSuite,hex_service_AbstractServiceTest,hex_service_ServiceConfigurationTest,hex_service_ServiceURLConfigurationTest];
};
$hxClasses["hex.service.ServiceServiceSuite"] = hex_service_ServiceServiceSuite;
hex_service_ServiceServiceSuite.__name__ = ["hex","service","ServiceServiceSuite"];
hex_service_ServiceServiceSuite.prototype = {
	list: null
	,__class__: hex_service_ServiceServiceSuite
};
var hex_service_ServiceURLConfiguration = function(url,timeout) {
	if(timeout == null) timeout = 5000;
	hex_service_ServiceConfiguration.call(this,timeout);
	this.serviceUrl = url;
};
$hxClasses["hex.service.ServiceURLConfiguration"] = hex_service_ServiceURLConfiguration;
hex_service_ServiceURLConfiguration.__name__ = ["hex","service","ServiceURLConfiguration"];
hex_service_ServiceURLConfiguration.__super__ = hex_service_ServiceConfiguration;
hex_service_ServiceURLConfiguration.prototype = $extend(hex_service_ServiceConfiguration.prototype,{
	serviceUrl: null
	,__class__: hex_service_ServiceURLConfiguration
});
var hex_service_ServiceURLConfigurationTest = function() { };
$hxClasses["hex.service.ServiceURLConfigurationTest"] = hex_service_ServiceURLConfigurationTest;
hex_service_ServiceURLConfigurationTest.__name__ = ["hex","service","ServiceURLConfigurationTest"];
hex_service_ServiceURLConfigurationTest.__super__ = hex_service_ServiceConfigurationTest;
hex_service_ServiceURLConfigurationTest.prototype = $extend(hex_service_ServiceConfigurationTest.prototype,{
	testServiceURL: function() {
		var serviceUrl = "url";
		var serviceConfiguration = new hex_service_ServiceURLConfiguration(serviceUrl);
		hex_unittest_assertion_Assert.equals(serviceUrl,serviceConfiguration.serviceUrl,"'serviceURL' property should be the same passed to constructor",{ fileName : "ServiceURLConfigurationTest.hx", lineNumber : 19, className : "hex.service.ServiceURLConfigurationTest", methodName : "testServiceURL"});
	}
	,__class__: hex_service_ServiceURLConfigurationTest
});
var hex_service_monitor_IServiceMonitor = function() { };
$hxClasses["hex.service.monitor.IServiceMonitor"] = hex_service_monitor_IServiceMonitor;
hex_service_monitor_IServiceMonitor.__name__ = ["hex","service","monitor","IServiceMonitor"];
hex_service_monitor_IServiceMonitor.prototype = {
	getStrategy: null
	,mapStrategy: null
	,__class__: hex_service_monitor_IServiceMonitor
};
var hex_service_monitor_BasicServiceMonitor = function() {
	hex_service_stateful_StatefulService.call(this);
	this._map = new hex_collection_HashMap();
};
$hxClasses["hex.service.monitor.BasicServiceMonitor"] = hex_service_monitor_BasicServiceMonitor;
hex_service_monitor_BasicServiceMonitor.__name__ = ["hex","service","monitor","BasicServiceMonitor"];
hex_service_monitor_BasicServiceMonitor.__interfaces__ = [hex_service_monitor_IServiceMonitor];
hex_service_monitor_BasicServiceMonitor.__super__ = hex_service_stateful_StatefulService;
hex_service_monitor_BasicServiceMonitor.prototype = $extend(hex_service_stateful_StatefulService.prototype,{
	_map: null
	,createConfiguration: function() {
	}
	,getStrategy: function(service) {
		var serviceClasses = hex_util_ClassUtil.getInheritanceChainFrom(service);
		var _g = 0;
		while(_g < serviceClasses.length) {
			var serviceClass = serviceClasses[_g];
			++_g;
			if(this._map.containsKey(serviceClass)) return this._map.get(serviceClass);
		}
		return null;
	}
	,mapStrategy: function(serviceClass,strategy) {
		if(!this._map.containsKey(serviceClass)) {
			this._map.put(serviceClass,strategy);
			return true;
		}
		throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("mapStrategy failed with '" + hex_log_Stringifier.stringify(serviceClass) + "'. this class was already mapped.",{ fileName : "BasicServiceMonitor.hx", lineNumber : 53, className : "hex.service.monitor.BasicServiceMonitor", methodName : "mapStrategy"}));
	}
	,_handleFatalError: function(service,error) {
		this._compositeDispatcher.dispatch(hex_service_monitor_ServiceMonitorMessage.FATAL,[new hex_service_monitor_ServiceMonitorMessage(service,error)]);
	}
	,__class__: hex_service_monitor_BasicServiceMonitor
});
var hex_service_monitor_IServiceErrorStrategy = function() { };
$hxClasses["hex.service.monitor.IServiceErrorStrategy"] = hex_service_monitor_IServiceErrorStrategy;
hex_service_monitor_IServiceErrorStrategy.__name__ = ["hex","service","monitor","IServiceErrorStrategy"];
hex_service_monitor_IServiceErrorStrategy.prototype = {
	retry: null
	,handleError: null
	,__class__: hex_service_monitor_IServiceErrorStrategy
};
var hex_service_monitor_MVCMonitorSuite = function() {
	this.list = [hex_service_monitor_http_BasicHTTPServiceErrorStrategyTest];
};
$hxClasses["hex.service.monitor.MVCMonitorSuite"] = hex_service_monitor_MVCMonitorSuite;
hex_service_monitor_MVCMonitorSuite.__name__ = ["hex","service","monitor","MVCMonitorSuite"];
hex_service_monitor_MVCMonitorSuite.prototype = {
	list: null
	,__class__: hex_service_monitor_MVCMonitorSuite
};
var hex_service_monitor_ServiceMonitorMessage = function(service,error) {
	this.service = service;
	this.error = error;
};
$hxClasses["hex.service.monitor.ServiceMonitorMessage"] = hex_service_monitor_ServiceMonitorMessage;
hex_service_monitor_ServiceMonitorMessage.__name__ = ["hex","service","monitor","ServiceMonitorMessage"];
hex_service_monitor_ServiceMonitorMessage.prototype = {
	service: null
	,error: null
	,__class__: hex_service_monitor_ServiceMonitorMessage
};
var hex_service_stateless_IAsyncStatelessService = function() { };
$hxClasses["hex.service.stateless.IAsyncStatelessService"] = hex_service_stateless_IAsyncStatelessService;
hex_service_stateless_IAsyncStatelessService.__name__ = ["hex","service","stateless","IAsyncStatelessService"];
hex_service_stateless_IAsyncStatelessService.__interfaces__ = [hex_service_stateless_IStatelessService];
hex_service_stateless_IAsyncStatelessService.prototype = {
	get_timeoutDuration: null
	,set_timeoutDuration: null
	,__class__: hex_service_stateless_IAsyncStatelessService
	,__properties__: {set_timeoutDuration:"set_timeoutDuration",get_timeoutDuration:"get_timeoutDuration"}
};
var hex_service_stateless_AsyncStatelessService = function() {
	hex_service_stateless_StatelessService.call(this);
	this._timeoutDuration = 100;
};
$hxClasses["hex.service.stateless.AsyncStatelessService"] = hex_service_stateless_AsyncStatelessService;
hex_service_stateless_AsyncStatelessService.__name__ = ["hex","service","stateless","AsyncStatelessService"];
hex_service_stateless_AsyncStatelessService.__interfaces__ = [hex_service_stateless_IAsyncStatelessService];
hex_service_stateless_AsyncStatelessService._isServiceDetained = function(service) {
	return hex_service_stateless_AsyncStatelessService._POOL.containsKey(service);
};
hex_service_stateless_AsyncStatelessService._detainService = function(service) {
	hex_service_stateless_AsyncStatelessService._POOL.put(service,true);
};
hex_service_stateless_AsyncStatelessService._releaseService = function(service) {
	if(hex_service_stateless_AsyncStatelessService._POOL.containsKey(service)) hex_service_stateless_AsyncStatelessService._POOL.remove(service);
};
hex_service_stateless_AsyncStatelessService.__super__ = hex_service_stateless_StatelessService;
hex_service_stateless_AsyncStatelessService.prototype = $extend(hex_service_stateless_StatelessService.prototype,{
	_timer: null
	,_timeoutDuration: null
	,call: function() {
		hex_service_stateless_StatelessService.prototype.call.call(this);
		this._startTimer();
		hex_service_stateless_AsyncStatelessService._detainService(this);
	}
	,setConfiguration: function(configuration) {
		hex_service_stateless_StatelessService.prototype.setConfiguration.call(this,configuration);
		this.set_timeoutDuration(this._configuration.serviceTimeout);
	}
	,hasTimeout: null
	,get_hasTimeout: function() {
		return this._status == "HAS_TIMEOUT";
	}
	,timeoutDuration: null
	,get_timeoutDuration: function() {
		return this._timeoutDuration;
	}
	,set_timeoutDuration: function(duration) {
		this.get_wasUsed() && this._throwIllegalStateError("timeoutDuration value can't be changed after service call");
		this._timeoutDuration = duration;
		if(this._configuration != null) this._configuration.serviceTimeout = this._timeoutDuration;
		return this._timeoutDuration;
	}
	,_reset: function() {
		if(this._timer != null) this._timer.stop();
		hex_service_stateless_StatelessService.prototype._reset.call(this);
	}
	,_onTimeoutHandler: function() {
		if(this._timer != null) this._timer.stop();
		this._ed.dispatch(hex_service_stateless_AsyncStatelessServiceMessage.TIMEOUT,[this]);
		this._status = "HAS_TIMEOUT";
	}
	,_startTimer: function() {
		if(_$UInt_UInt_$Impl_$.gt(this.get_timeoutDuration(),0)) {
			this._timer = new haxe_Timer(this._timeoutDuration);
			this._timer.run = $bind(this,this._onTimeoutHandler);
		} else this._onTimeoutHandler();
	}
	,_release: function() {
		if(this._timer != null) this._timer.stop();
		hex_service_stateless_StatelessService.prototype._release.call(this);
		hex_service_stateless_AsyncStatelessService._releaseService(this);
	}
	,__class__: hex_service_stateless_AsyncStatelessService
	,__properties__: $extend(hex_service_stateless_StatelessService.prototype.__properties__,{set_timeoutDuration:"set_timeoutDuration",get_timeoutDuration:"get_timeoutDuration",get_hasTimeout:"get_hasTimeout"})
});
var hex_service_stateless_http_IHTTPService = function() { };
$hxClasses["hex.service.stateless.http.IHTTPService"] = hex_service_stateless_http_IHTTPService;
hex_service_stateless_http_IHTTPService.__name__ = ["hex","service","stateless","http","IHTTPService"];
hex_service_stateless_http_IHTTPService.__interfaces__ = [hex_service_stateless_IAsyncStatelessService];
hex_service_stateless_http_IHTTPService.prototype = {
	get_url: null
	,get_method: null
	,get_dataFormat: null
	,get_timeout: null
	,url: null
	,method: null
	,dataFormat: null
	,timeout: null
	,addHeader: null
	,addHTTPServiceListener: null
	,removeHTTPServiceListener: null
	,__class__: hex_service_stateless_http_IHTTPService
	,__properties__: {get_timeout:"get_timeout",get_dataFormat:"get_dataFormat",get_method:"get_method",get_url:"get_url"}
};
var hex_service_stateless_http_HTTPService = function() {
	hex_service_stateless_AsyncStatelessService.call(this);
};
$hxClasses["hex.service.stateless.http.HTTPService"] = hex_service_stateless_http_HTTPService;
hex_service_stateless_http_HTTPService.__name__ = ["hex","service","stateless","http","HTTPService"];
hex_service_stateless_http_HTTPService.__interfaces__ = [hex_core_IAnnotationParsable,hex_service_IURLConfigurable,hex_service_stateless_http_IHTTPService];
hex_service_stateless_http_HTTPService.__super__ = hex_service_stateless_AsyncStatelessService;
hex_service_stateless_http_HTTPService.prototype = $extend(hex_service_stateless_AsyncStatelessService.prototype,{
	_request: null
	,_excludedParameters: null
	,_timestamp: null
	,call: function() {
		this._timestamp = new Date().getTime();
		if(this._configuration == null || this._configuration.serviceUrl == null) {
			this._status = "IS_RUNNING";
			this._onException(new hex_error_NullPointerException("_createRequest call failed. ServiceConfiguration.serviceUrl shouldn't be null @" + hex_log_Stringifier.stringify(this),{ fileName : "HTTPService.hx", lineNumber : 32, className : "hex.service.stateless.http.HTTPService", methodName : "call"}));
			return;
		}
		this._createRequest();
		hex_service_stateless_AsyncStatelessService.prototype.call.call(this);
		this._request.request(this._configuration.requestMethod == "POST");
	}
	,_createRequest: function() {
		this._request = new haxe_Http(this._configuration.serviceUrl);
		this._configuration.parameterFactory.setParameters(this._request,this._configuration.parameters,this._excludedParameters);
		this.set_timeoutDuration(this._configuration.serviceTimeout);
		this._request.async = true;
		this._request.onData = $bind(this,this._onData);
		this._request.onError = $bind(this,this._onError);
		this._request.onStatus = $bind(this,this._onStatus);
		var requestHeaders = this._configuration.requestHeaders;
		if(requestHeaders != null) {
			var _g = 0;
			while(_g < requestHeaders.length) {
				var header = requestHeaders[_g];
				++_g;
				this._request.addHeader(header.name,header.value);
			}
		}
	}
	,setExcludedParameters: function(excludedParameters) {
		this._excludedParameters = excludedParameters;
	}
	,url: null
	,get_url: function() {
		return this._configuration.serviceUrl;
	}
	,method: null
	,get_method: function() {
		return this._configuration.requestMethod;
	}
	,dataFormat: null
	,get_dataFormat: function() {
		return this._configuration.dataFormat;
	}
	,timeout: null
	,get_timeout: function() {
		return this._configuration.serviceTimeout;
	}
	,release: function() {
		if(this._request != null) {
			if(this._status == "WAS_NEVER_USED") this._request.cancel();
		}
		hex_service_stateless_AsyncStatelessService.prototype.release.call(this);
	}
	,setParameters: function(parameters) {
		this._configuration.parameters = parameters;
	}
	,getParameters: function() {
		return this._configuration.parameters;
	}
	,addHeader: function(header) {
		this._configuration.requestHeaders.push(header);
	}
	,_getRemoteArguments: function() {
		this._createRequest();
		return [this._request];
	}
	,_onData: function(result) {
		this._onResultHandler(result);
	}
	,_onError: function(msg) {
		this._onException(new hex_error_Exception(msg,{ fileName : "HTTPService.hx", lineNumber : 139, className : "hex.service.stateless.http.HTTPService", methodName : "_onError"}));
	}
	,_onStatus: function(status) {
	}
	,setURL: function(url) {
		this._configuration.serviceUrl = url;
	}
	,addHTTPServiceListener: function(listener) {
		this._ed.addHandler(hex_service_stateless_StatelessServiceMessage.COMPLETE,listener,$bind(listener,listener.onServiceComplete));
		this._ed.addHandler(hex_service_stateless_StatelessServiceMessage.FAIL,listener,$bind(listener,listener.onServiceFail));
		this._ed.addHandler(hex_service_stateless_StatelessServiceMessage.CANCEL,listener,$bind(listener,listener.onServiceCancel));
		this._ed.addHandler(hex_service_stateless_AsyncStatelessServiceMessage.TIMEOUT,listener,$bind(listener,listener.onServiceTimeout));
	}
	,removeHTTPServiceListener: function(listener) {
		this._ed.removeHandler(hex_service_stateless_StatelessServiceMessage.COMPLETE,listener,$bind(listener,listener.onServiceComplete));
		this._ed.removeHandler(hex_service_stateless_StatelessServiceMessage.FAIL,listener,$bind(listener,listener.onServiceFail));
		this._ed.removeHandler(hex_service_stateless_StatelessServiceMessage.CANCEL,listener,$bind(listener,listener.onServiceCancel));
		this._ed.removeHandler(hex_service_stateless_AsyncStatelessServiceMessage.TIMEOUT,listener,$bind(listener,listener.onServiceTimeout));
	}
	,__class__: hex_service_stateless_http_HTTPService
	,__properties__: $extend(hex_service_stateless_AsyncStatelessService.prototype.__properties__,{get_timeout:"get_timeout",get_dataFormat:"get_dataFormat",get_method:"get_method",get_url:"get_url"})
});
var hex_service_monitor_http_AnotherMockHTTPService = function() {
	hex_service_stateless_http_HTTPService.call(this);
};
$hxClasses["hex.service.monitor.http.AnotherMockHTTPService"] = hex_service_monitor_http_AnotherMockHTTPService;
hex_service_monitor_http_AnotherMockHTTPService.__name__ = ["hex","service","monitor","http","AnotherMockHTTPService"];
hex_service_monitor_http_AnotherMockHTTPService.__super__ = hex_service_stateless_http_HTTPService;
hex_service_monitor_http_AnotherMockHTTPService.prototype = $extend(hex_service_stateless_http_HTTPService.prototype,{
	serviceMonitor: null
	,_onError: function(msg) {
		var e = new hex_service_monitor_http_MockHTTPServiceException(msg,{ fileName : "AnotherMockHTTPService.hx", lineNumber : 27, className : "hex.service.monitor.http.AnotherMockHTTPService", methodName : "_onError"});
		if(this.serviceMonitor.getStrategy(this).handleError(this,e)) {
			this._reset();
			this.serviceMonitor.getStrategy(this).retry(this);
		} else hex_service_monitor_http_AnotherMockHTTPService.errorThrown = e;
	}
	,call: function() {
		try {
			hex_service_monitor_http_AnotherMockHTTPService.serviceCallCount++;
			hex_service_stateless_http_HTTPService.prototype.call.call(this);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,hex_error_Exception) ) {
				if(this.serviceMonitor.getStrategy(this).handleError(this,new hex_service_monitor_http_MockHTTPServiceException(e.message,{ fileName : "AnotherMockHTTPService.hx", lineNumber : 52, className : "hex.service.monitor.http.AnotherMockHTTPService", methodName : "call"}))) this.serviceMonitor.getStrategy(this).retry(this); else hex_service_monitor_http_AnotherMockHTTPService.errorThrown = e;
			} else throw(e);
		}
	}
	,__class__: hex_service_monitor_http_AnotherMockHTTPService
});
var hex_service_stateless_http_IHTTPServiceErrorHelperListener = function() { };
$hxClasses["hex.service.stateless.http.IHTTPServiceErrorHelperListener"] = hex_service_stateless_http_IHTTPServiceErrorHelperListener;
hex_service_stateless_http_IHTTPServiceErrorHelperListener.__name__ = ["hex","service","stateless","http","IHTTPServiceErrorHelperListener"];
hex_service_stateless_http_IHTTPServiceErrorHelperListener.prototype = {
	onReleaseHelper: null
	,__class__: hex_service_stateless_http_IHTTPServiceErrorHelperListener
};
var hex_service_monitor_http_BasicHTTPServiceErrorStrategy = function(retryMaxCount,timeout) {
	if(timeout == null) timeout = 1000;
	if(retryMaxCount == null) retryMaxCount = 3;
	this._timeout = timeout;
	this._retryMaxCount = retryMaxCount;
	this._services = new hex_collection_HashMap();
};
$hxClasses["hex.service.monitor.http.BasicHTTPServiceErrorStrategy"] = hex_service_monitor_http_BasicHTTPServiceErrorStrategy;
hex_service_monitor_http_BasicHTTPServiceErrorStrategy.__name__ = ["hex","service","monitor","http","BasicHTTPServiceErrorStrategy"];
hex_service_monitor_http_BasicHTTPServiceErrorStrategy.__interfaces__ = [hex_service_stateless_http_IHTTPServiceErrorHelperListener,hex_service_monitor_IServiceErrorStrategy];
hex_service_monitor_http_BasicHTTPServiceErrorStrategy.prototype = {
	_timeout: null
	,_retryMaxCount: null
	,_services: null
	,handleError: function(service,error) {
		return this._getHelper(service).canRetry();
	}
	,retry: function(service) {
		this._getHelper(service).retry();
	}
	,onReleaseHelper: function(service) {
		if(this._services.containsKey(service)) this._services.remove(service);
	}
	,_getHelper: function(service) {
		var helper = null;
		if(this._services.containsKey(service)) helper = this._services.get(service); else {
			helper = new hex_service_stateless_http_HTTPServiceErrorHelper(service,this._retryMaxCount,this._timeout);
			helper.addListener(this);
			this._services.put(service,helper);
		}
		return helper;
	}
	,__class__: hex_service_monitor_http_BasicHTTPServiceErrorStrategy
};
var hex_service_monitor_http_BasicHTTPServiceErrorStrategyTest = function() { };
$hxClasses["hex.service.monitor.http.BasicHTTPServiceErrorStrategyTest"] = hex_service_monitor_http_BasicHTTPServiceErrorStrategyTest;
hex_service_monitor_http_BasicHTTPServiceErrorStrategyTest.__name__ = ["hex","service","monitor","http","BasicHTTPServiceErrorStrategyTest"];
hex_service_monitor_http_BasicHTTPServiceErrorStrategyTest.prototype = {
	testStrategyRetry: function() {
		if(typeof(window) != "undefined") {
			var serviceMonitor = new hex_service_monitor_BasicServiceMonitor();
			serviceMonitor.mapStrategy(hex_service_monitor_http_MockHTTPService,new hex_service_monitor_http_BasicHTTPServiceErrorStrategy(3,100));
			var injector = new hex_di_Injector();
			injector.mapToValue(hex_service_monitor_IServiceMonitor,serviceMonitor);
			injector.mapToType(hex_service_monitor_http_MockHTTPService,hex_service_monitor_http_MockHTTPService);
			hex_service_monitor_http_MockHTTPService.serviceCallCount = 0;
			hex_service_monitor_http_MockHTTPService.errorThrown = null;
			var service = injector.getOrCreateNewInstance(hex_service_monitor_http_MockHTTPService);
			service.call();
			haxe_Timer.delay(hex_unittest_runner_MethodRunner.asyncHandler($bind(this,this._onCompleteTestStrategyRetry)),400);
		} else haxe_Timer.delay(hex_unittest_runner_MethodRunner.asyncHandler($bind(this,this._bypassTest)),10);
	}
	,_bypassTest: function() {
	}
	,_onCompleteTestStrategyRetry: function() {
		hex_unittest_assertion_Assert.equals(4,hex_service_monitor_http_MockHTTPService.serviceCallCount,"service should have been called 3 times. One normal and 3 retry calls",{ fileName : "BasicHTTPServiceErrorStrategyTest.hx", lineNumber : 61, className : "hex.service.monitor.http.BasicHTTPServiceErrorStrategyTest", methodName : "_onCompleteTestStrategyRetry"});
		hex_unittest_assertion_Assert.isInstanceOf(hex_service_monitor_http_MockHTTPService.errorThrown,hex_error_NullPointerException,"Error thrown after retries should be an instance of 'NullPointerException'",{ fileName : "BasicHTTPServiceErrorStrategyTest.hx", lineNumber : 62, className : "hex.service.monitor.http.BasicHTTPServiceErrorStrategyTest", methodName : "_onCompleteTestStrategyRetry"});
	}
	,testTwoStrategyRetryAtTheSameTime: function() {
		if(typeof(window) != "undefined") {
			var serviceMonitor = new hex_service_monitor_BasicServiceMonitor();
			serviceMonitor.mapStrategy(hex_service_monitor_http_MockHTTPService,new hex_service_monitor_http_BasicHTTPServiceErrorStrategy(3,100));
			serviceMonitor.mapStrategy(hex_service_monitor_http_AnotherMockHTTPService,new hex_service_monitor_http_BasicHTTPServiceErrorStrategy(6,50));
			var injector = new hex_di_Injector();
			injector.mapToValue(hex_service_monitor_IServiceMonitor,serviceMonitor);
			injector.mapToType(hex_service_monitor_http_MockHTTPService,hex_service_monitor_http_MockHTTPService);
			injector.mapToType(hex_service_monitor_http_AnotherMockHTTPService,hex_service_monitor_http_AnotherMockHTTPService);
			hex_service_monitor_http_MockHTTPService.serviceCallCount = 0;
			hex_service_monitor_http_MockHTTPService.errorThrown = null;
			hex_service_monitor_http_AnotherMockHTTPService.serviceCallCount = 0;
			hex_service_monitor_http_AnotherMockHTTPService.errorThrown = null;
			var service = injector.getOrCreateNewInstance(hex_service_monitor_http_MockHTTPService);
			var anotherService = injector.getOrCreateNewInstance(hex_service_monitor_http_AnotherMockHTTPService);
			service.call();
			anotherService.call();
			haxe_Timer.delay(hex_unittest_runner_MethodRunner.asyncHandler($bind(this,this._onCompleteTestTwoStrategyRetryAtTheSameTime)),500);
		} else haxe_Timer.delay(hex_unittest_runner_MethodRunner.asyncHandler($bind(this,this._bypassTest)),10);
	}
	,_onCompleteTestTwoStrategyRetryAtTheSameTime: function() {
		hex_unittest_assertion_Assert.equals(4,hex_service_monitor_http_MockHTTPService.serviceCallCount,"service should have been called 3 times. One normal and 3 retry calls",{ fileName : "BasicHTTPServiceErrorStrategyTest.hx", lineNumber : 106, className : "hex.service.monitor.http.BasicHTTPServiceErrorStrategyTest", methodName : "_onCompleteTestTwoStrategyRetryAtTheSameTime"});
		hex_unittest_assertion_Assert.isInstanceOf(hex_service_monitor_http_MockHTTPService.errorThrown,hex_error_NullPointerException,"Error thrown after retries should be an instance of 'NullPointerException'",{ fileName : "BasicHTTPServiceErrorStrategyTest.hx", lineNumber : 107, className : "hex.service.monitor.http.BasicHTTPServiceErrorStrategyTest", methodName : "_onCompleteTestTwoStrategyRetryAtTheSameTime"});
		hex_unittest_assertion_Assert.equals(7,hex_service_monitor_http_AnotherMockHTTPService.serviceCallCount,"service should have been called 7 times. One normal and 6 retry calls",{ fileName : "BasicHTTPServiceErrorStrategyTest.hx", lineNumber : 109, className : "hex.service.monitor.http.BasicHTTPServiceErrorStrategyTest", methodName : "_onCompleteTestTwoStrategyRetryAtTheSameTime"});
		hex_unittest_assertion_Assert.isInstanceOf(hex_service_monitor_http_AnotherMockHTTPService.errorThrown,hex_error_NullPointerException,"Error thrown after retries should be an instance of 'NullPointerException'",{ fileName : "BasicHTTPServiceErrorStrategyTest.hx", lineNumber : 110, className : "hex.service.monitor.http.BasicHTTPServiceErrorStrategyTest", methodName : "_onCompleteTestTwoStrategyRetryAtTheSameTime"});
	}
	,__class__: hex_service_monitor_http_BasicHTTPServiceErrorStrategyTest
};
var hex_service_monitor_http_MockHTTPService = function() {
	hex_service_stateless_http_HTTPService.call(this);
};
$hxClasses["hex.service.monitor.http.MockHTTPService"] = hex_service_monitor_http_MockHTTPService;
hex_service_monitor_http_MockHTTPService.__name__ = ["hex","service","monitor","http","MockHTTPService"];
hex_service_monitor_http_MockHTTPService.__super__ = hex_service_stateless_http_HTTPService;
hex_service_monitor_http_MockHTTPService.prototype = $extend(hex_service_stateless_http_HTTPService.prototype,{
	serviceMonitor: null
	,_onError: function(msg) {
		var e = new hex_service_monitor_http_MockHTTPServiceException(msg,{ fileName : "MockHTTPService.hx", lineNumber : 28, className : "hex.service.monitor.http.MockHTTPService", methodName : "_onError"});
		if(this.serviceMonitor.getStrategy(this).handleError(this,e)) {
			this._reset();
			this.serviceMonitor.getStrategy(this).retry(this);
		} else hex_service_monitor_http_MockHTTPService.errorThrown = e;
	}
	,call: function() {
		try {
			hex_service_monitor_http_MockHTTPService.serviceCallCount++;
			hex_service_stateless_http_HTTPService.prototype.call.call(this);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,hex_error_Exception) ) {
				if(this.serviceMonitor.getStrategy(this).handleError(this,new hex_service_monitor_http_MockHTTPServiceException(e.message,{ fileName : "MockHTTPService.hx", lineNumber : 53, className : "hex.service.monitor.http.MockHTTPService", methodName : "call"}))) this.serviceMonitor.getStrategy(this).retry(this); else hex_service_monitor_http_MockHTTPService.errorThrown = e;
			} else throw(e);
		}
	}
	,__class__: hex_service_monitor_http_MockHTTPService
});
var hex_service_monitor_http_MockHTTPServiceException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.service.monitor.http.MockHTTPServiceException"] = hex_service_monitor_http_MockHTTPServiceException;
hex_service_monitor_http_MockHTTPServiceException.__name__ = ["hex","service","monitor","http","MockHTTPServiceException"];
hex_service_monitor_http_MockHTTPServiceException.__super__ = hex_error_Exception;
hex_service_monitor_http_MockHTTPServiceException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_service_monitor_http_MockHTTPServiceException
});
var hex_service_stateful_MVCStatefulServiceSuite = function() {
	this.list = [hex_service_stateful_StatefulServiceTest];
};
$hxClasses["hex.service.stateful.MVCStatefulServiceSuite"] = hex_service_stateful_MVCStatefulServiceSuite;
hex_service_stateful_MVCStatefulServiceSuite.__name__ = ["hex","service","stateful","MVCStatefulServiceSuite"];
hex_service_stateful_MVCStatefulServiceSuite.prototype = {
	list: null
	,__class__: hex_service_stateful_MVCStatefulServiceSuite
};
var hex_service_stateful_StatefulServiceTest = function() { };
$hxClasses["hex.service.stateful.StatefulServiceTest"] = hex_service_stateful_StatefulServiceTest;
hex_service_stateful_StatefulServiceTest.__name__ = ["hex","service","stateful","StatefulServiceTest"];
hex_service_stateful_StatefulServiceTest.prototype = {
	service: null
	,setUp: function() {
		this.service = new hex_service_stateful__$StatefulServiceTest_MockStatefulService();
	}
	,tearDown: function() {
		this.service = null;
	}
	,testSetConfiguration: function() {
		var dummyConfig = new hex_service_ServiceConfiguration();
		this.service.setConfiguration(dummyConfig);
		hex_unittest_assertion_Assert.equals(dummyConfig,this.service.getConfiguration(),"setted configuration should be returned",{ fileName : "StatefulServiceTest.hx", lineNumber : 35, className : "hex.service.stateful.StatefulServiceTest", methodName : "testSetConfiguration"});
		this.service.run();
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.setConfiguration)),[dummyConfig],"StatefulService should throw IllegalStateException when calling setConfiguration when in use",{ fileName : "StatefulServiceTest.hx", lineNumber : 38, className : "hex.service.stateful.StatefulServiceTest", methodName : "testSetConfiguration"});
		this.service.stop();
		hex_unittest_assertion_Assert.equals(dummyConfig,this.service.getConfiguration(),"should be able to call setConfiguration after _release called",{ fileName : "StatefulServiceTest.hx", lineNumber : 42, className : "hex.service.stateful.StatefulServiceTest", methodName : "testSetConfiguration"});
	}
	,testLockAndRelease: function() {
		hex_unittest_assertion_Assert.isFalse(this.service.inUse(),"the inUse property should be false by default",{ fileName : "StatefulServiceTest.hx", lineNumber : 48, className : "hex.service.stateful.StatefulServiceTest", methodName : "testLockAndRelease"});
		this.service.run();
		hex_unittest_assertion_Assert.isTrue(this.service.inUse(),"the inUse property should be true after _lock called",{ fileName : "StatefulServiceTest.hx", lineNumber : 52, className : "hex.service.stateful.StatefulServiceTest", methodName : "testLockAndRelease"});
		this.service.stop();
		hex_unittest_assertion_Assert.isFalse(this.service.inUse(),"the inUse property should be false after _release called",{ fileName : "StatefulServiceTest.hx", lineNumber : 56, className : "hex.service.stateful.StatefulServiceTest", methodName : "testLockAndRelease"});
	}
	,testAddAndRemoveHandler: function() {
		var listener = new hex_service_stateful__$StatefulServiceTest_MockAsyncEventListener();
		this.service.addHandler(hex_service_stateful__$StatefulServiceTest_MockMessage.ON_SAMPLE,listener,$bind(listener,listener.onAddHandlerSuccess));
		this.service.getDispatcher().dispatch(hex_service_stateful__$StatefulServiceTest_MockMessage.ON_SAMPLE,["test"]);
		hex_unittest_assertion_Assert.equals(1,listener.addHandlerSuccessCount,"dispatch should happen after call dispatchEvent on service",{ fileName : "StatefulServiceTest.hx", lineNumber : 67, className : "hex.service.stateful.StatefulServiceTest", methodName : "testAddAndRemoveHandler"});
		hex_unittest_assertion_Assert.equals("test",listener.lastDataReceived,"dispatched event should be equal to the imput",{ fileName : "StatefulServiceTest.hx", lineNumber : 68, className : "hex.service.stateful.StatefulServiceTest", methodName : "testAddAndRemoveHandler"});
		this.service.removeHandler(hex_service_stateful__$StatefulServiceTest_MockMessage.ON_SAMPLE,listener,$bind(listener,listener.onAddHandlerSuccess));
		this.service.getDispatcher().dispatch(hex_service_stateful__$StatefulServiceTest_MockMessage.ON_SAMPLE,["test"]);
		hex_unittest_assertion_Assert.equals(1,listener.addHandlerSuccessCount,"dispatch should not happen after call removeHandler",{ fileName : "StatefulServiceTest.hx", lineNumber : 73, className : "hex.service.stateful.StatefulServiceTest", methodName : "testAddAndRemoveHandler"});
	}
	,testRemoveAllListeners: function() {
		var listener = new hex_service_stateful__$StatefulServiceTest_MockAsyncEventListener();
		this.service.addHandler(hex_service_stateful__$StatefulServiceTest_MockMessage.ON_SAMPLE,listener,$bind(listener,listener.onAddHandlerSuccess));
		this.service.getDispatcher().dispatch(hex_service_stateful__$StatefulServiceTest_MockMessage.ON_SAMPLE,["test"]);
		hex_unittest_assertion_Assert.equals(1,listener.addHandlerSuccessCount,"dispatch should happen after call dispatchEvent on service",{ fileName : "StatefulServiceTest.hx", lineNumber : 84, className : "hex.service.stateful.StatefulServiceTest", methodName : "testRemoveAllListeners"});
		hex_unittest_assertion_Assert.equals("test",listener.lastDataReceived,"dispatched event should be equal to the imput",{ fileName : "StatefulServiceTest.hx", lineNumber : 85, className : "hex.service.stateful.StatefulServiceTest", methodName : "testRemoveAllListeners"});
		this.service.removeAllListeners();
		this.service.getDispatcher().dispatch(hex_service_stateful__$StatefulServiceTest_MockMessage.ON_SAMPLE,["test"]);
		hex_unittest_assertion_Assert.equals(1,listener.addHandlerSuccessCount,"dispatch should not happen after call removeAllListeners",{ fileName : "StatefulServiceTest.hx", lineNumber : 90, className : "hex.service.stateful.StatefulServiceTest", methodName : "testRemoveAllListeners"});
	}
	,__class__: hex_service_stateful_StatefulServiceTest
};
var hex_service_stateful__$StatefulServiceTest_MockStatefulService = function() {
	hex_service_stateful_StatefulService.call(this);
};
$hxClasses["hex.service.stateful._StatefulServiceTest.MockStatefulService"] = hex_service_stateful__$StatefulServiceTest_MockStatefulService;
hex_service_stateful__$StatefulServiceTest_MockStatefulService.__name__ = ["hex","service","stateful","_StatefulServiceTest","MockStatefulService"];
hex_service_stateful__$StatefulServiceTest_MockStatefulService.__super__ = hex_service_stateful_StatefulService;
hex_service_stateful__$StatefulServiceTest_MockStatefulService.prototype = $extend(hex_service_stateful_StatefulService.prototype,{
	run: function() {
		this._lock();
	}
	,stop: function() {
		this._release();
	}
	,__class__: hex_service_stateful__$StatefulServiceTest_MockStatefulService
});
var hex_service_stateful__$StatefulServiceTest_MockMessage = function() {
};
$hxClasses["hex.service.stateful._StatefulServiceTest.MockMessage"] = hex_service_stateful__$StatefulServiceTest_MockMessage;
hex_service_stateful__$StatefulServiceTest_MockMessage.__name__ = ["hex","service","stateful","_StatefulServiceTest","MockMessage"];
hex_service_stateful__$StatefulServiceTest_MockMessage.prototype = {
	__class__: hex_service_stateful__$StatefulServiceTest_MockMessage
};
var hex_service_stateful__$StatefulServiceTest_MockAsyncEventListener = function() {
	this.addHandlerSuccessCount = 0;
};
$hxClasses["hex.service.stateful._StatefulServiceTest.MockAsyncEventListener"] = hex_service_stateful__$StatefulServiceTest_MockAsyncEventListener;
hex_service_stateful__$StatefulServiceTest_MockAsyncEventListener.__name__ = ["hex","service","stateful","_StatefulServiceTest","MockAsyncEventListener"];
hex_service_stateful__$StatefulServiceTest_MockAsyncEventListener.prototype = {
	lastDataReceived: null
	,addHandlerSuccessCount: null
	,onAddHandlerSuccess: function(data) {
		this.lastDataReceived = data;
		this.addHandlerSuccessCount++;
	}
	,__class__: hex_service_stateful__$StatefulServiceTest_MockAsyncEventListener
};
var hex_service_stateless_AsyncStatelessServiceMessage = function() {
};
$hxClasses["hex.service.stateless.AsyncStatelessServiceMessage"] = hex_service_stateless_AsyncStatelessServiceMessage;
hex_service_stateless_AsyncStatelessServiceMessage.__name__ = ["hex","service","stateless","AsyncStatelessServiceMessage"];
hex_service_stateless_AsyncStatelessServiceMessage.prototype = {
	__class__: hex_service_stateless_AsyncStatelessServiceMessage
};
var hex_service_stateless_AsyncStatelessServiceTest = function() { };
$hxClasses["hex.service.stateless.AsyncStatelessServiceTest"] = hex_service_stateless_AsyncStatelessServiceTest;
hex_service_stateless_AsyncStatelessServiceTest.__name__ = ["hex","service","stateless","AsyncStatelessServiceTest"];
hex_service_stateless_AsyncStatelessServiceTest.prototype = {
	service: null
	,setUp: function() {
		this.service = new hex_service_stateless_MockAsyncStatelessService();
	}
	,tearDown: function() {
		this.service.release();
		this.service = null;
	}
	,testResult: function() {
		this.service.testSetResult("result");
		hex_unittest_assertion_Assert.equals("result",this.service.getResult(),"result getter should provide result setted value",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 35, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testResult"});
	}
	,testResultWithParser: function() {
		this.service.setParser(new hex_service_stateless__$AsyncStatelessServiceTest_MockParser());
		this.service.testSetResult(5);
		hex_unittest_assertion_Assert.equals(6,this.service.getResult(),"result getter should provide result parsed value",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 43, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testResultWithParser"});
	}
	,testConfigurationAccessors: function() {
		var configuration = new hex_service_ServiceConfiguration();
		hex_unittest_assertion_Assert.isNull(this.service.getConfiguration(),"configuration should be null by default",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 51, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testConfigurationAccessors"});
		this.service.setConfiguration(configuration);
		hex_unittest_assertion_Assert.equals(configuration,this.service.getConfiguration(),"configuration should be retrieved from getter",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 54, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testConfigurationAccessors"});
		hex_unittest_assertion_Assert.equals(5000,this.service.getConfiguration().serviceTimeout,"'serviceTimeout' value should be 5000",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 55, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testConfigurationAccessors"});
		this.service.set_timeoutDuration(100);
		hex_unittest_assertion_Assert.equals(100,this.service.getConfiguration().serviceTimeout,"'serviceTimeout' value should be 100",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 58, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testConfigurationAccessors"});
	}
	,testTimeoutDurationAccessors: function() {
		hex_unittest_assertion_Assert.equals(100,this.service.get_timeoutDuration(),"'serviceTimeout' value should be 100",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 64, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testTimeoutDurationAccessors"});
		this.service.set_timeoutDuration(200);
		hex_unittest_assertion_Assert.equals(200,this.service.get_timeoutDuration(),"'serviceTimeout' value should be 200",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 66, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testTimeoutDurationAccessors"});
		this.service.call();
		hex_unittest_assertion_Assert.setPropertyThrows(hex_error_IllegalStateException,this.service,"timeoutDuration",40,"'timeoutDuration' call should throw IllegalStateException",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 70, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testTimeoutDurationAccessors"});
	}
	,testCall: function() {
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 77, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 78, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 79, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 80, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 81, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 82, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
		this.service.call();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 86, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_isRunning(),"'isRunning' should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 87, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 88, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 89, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 90, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 91, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.call)),[],"service called twice should throw IllegalStateException",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 93, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testCall"});
	}
	,testRelease: function() {
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 99, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 100, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 101, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 102, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 103, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 104, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
		this.service.release();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 108, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 109, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 110, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_isCancelled(),"'isCancelled' should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 111, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 112, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 113, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.call)),[],"service should throw IllegalStateException when called after release",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 115, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testRelease"});
	}
	,testHandleCancel: function() {
		var handler = new hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener();
		var anotherHandler = new hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener();
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.CANCEL,handler,$bind(handler,handler.onServiceCancel));
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 126, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 127, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 128, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 129, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 130, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 131, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		this.service.handleCancel();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 135, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 136, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 137, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_isCancelled(),"'isCancelled' should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 138, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 139, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 140, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_isCancelled(),"'isCancelled' property should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 142, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.handleCancel)),[],"StatelessService should throw IllegalStateException when calling cancel twice",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 143, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.equals(1,handler.onServiceCancelCallCount,"'handler' callback should be triggered once",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 145, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.equals(this.service,handler.lastServiceReceived,"Service received by handler should be AsyncStatelessService instance",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 147, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.CANCEL,anotherHandler,$bind(anotherHandler,anotherHandler.onServiceCancel));
		hex_unittest_assertion_Assert.equals(0,anotherHandler.onServiceCancelCallCount,"'post-handler' callback should not be triggered",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 151, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleCancel"});
	}
	,testHandleComplete: function() {
		var handler = new hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener();
		var anotherHandler = new hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener();
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.COMPLETE,handler,$bind(handler,handler.onServiceComplete));
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 162, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 163, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 164, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 165, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 166, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 167, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		this.service.handleComplete();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 171, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 172, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_hasCompleted(),"'hasCompleted' property should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 173, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 174, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 175, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 176, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.handleComplete)),[],"StatelessService should throw IllegalStateException when calling cancel twice",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 178, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.equals(1,handler.onServiceCompleteCallCount,"'handler' callback should be triggered once",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 180, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.equals(this.service,handler.lastServiceReceived,"Service received by handler should be AsyncStatelessService instance",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 182, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.COMPLETE,anotherHandler,$bind(anotherHandler,anotherHandler.onServiceComplete));
		hex_unittest_assertion_Assert.equals(0,anotherHandler.onServiceCompleteCallCount,"'post-handler' callback should not be triggered",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 186, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleComplete"});
	}
	,testHandleFail: function() {
		var handler = new hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener();
		var anotherHandler = new hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener();
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.FAIL,handler,$bind(handler,handler.onServiceFail));
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 197, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 198, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 199, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 200, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 201, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 202, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		this.service.handleFail();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 206, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 207, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 208, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 209, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_hasFailed(),"'hasFailed' property should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 210, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 211, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.handleFail)),[],"StatelessService should throw IllegalStateException when calling cancel twice",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 213, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.equals(1,handler.onServiceFailCallCount,"'handler' callback should be triggered once",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 215, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.equals(this.service,handler.lastServiceReceived,"Service received by handler should be AsyncStatelessService instance",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 217, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.FAIL,anotherHandler,$bind(anotherHandler,anotherHandler.onServiceFail));
		hex_unittest_assertion_Assert.equals(0,anotherHandler.onServiceFailCallCount,"'post-handler' callback should not be triggered",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 221, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testHandleFail"});
	}
	,testTimeout: function() {
		var handler = new hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener();
		var anotherHandler = new hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener();
		this.service.addHandler(hex_service_stateless_AsyncStatelessServiceMessage.TIMEOUT,handler,$bind(handler,handler.onServiceTimeout));
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' property should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 232, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testTimeout"});
		this.service.set_timeoutDuration(0);
		this.service.call();
		hex_unittest_assertion_Assert.isTrue(this.service.get_hasTimeout(),"'hasTimeout' property should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 235, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testTimeout"});
		hex_unittest_assertion_Assert.equals(1,handler.onServiceTimeoutCallCount,"'handler' callback should be triggered once",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 237, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testTimeout"});
		hex_unittest_assertion_Assert.equals(this.service,handler.lastServiceReceived,"Service received by handler should be AsyncStatelessService instance",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 239, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testTimeout"});
		this.service.addHandler(hex_service_stateless_AsyncStatelessServiceMessage.TIMEOUT,anotherHandler,$bind(anotherHandler,anotherHandler.onServiceTimeout));
		hex_unittest_assertion_Assert.equals(0,anotherHandler.onServiceTimeoutCallCount,"'post-handler' callback should not be triggered",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 243, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "testTimeout"});
	}
	,test_getRemoteArgumentsCall: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_UnsupportedOperationException,this.service,($_=this.service,$bind($_,$_.call_getRemoteArguments)),[],"'_getRemoteArguments' call should throw an exception",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 249, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "test_getRemoteArgumentsCall"});
	}
	,test_resetCall: function() {
		this.service.call();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 257, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_isRunning(),"'isRunning' should return true",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 258, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 259, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 260, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 261, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "test_resetCall"});
		this.service.call_reset();
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 265, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 266, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 267, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 268, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "AsyncStatelessServiceTest.hx", lineNumber : 269, className : "hex.service.stateless.AsyncStatelessServiceTest", methodName : "test_resetCall"});
	}
	,__class__: hex_service_stateless_AsyncStatelessServiceTest
};
var hex_service_stateless__$AsyncStatelessServiceTest_MockParser = function() {
};
$hxClasses["hex.service.stateless._AsyncStatelessServiceTest.MockParser"] = hex_service_stateless__$AsyncStatelessServiceTest_MockParser;
hex_service_stateless__$AsyncStatelessServiceTest_MockParser.__name__ = ["hex","service","stateless","_AsyncStatelessServiceTest","MockParser"];
hex_service_stateless__$AsyncStatelessServiceTest_MockParser.__interfaces__ = [hex_data_IParser];
hex_service_stateless__$AsyncStatelessServiceTest_MockParser.prototype = {
	parse: function(serializedContent,target) {
		return serializedContent + 1;
	}
	,__class__: hex_service_stateless__$AsyncStatelessServiceTest_MockParser
};
var hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener = function() {
	this.onServiceTimeoutCallCount = 0;
	this.onServiceCancelCallCount = 0;
	this.onServiceFailCallCount = 0;
	this.onServiceCompleteCallCount = 0;
};
$hxClasses["hex.service.stateless._AsyncStatelessServiceTest.MockStatelessServiceListener"] = hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener;
hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener.__name__ = ["hex","service","stateless","_AsyncStatelessServiceTest","MockStatelessServiceListener"];
hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener.prototype = {
	lastMessageTypeReceived: null
	,lastServiceReceived: null
	,onServiceCompleteCallCount: null
	,onServiceFailCallCount: null
	,onServiceCancelCallCount: null
	,onServiceTimeoutCallCount: null
	,onServiceComplete: function(service) {
		this.lastServiceReceived = service;
		this.onServiceCompleteCallCount++;
	}
	,onServiceFail: function(service) {
		this.lastServiceReceived = service;
		this.onServiceFailCallCount++;
	}
	,onServiceCancel: function(service) {
		this.lastServiceReceived = service;
		this.onServiceCancelCallCount++;
	}
	,onServiceTimeout: function(service) {
		this.lastServiceReceived = service;
		this.onServiceTimeoutCallCount++;
	}
	,handleMessage: function(messageType,service) {
		this.lastMessageTypeReceived = messageType;
		this.lastServiceReceived = service;
	}
	,__class__: hex_service_stateless__$AsyncStatelessServiceTest_MockStatelessServiceListener
};
var hex_service_stateless_MVCStatelessServiceSuite = function() {
	this.list = [hex_service_stateless_AsyncStatelessServiceTest,hex_service_stateless_http_HTTPSuite,hex_service_stateless_StatelessServiceTest];
};
$hxClasses["hex.service.stateless.MVCStatelessServiceSuite"] = hex_service_stateless_MVCStatelessServiceSuite;
hex_service_stateless_MVCStatelessServiceSuite.__name__ = ["hex","service","stateless","MVCStatelessServiceSuite"];
hex_service_stateless_MVCStatelessServiceSuite.prototype = {
	list: null
	,__class__: hex_service_stateless_MVCStatelessServiceSuite
};
var hex_service_stateless_MockAsyncStatelessService = function() {
	hex_service_stateless_AsyncStatelessService.call(this);
};
$hxClasses["hex.service.stateless.MockAsyncStatelessService"] = hex_service_stateless_MockAsyncStatelessService;
hex_service_stateless_MockAsyncStatelessService.__name__ = ["hex","service","stateless","MockAsyncStatelessService"];
hex_service_stateless_MockAsyncStatelessService.__super__ = hex_service_stateless_AsyncStatelessService;
hex_service_stateless_MockAsyncStatelessService.prototype = $extend(hex_service_stateless_AsyncStatelessService.prototype,{
	call_getRemoteArguments: function() {
		return this._getRemoteArguments();
	}
	,call_reset: function() {
		this._reset();
	}
	,testSetResult: function(result) {
		this._setResult(result);
	}
	,__class__: hex_service_stateless_MockAsyncStatelessService
});
var hex_service_stateless_MockStatelessService = function() {
	hex_service_stateless_StatelessService.call(this);
};
$hxClasses["hex.service.stateless.MockStatelessService"] = hex_service_stateless_MockStatelessService;
hex_service_stateless_MockStatelessService.__name__ = ["hex","service","stateless","MockStatelessService"];
hex_service_stateless_MockStatelessService.__super__ = hex_service_stateless_StatelessService;
hex_service_stateless_MockStatelessService.prototype = $extend(hex_service_stateless_StatelessService.prototype,{
	call_getRemoteArguments: function() {
		return this._getRemoteArguments();
	}
	,call_reset: function() {
		this._reset();
	}
	,testSetResult: function(result) {
		this._setResult(result);
	}
	,__class__: hex_service_stateless_MockStatelessService
});
var hex_service_stateless_StatelessServiceMessage = function() {
};
$hxClasses["hex.service.stateless.StatelessServiceMessage"] = hex_service_stateless_StatelessServiceMessage;
hex_service_stateless_StatelessServiceMessage.__name__ = ["hex","service","stateless","StatelessServiceMessage"];
hex_service_stateless_StatelessServiceMessage.prototype = {
	__class__: hex_service_stateless_StatelessServiceMessage
};
var hex_service_stateless_StatelessServiceTest = function() { };
$hxClasses["hex.service.stateless.StatelessServiceTest"] = hex_service_stateless_StatelessServiceTest;
hex_service_stateless_StatelessServiceTest.__name__ = ["hex","service","stateless","StatelessServiceTest"];
hex_service_stateless_StatelessServiceTest.prototype = {
	service: null
	,setUp: function() {
		this.service = new hex_service_stateless_MockStatelessService();
	}
	,tearDown: function() {
		this.service = null;
	}
	,testGetConfiguration: function() {
		var configuration = new hex_service_ServiceConfiguration();
		hex_unittest_assertion_Assert.isNull(this.service.getConfiguration(),"configuration should be null by default",{ fileName : "StatelessServiceTest.hx", lineNumber : 35, className : "hex.service.stateless.StatelessServiceTest", methodName : "testGetConfiguration"});
		this.service.setConfiguration(configuration);
		hex_unittest_assertion_Assert.equals(configuration,this.service.getConfiguration(),"configuration should be retrieved from getter",{ fileName : "StatelessServiceTest.hx", lineNumber : 38, className : "hex.service.stateless.StatelessServiceTest", methodName : "testGetConfiguration"});
	}
	,testResult: function() {
		this.service.testSetResult("result");
		hex_unittest_assertion_Assert.equals("result",this.service.getResult(),"result getter should provide result setted value",{ fileName : "StatelessServiceTest.hx", lineNumber : 45, className : "hex.service.stateless.StatelessServiceTest", methodName : "testResult"});
	}
	,testResultWithParser: function() {
		this.service.setParser(new hex_service_stateless__$StatelessServiceTest_MockParser());
		this.service.testSetResult(5);
		hex_unittest_assertion_Assert.equals(6,this.service.getResult(),"result getter should provide result parsed value",{ fileName : "StatelessServiceTest.hx", lineNumber : 53, className : "hex.service.stateless.StatelessServiceTest", methodName : "testResultWithParser"});
	}
	,testCall: function() {
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 59, className : "hex.service.stateless.StatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 60, className : "hex.service.stateless.StatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 61, className : "hex.service.stateless.StatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 62, className : "hex.service.stateless.StatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 63, className : "hex.service.stateless.StatelessServiceTest", methodName : "testCall"});
		this.service.call();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "StatelessServiceTest.hx", lineNumber : 66, className : "hex.service.stateless.StatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_isRunning(),"'isRunning' should return true",{ fileName : "StatelessServiceTest.hx", lineNumber : 67, className : "hex.service.stateless.StatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 68, className : "hex.service.stateless.StatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 69, className : "hex.service.stateless.StatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 70, className : "hex.service.stateless.StatelessServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.call)),[],"service called twice should throw IllegalStateException",{ fileName : "StatelessServiceTest.hx", lineNumber : 72, className : "hex.service.stateless.StatelessServiceTest", methodName : "testCall"});
	}
	,testRelease: function() {
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 78, className : "hex.service.stateless.StatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 79, className : "hex.service.stateless.StatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 80, className : "hex.service.stateless.StatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 81, className : "hex.service.stateless.StatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 82, className : "hex.service.stateless.StatelessServiceTest", methodName : "testRelease"});
		this.service.release();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 86, className : "hex.service.stateless.StatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 87, className : "hex.service.stateless.StatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 88, className : "hex.service.stateless.StatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_isCancelled(),"'isCancelled' should return true",{ fileName : "StatelessServiceTest.hx", lineNumber : 89, className : "hex.service.stateless.StatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 90, className : "hex.service.stateless.StatelessServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.call)),[],"service should throw IllegalStateException when called after release",{ fileName : "StatelessServiceTest.hx", lineNumber : 92, className : "hex.service.stateless.StatelessServiceTest", methodName : "testRelease"});
	}
	,testHandleCancel: function() {
		var handler = new hex_service_stateless__$StatelessServiceTest_MockStatelessServiceListener();
		var anotherHandler = new hex_service_stateless__$StatelessServiceTest_MockStatelessServiceListener();
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.CANCEL,handler,$bind(handler,handler.onServiceCancel));
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 103, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 104, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 105, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 106, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 107, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		this.service.handleCancel();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "StatelessServiceTest.hx", lineNumber : 111, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 112, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 113, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_isCancelled(),"'isCancelled' should return true",{ fileName : "StatelessServiceTest.hx", lineNumber : 114, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 115, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.handleCancel)),[],"StatelessService should throw IllegalStateException when calling cancel twice",{ fileName : "StatelessServiceTest.hx", lineNumber : 117, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.equals(1,handler.onServiceCancelCallCount,"'handler' callback should be triggered once",{ fileName : "StatelessServiceTest.hx", lineNumber : 119, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.equals(this.service,handler.lastServiceReceived,"Service' received by handler should be StatelessService instance",{ fileName : "StatelessServiceTest.hx", lineNumber : 121, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.CANCEL,anotherHandler,$bind(anotherHandler,anotherHandler.onServiceCancel));
		hex_unittest_assertion_Assert.equals(0,anotherHandler.onServiceCancelCallCount,"'post-handler' callback should not be triggered",{ fileName : "StatelessServiceTest.hx", lineNumber : 125, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleCancel"});
	}
	,testHandleComplete: function() {
		var handler = new hex_service_stateless__$StatelessServiceTest_MockStatelessServiceListener();
		var anotherHandler = new hex_service_stateless__$StatelessServiceTest_MockStatelessServiceListener();
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.COMPLETE,handler,$bind(handler,handler.onServiceComplete));
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 136, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 137, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 138, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 139, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 140, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		this.service.handleComplete();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "StatelessServiceTest.hx", lineNumber : 144, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 145, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_hasCompleted(),"'hasCompleted' property should return true",{ fileName : "StatelessServiceTest.hx", lineNumber : 146, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 147, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 148, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.handleComplete)),[],"StatelessService should throw IllegalStateException when calling cancel twice",{ fileName : "StatelessServiceTest.hx", lineNumber : 150, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.equals(1,handler.onServiceCompleteCallCount,"'handler' callback should be triggered once",{ fileName : "StatelessServiceTest.hx", lineNumber : 152, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.equals(this.service,handler.lastServiceReceived,"Service received by handler should be StatelessService instance",{ fileName : "StatelessServiceTest.hx", lineNumber : 154, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.COMPLETE,anotherHandler,$bind(anotherHandler,anotherHandler.onServiceComplete));
		hex_unittest_assertion_Assert.equals(0,anotherHandler.onServiceCompleteCallCount,"'post-handler' callback should not be triggered",{ fileName : "StatelessServiceTest.hx", lineNumber : 158, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleComplete"});
	}
	,testHandleFail: function() {
		var handler = new hex_service_stateless__$StatelessServiceTest_MockStatelessServiceListener();
		var anotherHandler = new hex_service_stateless__$StatelessServiceTest_MockStatelessServiceListener();
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.FAIL,handler,$bind(handler,handler.onServiceFail));
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 169, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 170, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 171, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 172, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 173, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		this.service.handleFail();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "StatelessServiceTest.hx", lineNumber : 177, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 178, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 179, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 180, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_hasFailed(),"'hasFailed' property should return true",{ fileName : "StatelessServiceTest.hx", lineNumber : 181, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.handleFail)),[],"StatelessService should throw IllegalStateException when calling cancel twice",{ fileName : "StatelessServiceTest.hx", lineNumber : 183, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.equals(1,handler.onServiceFailCallCount,"'handler' callback should be triggered once",{ fileName : "StatelessServiceTest.hx", lineNumber : 185, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.equals(this.service,handler.lastServiceReceived,"Service received by handler should be StatelessService instance",{ fileName : "StatelessServiceTest.hx", lineNumber : 187, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.FAIL,anotherHandler,$bind(anotherHandler,anotherHandler.onServiceFail));
		hex_unittest_assertion_Assert.equals(0,anotherHandler.onServiceFailCallCount,"'post-handler' callback should not be triggered",{ fileName : "StatelessServiceTest.hx", lineNumber : 191, className : "hex.service.stateless.StatelessServiceTest", methodName : "testHandleFail"});
	}
	,test_getRemoteArgumentsCall: function() {
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_UnsupportedOperationException,this.service,($_=this.service,$bind($_,$_.call_getRemoteArguments)),[],"'_getRemoteArguments' call should throw an exception",{ fileName : "StatelessServiceTest.hx", lineNumber : 197, className : "hex.service.stateless.StatelessServiceTest", methodName : "test_getRemoteArgumentsCall"});
	}
	,test_resetCall: function() {
		this.service.call();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "StatelessServiceTest.hx", lineNumber : 205, className : "hex.service.stateless.StatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_isRunning(),"'isRunning' should return true",{ fileName : "StatelessServiceTest.hx", lineNumber : 206, className : "hex.service.stateless.StatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 207, className : "hex.service.stateless.StatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 208, className : "hex.service.stateless.StatelessServiceTest", methodName : "test_resetCall"});
		this.service.call_reset();
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 212, className : "hex.service.stateless.StatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 213, className : "hex.service.stateless.StatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 214, className : "hex.service.stateless.StatelessServiceTest", methodName : "test_resetCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "StatelessServiceTest.hx", lineNumber : 215, className : "hex.service.stateless.StatelessServiceTest", methodName : "test_resetCall"});
	}
	,__class__: hex_service_stateless_StatelessServiceTest
};
var hex_service_stateless__$StatelessServiceTest_MockParser = function() {
};
$hxClasses["hex.service.stateless._StatelessServiceTest.MockParser"] = hex_service_stateless__$StatelessServiceTest_MockParser;
hex_service_stateless__$StatelessServiceTest_MockParser.__name__ = ["hex","service","stateless","_StatelessServiceTest","MockParser"];
hex_service_stateless__$StatelessServiceTest_MockParser.__interfaces__ = [hex_data_IParser];
hex_service_stateless__$StatelessServiceTest_MockParser.prototype = {
	parse: function(serializedContent,target) {
		return serializedContent + 1;
	}
	,__class__: hex_service_stateless__$StatelessServiceTest_MockParser
};
var hex_service_stateless__$StatelessServiceTest_MockStatelessServiceListener = function() {
	this.onServiceCancelCallCount = 0;
	this.onServiceFailCallCount = 0;
	this.onServiceCompleteCallCount = 0;
};
$hxClasses["hex.service.stateless._StatelessServiceTest.MockStatelessServiceListener"] = hex_service_stateless__$StatelessServiceTest_MockStatelessServiceListener;
hex_service_stateless__$StatelessServiceTest_MockStatelessServiceListener.__name__ = ["hex","service","stateless","_StatelessServiceTest","MockStatelessServiceListener"];
hex_service_stateless__$StatelessServiceTest_MockStatelessServiceListener.prototype = {
	lastMessageTypeReceived: null
	,lastServiceReceived: null
	,onServiceCompleteCallCount: null
	,onServiceFailCallCount: null
	,onServiceCancelCallCount: null
	,onServiceComplete: function(service) {
		this.lastServiceReceived = service;
		this.onServiceCompleteCallCount++;
	}
	,onServiceFail: function(service) {
		this.lastServiceReceived = service;
		this.onServiceFailCallCount++;
	}
	,onServiceCancel: function(service) {
		this.lastServiceReceived = service;
		this.onServiceCancelCallCount++;
	}
	,handleMessage: function(messageType,service) {
		this.lastMessageTypeReceived = messageType;
		this.lastServiceReceived = service;
	}
	,__class__: hex_service_stateless__$StatelessServiceTest_MockStatelessServiceListener
};
var hex_service_stateless_http_IHTTPServiceParameterFactory = function() { };
$hxClasses["hex.service.stateless.http.IHTTPServiceParameterFactory"] = hex_service_stateless_http_IHTTPServiceParameterFactory;
hex_service_stateless_http_IHTTPServiceParameterFactory.__name__ = ["hex","service","stateless","http","IHTTPServiceParameterFactory"];
hex_service_stateless_http_IHTTPServiceParameterFactory.prototype = {
	setParameters: null
	,__class__: hex_service_stateless_http_IHTTPServiceParameterFactory
};
var hex_service_stateless_http_DefaultHTTPServiceParameterFactory = function() {
};
$hxClasses["hex.service.stateless.http.DefaultHTTPServiceParameterFactory"] = hex_service_stateless_http_DefaultHTTPServiceParameterFactory;
hex_service_stateless_http_DefaultHTTPServiceParameterFactory.__name__ = ["hex","service","stateless","http","DefaultHTTPServiceParameterFactory"];
hex_service_stateless_http_DefaultHTTPServiceParameterFactory.__interfaces__ = [hex_service_stateless_http_IHTTPServiceParameterFactory];
hex_service_stateless_http_DefaultHTTPServiceParameterFactory.prototype = {
	setParameters: function(httpRequest,parameters,excludedParameters) {
		var fieldList = Type.getInstanceFields(parameters == null?null:js_Boot.getClass(parameters));
		var fieldListLength = fieldList.length;
		var parameter;
		var property;
		var _g = 0;
		while(_g < fieldListLength) {
			var i = _g++;
			parameter = fieldList[i];
			property = Reflect.getProperty(parameters,parameter);
			if(!Reflect.isFunction(property) && (excludedParameters == null || HxOverrides.indexOf(excludedParameters,parameter,0) == -1)) httpRequest.addParameter(parameter,property == null?"":property);
		}
		return httpRequest;
	}
	,__class__: hex_service_stateless_http_DefaultHTTPServiceParameterFactory
};
var hex_service_stateless_http_DefaultHTTPServiceParameterFactoryTest = function() { };
$hxClasses["hex.service.stateless.http.DefaultHTTPServiceParameterFactoryTest"] = hex_service_stateless_http_DefaultHTTPServiceParameterFactoryTest;
hex_service_stateless_http_DefaultHTTPServiceParameterFactoryTest.__name__ = ["hex","service","stateless","http","DefaultHTTPServiceParameterFactoryTest"];
hex_service_stateless_http_DefaultHTTPServiceParameterFactoryTest.prototype = {
	factory: null
	,setUp: function() {
		this.factory = new hex_service_stateless_http_DefaultHTTPServiceParameterFactory();
	}
	,tearDown: function() {
		this.factory = null;
	}
	,testSetParameters: function() {
		var request = new hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttp("http://google.com");
		var params = new hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttpParameters();
		this.factory.setParameters(request,params);
		hex_unittest_assertion_Assert.equals("green",request.paramMap.get("apple"),"the request should contain the apple param",{ fileName : "DefaultHTTPServiceParameterFactoryTest.hx", lineNumber : 35, className : "hex.service.stateless.http.DefaultHTTPServiceParameterFactoryTest", methodName : "testSetParameters"});
		hex_unittest_assertion_Assert.equals("mundo",request.paramMap.get("hola"),"the request should contain the hola param",{ fileName : "DefaultHTTPServiceParameterFactoryTest.hx", lineNumber : 36, className : "hex.service.stateless.http.DefaultHTTPServiceParameterFactoryTest", methodName : "testSetParameters"});
	}
	,testSetParameters_withExludedParams: function() {
		var request = new hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttp("http://google.com");
		var params = new hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttpParameters();
		this.factory.setParameters(request,params,["apple"]);
		hex_unittest_assertion_Assert.equals(null,request.paramMap.get("apple"),"the request should NOT contain the apple param",{ fileName : "DefaultHTTPServiceParameterFactoryTest.hx", lineNumber : 46, className : "hex.service.stateless.http.DefaultHTTPServiceParameterFactoryTest", methodName : "testSetParameters_withExludedParams"});
		hex_unittest_assertion_Assert.equals("mundo",request.paramMap.get("hola"),"the request should contain the hola param",{ fileName : "DefaultHTTPServiceParameterFactoryTest.hx", lineNumber : 47, className : "hex.service.stateless.http.DefaultHTTPServiceParameterFactoryTest", methodName : "testSetParameters_withExludedParams"});
	}
	,testSetParameters_withNullParam: function() {
		var request = new hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttp("http://google.com");
		var params = new hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttpParameters();
		params.hola = null;
		this.factory.setParameters(request,params);
		hex_unittest_assertion_Assert.equals("green",request.paramMap.get("apple"),"the request should contain the apple param",{ fileName : "DefaultHTTPServiceParameterFactoryTest.hx", lineNumber : 58, className : "hex.service.stateless.http.DefaultHTTPServiceParameterFactoryTest", methodName : "testSetParameters_withNullParam"});
		hex_unittest_assertion_Assert.equals("",request.paramMap.get("hola"),"the request should contain nullProp as empty string",{ fileName : "DefaultHTTPServiceParameterFactoryTest.hx", lineNumber : 59, className : "hex.service.stateless.http.DefaultHTTPServiceParameterFactoryTest", methodName : "testSetParameters_withNullParam"});
	}
	,__class__: hex_service_stateless_http_DefaultHTTPServiceParameterFactoryTest
};
var hex_service_stateless_http_HTTPServiceParameters = function() {
};
$hxClasses["hex.service.stateless.http.HTTPServiceParameters"] = hex_service_stateless_http_HTTPServiceParameters;
hex_service_stateless_http_HTTPServiceParameters.__name__ = ["hex","service","stateless","http","HTTPServiceParameters"];
hex_service_stateless_http_HTTPServiceParameters.prototype = {
	__class__: hex_service_stateless_http_HTTPServiceParameters
};
var hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttpParameters = function() {
	this.hola = "mundo";
	this.apple = "green";
	hex_service_stateless_http_HTTPServiceParameters.call(this);
};
$hxClasses["hex.service.stateless.http._DefaultHTTPServiceParameterFactoryTest.MockHttpParameters"] = hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttpParameters;
hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttpParameters.__name__ = ["hex","service","stateless","http","_DefaultHTTPServiceParameterFactoryTest","MockHttpParameters"];
hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttpParameters.__super__ = hex_service_stateless_http_HTTPServiceParameters;
hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttpParameters.prototype = $extend(hex_service_stateless_http_HTTPServiceParameters.prototype,{
	apple: null
	,hola: null
	,__class__: hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttpParameters
});
var hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttp = function(url) {
	this.paramMap = new haxe_ds_StringMap();
	haxe_Http.call(this,url);
};
$hxClasses["hex.service.stateless.http._DefaultHTTPServiceParameterFactoryTest.MockHttp"] = hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttp;
hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttp.__name__ = ["hex","service","stateless","http","_DefaultHTTPServiceParameterFactoryTest","MockHttp"];
hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttp.__super__ = haxe_Http;
hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttp.prototype = $extend(haxe_Http.prototype,{
	paramMap: null
	,addParameter: function(param,value) {
		var result = haxe_Http.prototype.setParameter.call(this,param,value);
		this.paramMap.set(param,value);
		return result;
	}
	,__class__: hex_service_stateless_http__$DefaultHTTPServiceParameterFactoryTest_MockHttp
});
var hex_service_stateless_http_HTTPRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["hex.service.stateless.http.HTTPRequestHeader"] = hex_service_stateless_http_HTTPRequestHeader;
hex_service_stateless_http_HTTPRequestHeader.__name__ = ["hex","service","stateless","http","HTTPRequestHeader"];
hex_service_stateless_http_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: hex_service_stateless_http_HTTPRequestHeader
};
var hex_service_stateless_http_HTTPServiceConfiguration = function(url,method,dataFormat,timeout) {
	if(timeout == null) timeout = 5000;
	if(dataFormat == null) dataFormat = "text";
	if(method == null) method = "GET";
	hex_service_ServiceURLConfiguration.call(this,url,timeout);
	this.requestMethod = method;
	this.dataFormat = dataFormat;
	this.parameters = new hex_service_stateless_http_HTTPServiceParameters();
	this.requestHeaders = [];
	this.parameterFactory = new hex_service_stateless_http_DefaultHTTPServiceParameterFactory();
};
$hxClasses["hex.service.stateless.http.HTTPServiceConfiguration"] = hex_service_stateless_http_HTTPServiceConfiguration;
hex_service_stateless_http_HTTPServiceConfiguration.__name__ = ["hex","service","stateless","http","HTTPServiceConfiguration"];
hex_service_stateless_http_HTTPServiceConfiguration.__super__ = hex_service_ServiceURLConfiguration;
hex_service_stateless_http_HTTPServiceConfiguration.prototype = $extend(hex_service_ServiceURLConfiguration.prototype,{
	requestMethod: null
	,dataFormat: null
	,parameters: null
	,requestHeaders: null
	,parameterFactory: null
	,__class__: hex_service_stateless_http_HTTPServiceConfiguration
});
var hex_service_stateless_http_HTTPServiceErrorHelper = function(service,retryMaxCount,timeout) {
	if(timeout == null) timeout = 5000;
	if(retryMaxCount == null) retryMaxCount = 3;
	this._dispatcher = new hex_service_stateless_http_HTTPServiceErrorHelperDispatcher();
	this._service = service;
	this._timeout = timeout;
	this._retryMaxCount = retryMaxCount;
	this._retryCount = 0;
};
$hxClasses["hex.service.stateless.http.HTTPServiceErrorHelper"] = hex_service_stateless_http_HTTPServiceErrorHelper;
hex_service_stateless_http_HTTPServiceErrorHelper.__name__ = ["hex","service","stateless","http","HTTPServiceErrorHelper"];
hex_service_stateless_http_HTTPServiceErrorHelper.prototype = {
	_dispatcher: null
	,_service: null
	,_timer: null
	,_timeout: null
	,_retryCount: null
	,_retryMaxCount: null
	,addListener: function(listener) {
		return this._dispatcher.addListener(listener);
	}
	,removeListener: function(listener) {
		return this._dispatcher.removeListener(listener);
	}
	,stopTimer: function() {
		if(this._timer != null) this._timer.stop();
	}
	,canRetry: function() {
		return _$UInt_UInt_$Impl_$.gt(this._retryMaxCount,this._retryCount);
	}
	,retry: function() {
		this.stopTimer();
		if(this.canRetry()) {
			this._retryCount++;
			this._startTimer();
			return true;
		} else {
			this._release();
			return false;
		}
	}
	,_startTimer: function() {
		this.stopTimer();
		haxe_Timer.delay($bind(this,this._retry),this._timeout);
	}
	,_retry: function() {
		if(!this._service.get_hasCompleted()) {
			this._service.addHandler(hex_service_stateless_StatelessServiceMessage.COMPLETE,this,$bind(this,this._onServiceComplete));
			this._service.call();
		} else this._release();
	}
	,_onServiceComplete: function(service) {
		this._release();
	}
	,_release: function() {
		this._dispatcher.onReleaseHelper(this._service);
	}
	,__class__: hex_service_stateless_http_HTTPServiceErrorHelper
};
var hex_service_stateless_http_HTTPServiceErrorHelperDispatcher = function() {
	hex_model_ModelDispatcher.call(this);
};
$hxClasses["hex.service.stateless.http.HTTPServiceErrorHelperDispatcher"] = hex_service_stateless_http_HTTPServiceErrorHelperDispatcher;
hex_service_stateless_http_HTTPServiceErrorHelperDispatcher.__name__ = ["hex","service","stateless","http","HTTPServiceErrorHelperDispatcher"];
hex_service_stateless_http_HTTPServiceErrorHelperDispatcher.__interfaces__ = [hex_service_stateless_http_IHTTPServiceErrorHelperListener];
hex_service_stateless_http_HTTPServiceErrorHelperDispatcher.__super__ = hex_model_ModelDispatcher;
hex_service_stateless_http_HTTPServiceErrorHelperDispatcher.prototype = $extend(hex_model_ModelDispatcher.prototype,{
	onReleaseHelper: function(service) {
		var _g = 0;
		var _g1 = this._listeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener.onReleaseHelper(service);
		}
	}
	,__class__: hex_service_stateless_http_HTTPServiceErrorHelperDispatcher
});
var hex_service_stateless_http_HTTPServiceTest = function() { };
$hxClasses["hex.service.stateless.http.HTTPServiceTest"] = hex_service_stateless_http_HTTPServiceTest;
hex_service_stateless_http_HTTPServiceTest.__name__ = ["hex","service","stateless","http","HTTPServiceTest"];
hex_service_stateless_http_HTTPServiceTest.prototype = {
	service: null
	,setUp: function() {
		this.service = new hex_service_stateless_http_MockHTTPService();
		this.service.createConfiguration();
	}
	,tearDown: function() {
		this.service.release();
		this.service = null;
	}
	,testResult: function() {
		this.service.testSetResult("result");
		hex_unittest_assertion_Assert.equals("result",this.service.getResult(),"result getter should provide result setted value",{ fileName : "HTTPServiceTest.hx", lineNumber : 41, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testResult"});
	}
	,testResultWithParser: function() {
		this.service.setParser(new hex_service_stateless_http__$HTTPServiceTest_MockParser());
		this.service.testSetResult(5);
		hex_unittest_assertion_Assert.equals(6,this.service.getResult(),"result getter should provide result parsed value",{ fileName : "HTTPServiceTest.hx", lineNumber : 49, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testResultWithParser"});
	}
	,testConfigurationAccessors: function() {
		var service = new hex_service_stateless_http_MockHTTPService();
		var configuration = new hex_service_stateless_http_MockHTTPServiceConfiguration();
		hex_unittest_assertion_Assert.isNull(service.getConfiguration(),"configuration should be null by default",{ fileName : "HTTPServiceTest.hx", lineNumber : 58, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testConfigurationAccessors"});
		service.setConfiguration(configuration);
		hex_unittest_assertion_Assert.equals(configuration,service.getConfiguration(),"configuration should be retrieved from getter",{ fileName : "HTTPServiceTest.hx", lineNumber : 61, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testConfigurationAccessors"});
		hex_unittest_assertion_Assert.equals(5000,service.getConfiguration().serviceTimeout,"'serviceTimeout' value should be 5000",{ fileName : "HTTPServiceTest.hx", lineNumber : 62, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testConfigurationAccessors"});
		service.set_timeoutDuration(100);
		hex_unittest_assertion_Assert.equals(100,service.getConfiguration().serviceTimeout,"'serviceTimeout' value should be 100",{ fileName : "HTTPServiceTest.hx", lineNumber : 65, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testConfigurationAccessors"});
	}
	,testTimeoutDurationAccessors: function() {
		hex_unittest_assertion_Assert.equals(100,this.service.get_timeoutDuration(),"'serviceTimeout' value should be 100",{ fileName : "HTTPServiceTest.hx", lineNumber : 71, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testTimeoutDurationAccessors"});
		this.service.set_timeoutDuration(200);
		hex_unittest_assertion_Assert.equals(200,this.service.get_timeoutDuration(),"'serviceTimeout' value should be 200",{ fileName : "HTTPServiceTest.hx", lineNumber : 73, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testTimeoutDurationAccessors"});
		if(typeof(window) != "undefined") {
			this.service.call();
			hex_unittest_assertion_Assert.setPropertyThrows(hex_error_IllegalStateException,this.service,"timeoutDuration",40,"'timeoutDuration' call should throw IllegalStateException",{ fileName : "HTTPServiceTest.hx", lineNumber : 83, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testTimeoutDurationAccessors"});
		}
	}
	,testCall: function() {
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 94, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 95, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 96, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 97, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 98, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 99, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
		if(typeof(window) != "undefined") {
			this.service.call();
			hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 108, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
			hex_unittest_assertion_Assert.isTrue(this.service.get_isRunning(),"'isRunning' should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 109, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
			hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 110, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
			hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 111, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
			hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 112, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
			hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 113, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
			hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.call)),[],"service called twice should throw IllegalStateException",{ fileName : "HTTPServiceTest.hx", lineNumber : 115, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testCall"});
		}
	}
	,testErrorThrownWithServiceCall: function() {
		var listener = new hex_service_stateless_http_MockHTTPServiceListener();
		var configuration = new hex_service_stateless_http_MockHTTPServiceConfiguration();
		configuration.serviceUrl = null;
		var service = new hex_service_stateless_http_MockHTTPService();
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,service,$bind(service,service.call),[],"service call without configuration should throw 'NullPointerException'",{ fileName : "HTTPServiceTest.hx", lineNumber : 131, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testErrorThrownWithServiceCall"});
		service = new hex_service_stateless_http_MockHTTPService();
		service.setConfiguration(configuration);
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_NullPointerException,service,$bind(service,service.call),[],"service call without serviceUrl should throw 'NullPointerException'",{ fileName : "HTTPServiceTest.hx", lineNumber : 135, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testErrorThrownWithServiceCall"});
		var service1 = new hex_service_stateless_http_MockHTTPService();
		service1.addHandler(hex_service_stateless_StatelessServiceMessage.FAIL,listener,$bind(listener,listener.onServiceFail));
		service1.call();
		hex_unittest_assertion_Assert.isTrue(service1.get_hasFailed(),"service call without configuration should fail",{ fileName : "HTTPServiceTest.hx", lineNumber : 140, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testErrorThrownWithServiceCall"});
		hex_unittest_assertion_Assert.equals(1,listener.onServiceFailCallCount,"",{ fileName : "HTTPServiceTest.hx", lineNumber : 141, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testErrorThrownWithServiceCall"});
		service1 = new hex_service_stateless_http_MockHTTPService();
		service1.addHandler(hex_service_stateless_StatelessServiceMessage.FAIL,listener,$bind(listener,listener.onServiceFail));
		service1.setConfiguration(configuration);
		service1.call();
		hex_unittest_assertion_Assert.isTrue(service1.get_hasFailed(),"service call without serviceUrl should fail",{ fileName : "HTTPServiceTest.hx", lineNumber : 150, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testErrorThrownWithServiceCall"});
		hex_unittest_assertion_Assert.equals(2,listener.onServiceFailCallCount,"",{ fileName : "HTTPServiceTest.hx", lineNumber : 151, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testErrorThrownWithServiceCall"});
	}
	,testRelease: function() {
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 158, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 159, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 160, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 161, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 162, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 163, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
		this.service.release();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 167, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 168, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 169, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_isCancelled(),"'isCancelled' should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 170, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 171, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 172, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.call)),[],"service should throw IllegalStateException when called after release",{ fileName : "HTTPServiceTest.hx", lineNumber : 174, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testRelease"});
	}
	,testHandleCancel: function() {
		var listener = new hex_service_stateless_http_MockHTTPServiceListener();
		var handler = new hex_service_stateless_http_MockHTTPServiceListener();
		var anotherHandler = new hex_service_stateless_http_MockHTTPServiceListener();
		var anotherListener = new hex_service_stateless_http_MockHTTPServiceListener();
		this.service.addHTTPServiceListener(listener);
		this.service.addHTTPServiceListener(anotherListener);
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.CANCEL,handler,$bind(handler,handler.onServiceCancel));
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 189, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 190, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 191, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 192, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 193, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 194, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		this.service.handleCancel();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 198, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 199, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 200, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_isCancelled(),"'isCancelled' should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 201, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 202, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 203, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_isCancelled(),"'isCancelled' property should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 205, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.handleCancel)),[],"StatelessService should throw IllegalStateException when calling cancel twice",{ fileName : "HTTPServiceTest.hx", lineNumber : 206, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.equals(1,listener.onServiceCancelCallCount,"'listener' callback should be triggered once",{ fileName : "HTTPServiceTest.hx", lineNumber : 208, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.equals(1,handler.onServiceCancelCallCount,"'handler' callback should be triggered once",{ fileName : "HTTPServiceTest.hx", lineNumber : 209, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.equals(this.service,listener.lastServiceReceived,"service received by listener should be HTTPService instance",{ fileName : "HTTPServiceTest.hx", lineNumber : 211, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		hex_unittest_assertion_Assert.equals(this.service,handler.lastServiceReceived,"service received by handler should be HTTPService instance",{ fileName : "HTTPServiceTest.hx", lineNumber : 212, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.CANCEL,anotherHandler,$bind(anotherHandler,anotherHandler.onServiceCancel));
		hex_unittest_assertion_Assert.equals(0,anotherHandler.onServiceCancelCallCount,"'post-handler' callback should not be triggered",{ fileName : "HTTPServiceTest.hx", lineNumber : 215, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleCancel"});
	}
	,testHandleComplete: function() {
		var listener = new hex_service_stateless_http_MockHTTPServiceListener();
		var handler = new hex_service_stateless_http_MockHTTPServiceListener();
		var anotherHandler = new hex_service_stateless_http_MockHTTPServiceListener();
		var anotherListener = new hex_service_stateless_http_MockHTTPServiceListener();
		this.service.addHTTPServiceListener(listener);
		this.service.addHTTPServiceListener(anotherListener);
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.COMPLETE,handler,$bind(handler,handler.onServiceComplete));
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 230, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 231, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 232, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 233, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 234, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 235, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		this.service.handleComplete();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 239, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 240, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_hasCompleted(),"'hasCompleted' property should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 241, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 242, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 243, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 244, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.handleComplete)),[],"StatelessService should throw IllegalStateException when calling cancel twice",{ fileName : "HTTPServiceTest.hx", lineNumber : 246, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.equals(1,listener.onServiceCompleteCallCount,"'listener' callback should be triggered once",{ fileName : "HTTPServiceTest.hx", lineNumber : 248, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.equals(1,handler.onServiceCompleteCallCount,"'handler' callback should be triggered once",{ fileName : "HTTPServiceTest.hx", lineNumber : 249, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.equals(this.service,listener.lastServiceReceived,"service received by listener should be HTTPService instance",{ fileName : "HTTPServiceTest.hx", lineNumber : 251, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		hex_unittest_assertion_Assert.equals(this.service,handler.lastServiceReceived,"service received by handler should be HTTPService instance",{ fileName : "HTTPServiceTest.hx", lineNumber : 252, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.COMPLETE,anotherHandler,$bind(anotherHandler,anotherHandler.onServiceComplete));
		hex_unittest_assertion_Assert.equals(0,anotherHandler.onServiceCompleteCallCount,"'post-handler' callback should not be triggered",{ fileName : "HTTPServiceTest.hx", lineNumber : 255, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleComplete"});
	}
	,testHandleFail: function() {
		var listener = new hex_service_stateless_http_MockHTTPServiceListener();
		var handler = new hex_service_stateless_http_MockHTTPServiceListener();
		var anotherHandler = new hex_service_stateless_http_MockHTTPServiceListener();
		var anotherListener = new hex_service_stateless_http_MockHTTPServiceListener();
		this.service.addHTTPServiceListener(listener);
		this.service.addHTTPServiceListener(anotherListener);
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.FAIL,handler,$bind(handler,handler.onServiceFail));
		hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 270, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 271, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 272, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 273, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasFailed(),"'hasFailed' property should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 274, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 275, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		this.service.handleFail();
		hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 279, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 280, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 281, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 282, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isTrue(this.service.get_hasFailed(),"'hasFailed' property should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 283, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 284, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.methodCallThrows(hex_error_IllegalStateException,this.service,($_=this.service,$bind($_,$_.handleFail)),[],"StatelessService should throw IllegalStateException when calling cancel twice",{ fileName : "HTTPServiceTest.hx", lineNumber : 286, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.equals(1,listener.onServiceFailCallCount,"'listener' callback should be triggered once",{ fileName : "HTTPServiceTest.hx", lineNumber : 288, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.equals(1,handler.onServiceFailCallCount,"'handler' callback should be triggered once",{ fileName : "HTTPServiceTest.hx", lineNumber : 289, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.equals(this.service,listener.lastServiceReceived,"'event.target' received by listener should be HTTPService instance",{ fileName : "HTTPServiceTest.hx", lineNumber : 291, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		hex_unittest_assertion_Assert.equals(this.service,handler.lastServiceReceived,"'event.target' received by handler should be HTTPService instance",{ fileName : "HTTPServiceTest.hx", lineNumber : 292, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
		this.service.addHandler(hex_service_stateless_StatelessServiceMessage.FAIL,anotherHandler,$bind(anotherHandler,anotherHandler.onServiceFail));
		hex_unittest_assertion_Assert.equals(0,anotherHandler.onServiceFailCallCount,"'post-handler' callback should not be triggered",{ fileName : "HTTPServiceTest.hx", lineNumber : 295, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testHandleFail"});
	}
	,testTimeout: function() {
		var listener = new hex_service_stateless_http_MockHTTPServiceListener();
		var handler = new hex_service_stateless_http_MockHTTPServiceListener();
		var anotherHandler = new hex_service_stateless_http_MockHTTPServiceListener();
		var anotherListener = new hex_service_stateless_http_MockHTTPServiceListener();
		this.service.addHTTPServiceListener(listener);
		this.service.addHTTPServiceListener(anotherListener);
		this.service.addHandler(hex_service_stateless_AsyncStatelessServiceMessage.TIMEOUT,handler,$bind(handler,handler.onServiceTimeout));
		hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' property should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 310, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testTimeout"});
		this.service.set_timeoutDuration(0);
		if(typeof(window) != "undefined") {
			this.service.call();
			hex_unittest_assertion_Assert.isTrue(this.service.get_hasTimeout(),"'hasTimeout' property should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 319, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testTimeout"});
			hex_unittest_assertion_Assert.equals(1,listener.onServiceTimeoutCallCount,"'listener' callback should be triggered once",{ fileName : "HTTPServiceTest.hx", lineNumber : 321, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testTimeout"});
			hex_unittest_assertion_Assert.equals(1,handler.onServiceTimeoutCallCount,"'handler' callback should be triggered once",{ fileName : "HTTPServiceTest.hx", lineNumber : 322, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testTimeout"});
			hex_unittest_assertion_Assert.equals(this.service,listener.lastServiceReceived,"'event.target' received by listener should be HTTPService instance",{ fileName : "HTTPServiceTest.hx", lineNumber : 324, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testTimeout"});
			hex_unittest_assertion_Assert.equals(this.service,handler.lastServiceReceived,"'event.target' received by handler should be HTTPService instance",{ fileName : "HTTPServiceTest.hx", lineNumber : 325, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testTimeout"});
			this.service.addHandler(hex_service_stateless_AsyncStatelessServiceMessage.TIMEOUT,anotherHandler,$bind(anotherHandler,anotherHandler.onServiceTimeout));
			hex_unittest_assertion_Assert.equals(0,anotherHandler.onServiceTimeoutCallCount,"'post-handler' callback should not be triggered",{ fileName : "HTTPServiceTest.hx", lineNumber : 328, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "testTimeout"});
		}
	}
	,test_getRemoteArgumentsCall: function() {
		hex_unittest_assertion_Assert.isInstanceOf(this.service.call_getRemoteArguments()[0],haxe_Http,"'_getRemoteArguments' call should return an array with HTTP instance",{ fileName : "HTTPServiceTest.hx", lineNumber : 338, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "test_getRemoteArgumentsCall"});
	}
	,test_resetCall: function() {
		if(typeof(window) != "undefined") {
			this.service.call();
			hex_unittest_assertion_Assert.isTrue(this.service.get_wasUsed(),"'wasUsed' should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 351, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "test_resetCall"});
			hex_unittest_assertion_Assert.isTrue(this.service.get_isRunning(),"'isRunning' should return true",{ fileName : "HTTPServiceTest.hx", lineNumber : 352, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "test_resetCall"});
			hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 353, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "test_resetCall"});
			hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 354, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "test_resetCall"});
			hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 355, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "test_resetCall"});
			this.service.call_reset();
			hex_unittest_assertion_Assert.isFalse(this.service.get_wasUsed(),"'wasUsed' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 359, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "test_resetCall"});
			hex_unittest_assertion_Assert.isFalse(this.service.get_isRunning(),"'isRunning' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 360, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "test_resetCall"});
			hex_unittest_assertion_Assert.isFalse(this.service.get_hasCompleted(),"'hasCompleted' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 361, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "test_resetCall"});
			hex_unittest_assertion_Assert.isFalse(this.service.get_isCancelled(),"'isCancelled' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 362, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "test_resetCall"});
			hex_unittest_assertion_Assert.isFalse(this.service.get_hasTimeout(),"'hasTimeout' should return false",{ fileName : "HTTPServiceTest.hx", lineNumber : 363, className : "hex.service.stateless.http.HTTPServiceTest", methodName : "test_resetCall"});
		}
	}
	,__class__: hex_service_stateless_http_HTTPServiceTest
};
var hex_service_stateless_http__$HTTPServiceTest_MockParser = function() {
};
$hxClasses["hex.service.stateless.http._HTTPServiceTest.MockParser"] = hex_service_stateless_http__$HTTPServiceTest_MockParser;
hex_service_stateless_http__$HTTPServiceTest_MockParser.__name__ = ["hex","service","stateless","http","_HTTPServiceTest","MockParser"];
hex_service_stateless_http__$HTTPServiceTest_MockParser.__interfaces__ = [hex_data_IParser];
hex_service_stateless_http__$HTTPServiceTest_MockParser.prototype = {
	parse: function(serializedContent,target) {
		return serializedContent + 1;
	}
	,__class__: hex_service_stateless_http__$HTTPServiceTest_MockParser
};
var hex_service_stateless_http_HTTPSuite = function() {
	this.list = [hex_service_stateless_http_HTTPServiceTest,hex_service_stateless_http_DefaultHTTPServiceParameterFactoryTest];
};
$hxClasses["hex.service.stateless.http.HTTPSuite"] = hex_service_stateless_http_HTTPSuite;
hex_service_stateless_http_HTTPSuite.__name__ = ["hex","service","stateless","http","HTTPSuite"];
hex_service_stateless_http_HTTPSuite.prototype = {
	list: null
	,__class__: hex_service_stateless_http_HTTPSuite
};
var hex_service_stateless_http_IHTTPServiceListener = function() { };
$hxClasses["hex.service.stateless.http.IHTTPServiceListener"] = hex_service_stateless_http_IHTTPServiceListener;
hex_service_stateless_http_IHTTPServiceListener.__name__ = ["hex","service","stateless","http","IHTTPServiceListener"];
hex_service_stateless_http_IHTTPServiceListener.prototype = {
	onServiceComplete: null
	,onServiceFail: null
	,onServiceCancel: null
	,onServiceTimeout: null
	,__class__: hex_service_stateless_http_IHTTPServiceListener
};
var hex_service_stateless_http_MockHTTPService = function() {
	hex_service_stateless_http_HTTPService.call(this);
};
$hxClasses["hex.service.stateless.http.MockHTTPService"] = hex_service_stateless_http_MockHTTPService;
hex_service_stateless_http_MockHTTPService.__name__ = ["hex","service","stateless","http","MockHTTPService"];
hex_service_stateless_http_MockHTTPService.__super__ = hex_service_stateless_http_HTTPService;
hex_service_stateless_http_MockHTTPService.prototype = $extend(hex_service_stateless_http_HTTPService.prototype,{
	createConfiguration: function() {
		this._configuration = new hex_service_stateless_http_MockHTTPServiceConfiguration();
	}
	,call_getRemoteArguments: function() {
		return this._getRemoteArguments();
	}
	,call_reset: function() {
		this._reset();
	}
	,testSetResult: function(result) {
		this._setResult(result);
	}
	,__class__: hex_service_stateless_http_MockHTTPService
});
var hex_service_stateless_http_MockHTTPServiceConfiguration = function() {
	hex_service_stateless_http_HTTPServiceConfiguration.call(this,"https://github.com/DoclerLabs/hexService");
};
$hxClasses["hex.service.stateless.http.MockHTTPServiceConfiguration"] = hex_service_stateless_http_MockHTTPServiceConfiguration;
hex_service_stateless_http_MockHTTPServiceConfiguration.__name__ = ["hex","service","stateless","http","MockHTTPServiceConfiguration"];
hex_service_stateless_http_MockHTTPServiceConfiguration.__super__ = hex_service_stateless_http_HTTPServiceConfiguration;
hex_service_stateless_http_MockHTTPServiceConfiguration.prototype = $extend(hex_service_stateless_http_HTTPServiceConfiguration.prototype,{
	__class__: hex_service_stateless_http_MockHTTPServiceConfiguration
});
var hex_service_stateless_http_MockHTTPServiceListener = function() {
	this.onServiceTimeoutCallCount = 0;
	this.onServiceCancelCallCount = 0;
	this.onServiceFailCallCount = 0;
	this.onServiceCompleteCallCount = 0;
};
$hxClasses["hex.service.stateless.http.MockHTTPServiceListener"] = hex_service_stateless_http_MockHTTPServiceListener;
hex_service_stateless_http_MockHTTPServiceListener.__name__ = ["hex","service","stateless","http","MockHTTPServiceListener"];
hex_service_stateless_http_MockHTTPServiceListener.__interfaces__ = [hex_service_stateless_http_IHTTPServiceListener];
hex_service_stateless_http_MockHTTPServiceListener.prototype = {
	lastMessageTypeReceived: null
	,lastServiceReceived: null
	,onServiceCompleteCallCount: null
	,onServiceFailCallCount: null
	,onServiceCancelCallCount: null
	,onServiceTimeoutCallCount: null
	,onServiceComplete: function(service) {
		this.lastServiceReceived = service;
		this.onServiceCompleteCallCount++;
	}
	,onServiceFail: function(service) {
		this.lastServiceReceived = service;
		this.onServiceFailCallCount++;
	}
	,onServiceCancel: function(service) {
		this.lastServiceReceived = service;
		this.onServiceCancelCallCount++;
	}
	,onServiceTimeout: function(service) {
		this.lastServiceReceived = service;
		this.onServiceTimeoutCallCount++;
	}
	,handleMessage: function(messageType,service) {
		this.lastMessageTypeReceived = messageType;
		this.lastServiceReceived = service;
	}
	,__class__: hex_service_stateless_http_MockHTTPServiceListener
};
var hex_state_HexStateSuite = function() {
	this.list = [hex_state_StateMachineTest];
};
$hxClasses["hex.state.HexStateSuite"] = hex_state_HexStateSuite;
hex_state_HexStateSuite.__name__ = ["hex","state","HexStateSuite"];
hex_state_HexStateSuite.prototype = {
	list: null
	,__class__: hex_state_HexStateSuite
};
var hex_state_StateMachine = function(start) {
	this._start = start;
};
$hxClasses["hex.state.StateMachine"] = hex_state_StateMachine;
hex_state_StateMachine.__name__ = ["hex","state","StateMachine"];
hex_state_StateMachine.prototype = {
	_start: null
	,addResetMessageType: function(messageTypes) {
		var _g = 0;
		while(_g < messageTypes.length) {
			var messageType = messageTypes[_g];
			++_g;
			if(messageType != null) this._addResetMessageType_byAddingTransition(messageType);
		}
	}
	,_addResetMessageType_byAddingTransition: function(messageType) {
		var states = this.getStates();
		var _g = 0;
		while(_g < states.length) {
			var state = states[_g];
			++_g;
			if(state.hasTransition(messageType)) state.addTransition(messageType,this._start);
		}
	}
	,getStates: function() {
		var result = [];
		this._collectStates(result,this._start);
		return result;
	}
	,_collectStates: function(result,state) {
		if(this._start == null || HxOverrides.indexOf(result,state,0) != -1) return; else {
			result.push(state);
			var targets = state.getAllTargets();
			var _g = 0;
			while(_g < targets.length) {
				var target = targets[_g];
				++_g;
				this._collectStates(result,target);
			}
		}
	}
	,getStart: function() {
		return this._start;
	}
	,isResetMessageType: function(messageType) {
		var states = this.getStates();
		var _g = 0;
		while(_g < states.length) {
			var state = states[_g];
			++_g;
			if(state.hasTransition(messageType) && state.targetState(messageType) == this._start) return true;
		}
		return false;
	}
	,__class__: hex_state_StateMachine
};
var hex_state_StateMachineTest = function() { };
$hxClasses["hex.state.StateMachineTest"] = hex_state_StateMachineTest;
hex_state_StateMachineTest.__name__ = ["hex","state","StateMachineTest"];
hex_state_StateMachineTest.prototype = {
	_injector: null
	,_stateMachine: null
	,_controller: null
	,_commandLogger: null
	,_transitionListener: null
	,anonymous: null
	,guest: null
	,user: null
	,administrator: null
	,logAsUser: null
	,logAsGuest: null
	,logout: null
	,logAsAdministrator: null
	,setUp: function() {
		this._injector = new hex_di_Injector();
		this._commandLogger = new hex_state_mock_MockCommandLogger();
		this._injector.map(hex_state_mock_IMockCommandLogger).toValue(this._commandLogger);
		this._injector.map(hex_di_IBasicInjector).toValue(this._injector);
		this._injector.map(hex_control_macro_IMacroExecutor).toType(hex_control_macro_MacroExecutor);
		this.logAsUser = new hex_event_MessageType("onLogin");
		this.logAsGuest = new hex_event_MessageType("onLogAsGuest");
		this.logout = new hex_event_MessageType("onLogout");
		this.logAsAdministrator = new hex_event_MessageType("onLogAsAdministrator");
		this.anonymous = new hex_state_State("anonymous");
		this.guest = new hex_state_State("guest");
		this.user = new hex_state_State("user");
		this.administrator = new hex_state_State("administrator");
		this._stateMachine = new hex_state_StateMachine(this.anonymous);
		this._controller = new hex_state_control_StateController(this._injector,this._stateMachine);
		this.anonymous.addEnterCommand(hex_state_mock_DeleteAllCookiesMockCommand);
		this.anonymous.addEnterCommand(hex_state_mock_DisplayAddBannerMockCommand);
		this.anonymous.addTransition(this.logAsUser,this.user);
		this.anonymous.addTransition(this.logAsGuest,this.guest);
		this.user.addEnterCommand(hex_state_mock_PrepareUserInfosMockCommand);
		this.user.addEnterCommand(hex_state_mock_DisplayWelcomeMessageMockCommand);
		this.user.addExitCommand(hex_state_mock_StoreUserActivityMockCommand);
		this.user.addTransition(this.logAsAdministrator,this.administrator);
		this.guest.addEnterCommand(hex_state_mock_DisplayAddBannerMockCommand);
		this.guest.addEnterCommand(hex_state_mock_InviteForRegisterMockCommand);
		this.guest.addTransition(this.logAsUser,this.user);
		this.guest.addTransition(this.logout,this.anonymous);
		this.administrator.addEnterCommand(hex_state_mock_GetAdminPrivilegesMockCommand);
		this.administrator.addExitCommand(hex_state_mock_RemoveAdminPrivilegesMockCommand);
		this._stateMachine.addResetMessageType([this.logout]);
	}
	,_fireMessage: function(messageType) {
		this._controller.handleMessage(messageType);
	}
	,tearDown: function() {
		this._stateMachine = null;
	}
	,testGetStates: function() {
		hex_unittest_assertion_Assert.equals(4,this._stateMachine.getStates().length,"",{ fileName : "StateMachineTest.hx", lineNumber : 116, className : "hex.state.StateMachineTest", methodName : "testGetStates"});
	}
	,testAddResetMessageType: function() {
		hex_unittest_assertion_Assert.isTrue(this._stateMachine.isResetMessageType(this.logout),"'logout' should be reset messageType",{ fileName : "StateMachineTest.hx", lineNumber : 122, className : "hex.state.StateMachineTest", methodName : "testAddResetMessageType"});
		this._fireMessage(this.logAsUser);
		hex_unittest_assertion_Assert.equals(this.user,this._controller.getCurrentState(),"'user' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 125, className : "hex.state.StateMachineTest", methodName : "testAddResetMessageType"});
		this._fireMessage(this.logout);
		hex_unittest_assertion_Assert.equals(this.anonymous,this._controller.getCurrentState(),"'anonymous' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 128, className : "hex.state.StateMachineTest", methodName : "testAddResetMessageType"});
	}
	,testStateController: function() {
		hex_unittest_assertion_Assert.equals(this.anonymous,this._controller.getCurrentState(),"'anonymous' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 134, className : "hex.state.StateMachineTest", methodName : "testStateController"});
		var dispatcher = new hex_event_Dispatcher();
		dispatcher.addListener(this._controller);
		dispatcher.dispatch(this.logAsUser);
		hex_unittest_assertion_Assert.equals(this.user,this._controller.getCurrentState(),"'user' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 140, className : "hex.state.StateMachineTest", methodName : "testStateController"});
	}
	,testMessagesTriggerStateChangeWithInjection: function() {
		hex_unittest_assertion_Assert.equals(this.anonymous,this._controller.getCurrentState(),"'anonymous' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 146, className : "hex.state.StateMachineTest", methodName : "testMessagesTriggerStateChangeWithInjection"});
		this._fireMessage(this.logAsUser);
		hex_unittest_assertion_Assert.equals(this.user,this._controller.getCurrentState(),"'user' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 149, className : "hex.state.StateMachineTest", methodName : "testMessagesTriggerStateChangeWithInjection"});
		this._fireMessage(this.logAsAdministrator);
		hex_unittest_assertion_Assert.equals(this.administrator,this._controller.getCurrentState(),"'administrator' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 152, className : "hex.state.StateMachineTest", methodName : "testMessagesTriggerStateChangeWithInjection"});
		this._fireMessage(this.logout);
		hex_unittest_assertion_Assert.equals(this.anonymous,this._controller.getCurrentState(),"'anonymous' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 155, className : "hex.state.StateMachineTest", methodName : "testMessagesTriggerStateChangeWithInjection"});
		var logs = ["PUI","DWM","SUA","GAP","RAP","DAC","DAB"];
		hex_unittest_assertion_Assert.deepEquals(logs,this._commandLogger.getLogs(),"logs should be the same",{ fileName : "StateMachineTest.hx", lineNumber : 158, className : "hex.state.StateMachineTest", methodName : "testMessagesTriggerStateChangeWithInjection"});
	}
	,testMessagesAreIgnoredWhenThereIsNoTransition: function() {
		this._fireMessage(this.logAsAdministrator);
		hex_unittest_assertion_Assert.equals(this.anonymous,this._controller.getCurrentState(),"'anonymous' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 165, className : "hex.state.StateMachineTest", methodName : "testMessagesAreIgnoredWhenThereIsNoTransition"});
	}
	,testAsyncTransitionsWithHandlers: function() {
		hex_unittest_assertion_Assert.equals(this.anonymous,this._controller.getCurrentState(),"'anonymous' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 171, className : "hex.state.StateMachineTest", methodName : "testAsyncTransitionsWithHandlers"});
		this._transitionListener = new hex_state__$StateMachineTest_MockTransitionListener(this._controller);
		this.anonymous.addExitHandler(this._transitionListener,($_=this._transitionListener,$bind($_,$_.testExitCallback)));
		this.guest.addEnterHandler(this._transitionListener,($_=this._transitionListener,$bind($_,$_.testEnterCallback)));
		this._fireMessage(this.logAsGuest);
		hex_unittest_assertion_Assert.equals(this.anonymous,this._controller.getCurrentState(),"'anonymous' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 180, className : "hex.state.StateMachineTest", methodName : "testAsyncTransitionsWithHandlers"});
		haxe_Timer.delay(hex_unittest_runner_MethodRunner.asyncHandler($bind(this,this._onCompleteTestAsyncTransitionsWithHandlers)),200);
	}
	,_onCompleteTestAsyncTransitionsWithHandlers: function() {
		hex_unittest_assertion_Assert.equals(this.anonymous,this._transitionListener.exitState,"'anonymous' should be exit state",{ fileName : "StateMachineTest.hx", lineNumber : 187, className : "hex.state.StateMachineTest", methodName : "_onCompleteTestAsyncTransitionsWithHandlers"});
		hex_unittest_assertion_Assert.equals(this.guest,this._transitionListener.enterState,"'guest' should be enter state",{ fileName : "StateMachineTest.hx", lineNumber : 188, className : "hex.state.StateMachineTest", methodName : "_onCompleteTestAsyncTransitionsWithHandlers"});
	}
	,testStateChangeWithPayload: function() {
		hex_unittest_assertion_Assert.equals(this.anonymous,this._controller.getCurrentState(),"'anonymous' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 194, className : "hex.state.StateMachineTest", methodName : "testStateChangeWithPayload"});
		this.anonymous.addExitCommand(hex_state_mock_MockCommandWithRequest);
		var mockStringRequest = new hex_state_mock_MockRequest([new hex_control_payload_ExecutionPayload(new hex_state_mock_MockCaseParser(),hex_data_IParser)]);
		mockStringRequest.code = "cwr";
		this._controller.handleMessage(this.logAsUser,mockStringRequest);
		hex_unittest_assertion_Assert.equals(this.user,this._controller.getCurrentState(),"'user' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 202, className : "hex.state.StateMachineTest", methodName : "testStateChangeWithPayload"});
		var logs = ["CWR","PUI","DWM"];
		hex_unittest_assertion_Assert.deepEquals(logs,this._commandLogger.getLogs(),"logs should be the same",{ fileName : "StateMachineTest.hx", lineNumber : 204, className : "hex.state.StateMachineTest", methodName : "testStateChangeWithPayload"});
		this.user.addExitCommand(hex_state_mock_AnotherMockCommandWithRequest);
		mockStringRequest.code = "cwa";
		mockStringRequest.method = ($_=this._commandLogger,$bind($_,$_.log));
		this._controller.handleMessage(this.logAsAdministrator,mockStringRequest);
		var logs1 = ["CWR","PUI","DWM","SUA","CWA","GAP"];
		hex_unittest_assertion_Assert.deepEquals(logs1,this._commandLogger.getLogs(),"logs should be the same",{ fileName : "StateMachineTest.hx", lineNumber : 213, className : "hex.state.StateMachineTest", methodName : "testStateChangeWithPayload"});
	}
	,testStateChangeWithModuleCallback: function() {
		hex_unittest_assertion_Assert.equals(this.anonymous,this._controller.getCurrentState(),"'anonymous' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 219, className : "hex.state.StateMachineTest", methodName : "testStateChangeWithModuleCallback"});
		var moduleA = new hex_state_mock_MockModuleWithStringParameter("A");
		var moduleB = new hex_state_mock_MockModuleWithStringParameter("B");
		this.anonymous.addExitCommand(hex_state_mock_MockCommandWithStringInjection,moduleA);
		this.anonymous.addExitCommand(hex_state_mock_MockCommandWithStringInjection,moduleB);
		this._fireMessage(this.logAsUser);
		hex_unittest_assertion_Assert.equals("A",moduleA.getName(),"module's name should be 'A'",{ fileName : "StateMachineTest.hx", lineNumber : 229, className : "hex.state.StateMachineTest", methodName : "testStateChangeWithModuleCallback"});
		hex_unittest_assertion_Assert.equals("B",moduleB.getName(),"module's name should be 'B'",{ fileName : "StateMachineTest.hx", lineNumber : 230, className : "hex.state.StateMachineTest", methodName : "testStateChangeWithModuleCallback"});
	}
	,testStateChangeWithGuards: function() {
		hex_unittest_assertion_Assert.equals(this.anonymous,this._controller.getCurrentState(),"'anonymous' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 236, className : "hex.state.StateMachineTest", methodName : "testStateChangeWithGuards"});
		this.user.addExitCommand(hex_state_mock_PrepareUserInfosMockCommand).withGuards([(function($this) {
			var $r;
			var approve = function() {
				return false;
			};
			$r = approve;
			return $r;
		}(this))]);
		this.user.addEnterCommand(hex_state_mock_PrepareUserInfosMockCommand).withGuards([(function($this) {
			var $r;
			var approve1 = function() {
				return false;
			};
			$r = approve1;
			return $r;
		}(this))]);
		this._fireMessage(this.logAsUser);
		hex_unittest_assertion_Assert.equals(this.user,this._controller.getCurrentState(),"'user' should be current state",{ fileName : "StateMachineTest.hx", lineNumber : 243, className : "hex.state.StateMachineTest", methodName : "testStateChangeWithGuards"});
	}
	,__class__: hex_state_StateMachineTest
};
var hex_state__$StateMachineTest_MockTransitionListener = function(controller) {
	this._controller = controller;
};
$hxClasses["hex.state._StateMachineTest.MockTransitionListener"] = hex_state__$StateMachineTest_MockTransitionListener;
hex_state__$StateMachineTest_MockTransitionListener.__name__ = ["hex","state","_StateMachineTest","MockTransitionListener"];
hex_state__$StateMachineTest_MockTransitionListener.prototype = {
	_controller: null
	,exitState: null
	,enterState: null
	,testExitCallback: function(state) {
		this.exitState = this._controller.getCurrentState();
	}
	,testEnterCallback: function(state) {
		this.enterState = this._controller.getCurrentState();
	}
	,__class__: hex_state__$StateMachineTest_MockTransitionListener
};
var hex_state_Transition = function(source,messageType,target) {
	this._source = source;
	this._target = target;
	this._messageType = messageType;
};
$hxClasses["hex.state.Transition"] = hex_state_Transition;
hex_state_Transition.__name__ = ["hex","state","Transition"];
hex_state_Transition.prototype = {
	_source: null
	,_target: null
	,_messageType: null
	,getSource: function() {
		return this._source;
	}
	,getTarget: function() {
		return this._target;
	}
	,getMessageType: function() {
		return this._messageType;
	}
	,__class__: hex_state_Transition
};
var hex_state_config_stateful_StatefulStateMachineConfig = function(startState) {
	this._startState = startState;
};
$hxClasses["hex.state.config.stateful.StatefulStateMachineConfig"] = hex_state_config_stateful_StatefulStateMachineConfig;
hex_state_config_stateful_StatefulStateMachineConfig.__name__ = ["hex","state","config","stateful","StatefulStateMachineConfig"];
hex_state_config_stateful_StatefulStateMachineConfig.__interfaces__ = [hex_config_stateful_IStatefulConfig];
hex_state_config_stateful_StatefulStateMachineConfig.prototype = {
	_stateMachine: null
	,_stateController: null
	,_startState: null
	,configure: function(injector,dispatcher,module) {
		this._stateMachine = new hex_state_StateMachine(this._startState);
		this._stateController = new hex_state_control_StateController(injector,this._stateMachine);
		injector.mapToValue(hex_state_StateMachine,this._stateMachine);
		injector.mapToValue(hex_state_control_StateController,this._stateController);
		dispatcher.addListener(this._stateController);
	}
	,__class__: hex_state_config_stateful_StatefulStateMachineConfig
};
var hex_state_control_StateChangeMacro = function() {
	hex_control_macro_Macro.call(this);
};
$hxClasses["hex.state.control.StateChangeMacro"] = hex_state_control_StateChangeMacro;
hex_state_control_StateChangeMacro.__name__ = ["hex","state","control","StateChangeMacro"];
hex_state_control_StateChangeMacro.__super__ = hex_control_macro_Macro;
hex_state_control_StateChangeMacro.prototype = $extend(hex_control_macro_Macro.prototype,{
	_prepare: function() {
	}
	,__class__: hex_state_control_StateChangeMacro
});
var hex_state_control_StateController = function(injector,stateMachine) {
	this._injector = injector;
	this._stateMachine = stateMachine;
	this._currentState = this._stateMachine.getStart();
	this._isInTransition = false;
};
$hxClasses["hex.state.control.StateController"] = hex_state_control_StateController;
hex_state_control_StateController.__name__ = ["hex","state","control","StateController"];
hex_state_control_StateController.prototype = {
	_injector: null
	,_stateMachine: null
	,_isInTransition: null
	,_currentState: null
	,_targetedState: null
	,_request: null
	,transitionTo: function(target,request) {
		if(this._isInTransition) {
		} else {
			this._isInTransition = true;
			if(request != null) this._request = request;
			this._targetedState = target;
			this._dispatchStateChange(this._currentState,this._currentState.getExitHandlerList());
			this._triggerCommand(this._currentState.getExitCommandMapping(),$bind(this,this._onExitCurrentState));
		}
	}
	,_triggerCommand: function(mappings,callback) {
		if(mappings.length > 0) {
			var sm = this._injector.instantiateUnmapped(hex_state_control_StateChangeMacro);
			var mappingToRemove = [];
			var _g = 0;
			while(_g < mappings.length) {
				var mapping = mappings[_g];
				++_g;
				if(mapping.get_isFiredOnce()) mappingToRemove.push(mapping);
				sm.addMapping(mapping);
			}
			var _g1 = 0;
			while(_g1 < mappingToRemove.length) {
				var mapping1 = mappingToRemove[_g1];
				++_g1;
				mappings.splice(HxOverrides.indexOf(mappings,mapping1,0),1);
			}
			sm.addCompleteHandler(this,callback);
			sm.addFailHandler(this,callback);
			sm.addCancelHandler(this,callback);
			sm.preExecute();
			sm.execute(this._request);
		} else callback(null);
	}
	,handleMessage: function(messageType,request) {
		if(this._currentState.hasTransition(messageType)) this.transitionTo(this._currentState.targetState(messageType),request); else if(this._stateMachine.isResetMessageType(messageType)) this.transitionTo(this._stateMachine.getStart(),request);
	}
	,getCurrentState: function() {
		return this._currentState;
	}
	,getTargetedState: function() {
		return this._targetedState;
	}
	,_onExitCurrentState: function(cmd) {
		this._triggerCommand(this._targetedState.getEnterCommandMapping(),$bind(this,this._onEnterTargetState));
	}
	,_onEnterTargetState: function(cmd) {
		if(this._request != null) this._request = null;
		this._currentState = this._targetedState;
		this._isInTransition = false;
		this._dispatchStateChange(this._currentState,this._currentState.getEnterHandlerList());
	}
	,_dispatchStateChange: function(state,handlers) {
		var _g = 0;
		while(_g < handlers.length) {
			var handler = handlers[_g];
			++_g;
			Reflect.callMethod(handler.scope,handler.callback,[state]);
		}
	}
	,__class__: hex_state_control_StateController
};
var hex_state_mock_AnotherMockCommandWithRequest = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.state.mock.AnotherMockCommandWithRequest"] = hex_state_mock_AnotherMockCommandWithRequest;
hex_state_mock_AnotherMockCommandWithRequest.__name__ = ["hex","state","mock","AnotherMockCommandWithRequest"];
hex_state_mock_AnotherMockCommandWithRequest.__super__ = hex_control_command_BasicCommand;
hex_state_mock_AnotherMockCommandWithRequest.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	logger: null
	,parser: null
	,execute: function(request) {
		request.method(this.parser.parse(request.code));
	}
	,__class__: hex_state_mock_AnotherMockCommandWithRequest
});
var hex_state_mock_DeleteAllCookiesMockCommand = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.state.mock.DeleteAllCookiesMockCommand"] = hex_state_mock_DeleteAllCookiesMockCommand;
hex_state_mock_DeleteAllCookiesMockCommand.__name__ = ["hex","state","mock","DeleteAllCookiesMockCommand"];
hex_state_mock_DeleteAllCookiesMockCommand.__super__ = hex_control_command_BasicCommand;
hex_state_mock_DeleteAllCookiesMockCommand.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	logger: null
	,execute: function(request) {
		this.logger.log("DAC");
	}
	,__class__: hex_state_mock_DeleteAllCookiesMockCommand
});
var hex_state_mock_DisplayAddBannerMockCommand = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.state.mock.DisplayAddBannerMockCommand"] = hex_state_mock_DisplayAddBannerMockCommand;
hex_state_mock_DisplayAddBannerMockCommand.__name__ = ["hex","state","mock","DisplayAddBannerMockCommand"];
hex_state_mock_DisplayAddBannerMockCommand.__super__ = hex_control_command_BasicCommand;
hex_state_mock_DisplayAddBannerMockCommand.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	logger: null
	,execute: function(request) {
		this.logger.log("DAB");
	}
	,__class__: hex_state_mock_DisplayAddBannerMockCommand
});
var hex_state_mock_DisplayWelcomeMessageMockCommand = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.state.mock.DisplayWelcomeMessageMockCommand"] = hex_state_mock_DisplayWelcomeMessageMockCommand;
hex_state_mock_DisplayWelcomeMessageMockCommand.__name__ = ["hex","state","mock","DisplayWelcomeMessageMockCommand"];
hex_state_mock_DisplayWelcomeMessageMockCommand.__super__ = hex_control_command_BasicCommand;
hex_state_mock_DisplayWelcomeMessageMockCommand.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	logger: null
	,execute: function(request) {
		this.logger.log("DWM");
	}
	,__class__: hex_state_mock_DisplayWelcomeMessageMockCommand
});
var hex_state_mock_GetAdminPrivilegesMockCommand = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.state.mock.GetAdminPrivilegesMockCommand"] = hex_state_mock_GetAdminPrivilegesMockCommand;
hex_state_mock_GetAdminPrivilegesMockCommand.__name__ = ["hex","state","mock","GetAdminPrivilegesMockCommand"];
hex_state_mock_GetAdminPrivilegesMockCommand.__super__ = hex_control_command_BasicCommand;
hex_state_mock_GetAdminPrivilegesMockCommand.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	logger: null
	,execute: function(request) {
		this.logger.log("GAP");
	}
	,__class__: hex_state_mock_GetAdminPrivilegesMockCommand
});
var hex_state_mock_IMockCommandLogger = function() { };
$hxClasses["hex.state.mock.IMockCommandLogger"] = hex_state_mock_IMockCommandLogger;
hex_state_mock_IMockCommandLogger.__name__ = ["hex","state","mock","IMockCommandLogger"];
hex_state_mock_IMockCommandLogger.prototype = {
	log: null
	,getLogs: null
	,__class__: hex_state_mock_IMockCommandLogger
};
var hex_state_mock_InviteForRegisterMockCommand = function() {
	hex_control_async_AsyncCommand.call(this);
};
$hxClasses["hex.state.mock.InviteForRegisterMockCommand"] = hex_state_mock_InviteForRegisterMockCommand;
hex_state_mock_InviteForRegisterMockCommand.__name__ = ["hex","state","mock","InviteForRegisterMockCommand"];
hex_state_mock_InviteForRegisterMockCommand.__super__ = hex_control_async_AsyncCommand;
hex_state_mock_InviteForRegisterMockCommand.prototype = $extend(hex_control_async_AsyncCommand.prototype,{
	logger: null
	,execute: function(request) {
		haxe_Timer.delay($bind(this,this._execute),50);
	}
	,_execute: function() {
		this.logger.log("IFR");
		this._handleComplete();
	}
	,__class__: hex_state_mock_InviteForRegisterMockCommand
});
var hex_state_mock_MockCaseParser = function() {
};
$hxClasses["hex.state.mock.MockCaseParser"] = hex_state_mock_MockCaseParser;
hex_state_mock_MockCaseParser.__name__ = ["hex","state","mock","MockCaseParser"];
hex_state_mock_MockCaseParser.__interfaces__ = [hex_data_IParser];
hex_state_mock_MockCaseParser.prototype = {
	parse: function(serializedContent,target) {
		return serializedContent.toUpperCase();
	}
	,__class__: hex_state_mock_MockCaseParser
};
var hex_state_mock_MockCommandLogger = function() {
	this._logs = [];
};
$hxClasses["hex.state.mock.MockCommandLogger"] = hex_state_mock_MockCommandLogger;
hex_state_mock_MockCommandLogger.__name__ = ["hex","state","mock","MockCommandLogger"];
hex_state_mock_MockCommandLogger.__interfaces__ = [hex_state_mock_IMockCommandLogger];
hex_state_mock_MockCommandLogger.prototype = {
	_logs: null
	,log: function(commandCode) {
		this._logs.push(commandCode);
	}
	,getLogs: function() {
		return this._logs.slice();
	}
	,__class__: hex_state_mock_MockCommandLogger
};
var hex_state_mock_MockCommandWithRequest = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.state.mock.MockCommandWithRequest"] = hex_state_mock_MockCommandWithRequest;
hex_state_mock_MockCommandWithRequest.__name__ = ["hex","state","mock","MockCommandWithRequest"];
hex_state_mock_MockCommandWithRequest.__super__ = hex_control_command_BasicCommand;
hex_state_mock_MockCommandWithRequest.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	logger: null
	,parser: null
	,execute: function(request) {
		this.logger.log(this.parser.parse(request.code));
	}
	,__class__: hex_state_mock_MockCommandWithRequest
});
var hex_state_mock_MockCommandWithStringInjection = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.state.mock.MockCommandWithStringInjection"] = hex_state_mock_MockCommandWithStringInjection;
hex_state_mock_MockCommandWithStringInjection.__name__ = ["hex","state","mock","MockCommandWithStringInjection"];
hex_state_mock_MockCommandWithStringInjection.__super__ = hex_control_command_BasicCommand;
hex_state_mock_MockCommandWithStringInjection.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	module: null
	,name: null
	,execute: function(request) {
		var module = this.module;
		module.setName(this.name);
	}
	,__class__: hex_state_mock_MockCommandWithStringInjection
});
var hex_state_mock_MockModuleWithStringParameter = function(name) {
	hex_module_Module.call(this);
	this.getBasicInjector().mapToValue(String,name);
};
$hxClasses["hex.state.mock.MockModuleWithStringParameter"] = hex_state_mock_MockModuleWithStringParameter;
hex_state_mock_MockModuleWithStringParameter.__name__ = ["hex","state","mock","MockModuleWithStringParameter"];
hex_state_mock_MockModuleWithStringParameter.__super__ = hex_module_Module;
hex_state_mock_MockModuleWithStringParameter.prototype = $extend(hex_module_Module.prototype,{
	_name: null
	,setName: function(name) {
		this._name = name;
	}
	,getName: function() {
		return this._name;
	}
	,__class__: hex_state_mock_MockModuleWithStringParameter
});
var hex_state_mock_MockRequest = function(executionPayloads) {
	this.method = null;
	this.code = null;
	hex_control_Request.call(this,executionPayloads);
};
$hxClasses["hex.state.mock.MockRequest"] = hex_state_mock_MockRequest;
hex_state_mock_MockRequest.__name__ = ["hex","state","mock","MockRequest"];
hex_state_mock_MockRequest.__super__ = hex_control_Request;
hex_state_mock_MockRequest.prototype = $extend(hex_control_Request.prototype,{
	code: null
	,method: null
	,__class__: hex_state_mock_MockRequest
});
var hex_state_mock_PrepareUserInfosMockCommand = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.state.mock.PrepareUserInfosMockCommand"] = hex_state_mock_PrepareUserInfosMockCommand;
hex_state_mock_PrepareUserInfosMockCommand.__name__ = ["hex","state","mock","PrepareUserInfosMockCommand"];
hex_state_mock_PrepareUserInfosMockCommand.__super__ = hex_control_command_BasicCommand;
hex_state_mock_PrepareUserInfosMockCommand.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	logger: null
	,execute: function(request) {
		this.logger.log("PUI");
	}
	,__class__: hex_state_mock_PrepareUserInfosMockCommand
});
var hex_state_mock_RemoveAdminPrivilegesMockCommand = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.state.mock.RemoveAdminPrivilegesMockCommand"] = hex_state_mock_RemoveAdminPrivilegesMockCommand;
hex_state_mock_RemoveAdminPrivilegesMockCommand.__name__ = ["hex","state","mock","RemoveAdminPrivilegesMockCommand"];
hex_state_mock_RemoveAdminPrivilegesMockCommand.__super__ = hex_control_command_BasicCommand;
hex_state_mock_RemoveAdminPrivilegesMockCommand.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	logger: null
	,execute: function(request) {
		this.logger.log("RAP");
	}
	,__class__: hex_state_mock_RemoveAdminPrivilegesMockCommand
});
var hex_state_mock_StoreUserActivityMockCommand = function() {
	hex_control_command_BasicCommand.call(this);
};
$hxClasses["hex.state.mock.StoreUserActivityMockCommand"] = hex_state_mock_StoreUserActivityMockCommand;
hex_state_mock_StoreUserActivityMockCommand.__name__ = ["hex","state","mock","StoreUserActivityMockCommand"];
hex_state_mock_StoreUserActivityMockCommand.__super__ = hex_control_command_BasicCommand;
hex_state_mock_StoreUserActivityMockCommand.prototype = $extend(hex_control_command_BasicCommand.prototype,{
	logger: null
	,execute: function(request) {
		this.logger.log("SUA");
	}
	,__class__: hex_state_mock_StoreUserActivityMockCommand
});
var hex_structures_Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["hex.structures.Point"] = hex_structures_Point;
hex_structures_Point.__name__ = ["hex","structures","Point"];
hex_structures_Point.prototype = {
	x: null
	,y: null
	,__class__: hex_structures_Point
};
var hex_structures_Size = function(width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.width = width;
	this.height = height;
};
$hxClasses["hex.structures.Size"] = hex_structures_Size;
hex_structures_Size.__name__ = ["hex","structures","Size"];
hex_structures_Size.prototype = {
	width: null
	,height: null
	,equals: function(size) {
		return this.width == size.width && this.height == size.height;
	}
	,setSize: function(size) {
		if(size != null) {
			this.width = size.width;
			this.height = size.height;
		}
	}
	,setSizeWH: function(width,height) {
		if(!isNaN(width)) this.width = width;
		if(!isNaN(height)) this.height = height;
	}
	,clone: function() {
		return new hex_structures_Size(this.width,this.height);
	}
	,scale: function(factor) {
		if(!isNaN(factor)) return new hex_structures_Size(this.width * factor,this.height * factor); else return this.clone();
	}
	,substract: function(size) {
		if(size != null) return new hex_structures_Size(this.width - size.width,this.height - size.height); else return this.clone();
	}
	,add: function(size) {
		if(size != null) return new hex_structures_Size(this.width + size.width,this.height + size.height); else return this.clone();
	}
	,toPoint: function() {
		return new hex_structures_Point(this.width,this.height);
	}
	,__class__: hex_structures_Size
};
var hex_unittest_assertion_Assert = function() { };
$hxClasses["hex.unittest.assertion.Assert"] = hex_unittest_assertion_Assert;
hex_unittest_assertion_Assert.__name__ = ["hex","unittest","assertion","Assert"];
hex_unittest_assertion_Assert._LOG_ASSERT = function(userMessage) {
	hex_unittest_assertion_Assert._assertCount++;
	hex_unittest_assertion_Assert._lastAssertionLog = userMessage;
	hex_unittest_assertion_Assert._assertionLogs.push(userMessage);
};
hex_unittest_assertion_Assert.getAssertionCount = function() {
	return hex_unittest_assertion_Assert._assertCount;
};
hex_unittest_assertion_Assert.getAssertionFailedCount = function() {
	return hex_unittest_assertion_Assert._assertFailedCount;
};
hex_unittest_assertion_Assert.getLastAssertionLog = function() {
	return hex_unittest_assertion_Assert._lastAssertionLog;
};
hex_unittest_assertion_Assert.getAssertionLogs = function() {
	return hex_unittest_assertion_Assert._assertionLogs;
};
hex_unittest_assertion_Assert.resetAssertionLog = function() {
	hex_unittest_assertion_Assert._assertCount = 0;
	hex_unittest_assertion_Assert._assertFailedCount = 0;
	hex_unittest_assertion_Assert._lastAssertionLog = "";
	hex_unittest_assertion_Assert._assertionLogs = [];
};
hex_unittest_assertion_Assert.isTrue = function(value,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(value != true) hex_unittest_assertion_Assert.fail("Expected true but was '" + (value == null?"null":"" + value) + "'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.isFalse = function(value,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(value != false) hex_unittest_assertion_Assert.fail("Expected false but was '" + (value == null?"null":"" + value) + "'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.isNull = function(value,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(value != null) hex_unittest_assertion_Assert.fail("Expected null but was '" + hex_log_Stringifier.stringify(value) + "'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.isNotNull = function(value,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(value == null) hex_unittest_assertion_Assert.fail("Expected not null but was 'null'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.isInstanceOf = function(value,type,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(!js_Boot.__instanceof(value,type)) hex_unittest_assertion_Assert.fail("Expected '" + Type.getClassName(type) + "' was of type '" + hex_log_Stringifier.stringify(value) + "'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.isNotInstanceOf = function(value,type,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(js_Boot.__instanceof(value,type)) hex_unittest_assertion_Assert.fail("Value '" + hex_log_Stringifier.stringify(value) + "' was not of type '" + Type.getClassName(type) + "'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.equals = function(expected,value,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(expected != value) hex_unittest_assertion_Assert.fail("Expected '" + Std.string(expected) + "' but was '" + Std.string(value) + "'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.deepEquals = function(expected,value,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(Std.string(expected) != Std.string(value)) hex_unittest_assertion_Assert.fail("Expected '" + Std.string(expected) + "' but was '" + Std.string(value) + "'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.arrayContains = function(expected,value,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	var numElement = 0;
	var _g = 0;
	while(_g < value.length) {
		var valueElement = value[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < expected.length) {
			var expectedElement = expected[_g1];
			++_g1;
			if(valueElement == expectedElement) numElement++;
		}
	}
	if(numElement != expected.length) hex_unittest_assertion_Assert.fail("Expected '" + Std.string(expected) + "' but was '" + Std.string(value) + "'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.notEquals = function(expected,value,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(expected == value) hex_unittest_assertion_Assert.fail("Expected '" + Std.string(expected) + "' was not equal to '" + Std.string(value) + "'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.constructorCallThrows = function(expectedException,type,args,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	var expectedExceptionType = Type.getClassName(expectedException);
	var exceptionCaught = null;
	try {
		Type.createInstance(type,args);
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,hex_error_Exception) ) {
			exceptionCaught = e;
		} else throw(e);
	}
	if(exceptionCaught == null || exceptionCaught != null && (exceptionCaught == null?null:js_Boot.getClass(exceptionCaught)) != expectedException) hex_unittest_assertion_Assert.fail("Expected '" + expectedExceptionType + "' but was '" + hex_log_Stringifier.stringify(exceptionCaught) + "'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.methodCallThrows = function(expectedException,scope,methodReference,args,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	var expectedExceptionType = Type.getClassName(expectedException);
	var exceptionCaught = null;
	try {
		Reflect.callMethod(scope,methodReference,args);
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,hex_error_Exception) ) {
			exceptionCaught = e;
		} else throw(e);
	}
	if(exceptionCaught == null || exceptionCaught != null && (exceptionCaught == null?null:js_Boot.getClass(exceptionCaught)) != expectedException) hex_unittest_assertion_Assert.fail("Expected '" + expectedExceptionType + "' but was '" + Std.string(exceptionCaught) + "'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.setPropertyThrows = function(expectedException,instance,propertyName,value,userMessage,posInfos) {
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	var expectedExceptionType = Type.getClassName(expectedException);
	var exceptionCaught = null;
	try {
		Reflect.setProperty(instance,propertyName,value);
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,hex_error_Exception) ) {
			exceptionCaught = e;
		} else throw(e);
	}
	if(exceptionCaught == null || exceptionCaught != null && (exceptionCaught == null?null:js_Boot.getClass(exceptionCaught)) != expectedException) hex_unittest_assertion_Assert.fail("Expected '" + expectedExceptionType + "' but was '" + Std.string(exceptionCaught) + "'",userMessage,posInfos);
};
hex_unittest_assertion_Assert.fail = function(assertMessage,userMessage,posInfos) {
	hex_unittest_assertion_Assert._assertFailedCount++;
	throw new js__$Boot_HaxeError(new hex_unittest_error_AssertException(assertMessage + (userMessage.length < 0?": " + userMessage:""),posInfos));
};
var hex_unittest_description_TestClassDescriptor = function(type) {
	this.instance = Type.createEmptyInstance(type);
	this.type = type;
	this.className = Type.getClassName(type);
	this._name = "";
	this._classDescriptors = [];
	this._methodDescriptors = [];
	this._classIndex = 0;
	this._methodIndex = 0;
};
$hxClasses["hex.unittest.description.TestClassDescriptor"] = hex_unittest_description_TestClassDescriptor;
hex_unittest_description_TestClassDescriptor.__name__ = ["hex","unittest","description","TestClassDescriptor"];
hex_unittest_description_TestClassDescriptor.prototype = {
	instance: null
	,type: null
	,className: null
	,isSuiteClass: null
	,beforeClassFieldName: null
	,afterClassFieldName: null
	,setUpFieldName: null
	,tearDownFieldName: null
	,_classDescriptors: null
	,_methodDescriptors: null
	,_classIndex: null
	,_methodIndex: null
	,_name: null
	,getTestLength: function() {
		var length = 0;
		var _g = 0;
		var _g1 = this._classDescriptors;
		while(_g < _g1.length) {
			var classDescriptor = _g1[_g];
			++_g;
			var b = classDescriptor.getTestLength();
			length = length + b;
		}
		length = length + this._methodDescriptors.length;
		return length;
	}
	,getName: function() {
		return this._name;
	}
	,setName: function(name) {
		this._name = name;
	}
	,addTestMethodDescriptor: function(methodDescriptor) {
		this._methodDescriptors.push(methodDescriptor);
	}
	,addTestClassDescriptor: function(classDescriptor) {
		this._classDescriptors.push(classDescriptor);
	}
	,hasNextClass: function() {
		return this._classIndex < this._classDescriptors.length;
	}
	,nextClass: function() {
		if(this.hasNextClass()) return this._classDescriptors[this._classIndex++]; else throw new js__$Boot_HaxeError(new hex_error_NoSuchElementException("nextClass() call on '" + this.toString() + "' failed.",{ fileName : "TestClassDescriptor.hx", lineNumber : 116, className : "hex.unittest.description.TestClassDescriptor", methodName : "nextClass"}));
	}
	,hasNextMethod: function() {
		return this._methodIndex < this._methodDescriptors.length;
	}
	,nextMethod: function() {
		if(this.hasNextMethod()) return this._methodDescriptors[this._methodIndex++]; else throw new js__$Boot_HaxeError(new hex_error_NoSuchElementException("nextMethod call on '" + this.toString() + "' failed.",{ fileName : "TestClassDescriptor.hx", lineNumber : 133, className : "hex.unittest.description.TestClassDescriptor", methodName : "nextMethod"}));
	}
	,keepOnlyThisMethod: function(methodName) {
		var _g = 0;
		var _g1 = this._methodDescriptors;
		while(_g < _g1.length) {
			var descriptor = _g1[_g];
			++_g;
			if(descriptor.methodName == methodName) {
				this._methodDescriptors = [];
				this._methodDescriptors.push(descriptor);
				break;
			}
		}
	}
	,currentClassDescriptor: function() {
		return this._classDescriptors[this._classIndex == 0?0:this._classIndex - 1];
	}
	,currentMethodDescriptor: function() {
		return this._methodDescriptors[this._methodIndex == 0?0:this._methodIndex - 1];
	}
	,toString: function() {
		return hex_log_Stringifier.stringify(this) + (":[" + Std.string(this.instance) + ", " + Std.string(this.type) + ", " + this.className + "]");
	}
	,__class__: hex_unittest_description_TestClassDescriptor
};
var hex_unittest_description_TestMethodDescriptor = function(methodName,isAsync,isIgnored,description) {
	this.methodName = methodName;
	this.isAsync = isAsync;
	this.isIgnored = isIgnored;
	if(description != null) this.description = description; else this.description = "";
};
$hxClasses["hex.unittest.description.TestMethodDescriptor"] = hex_unittest_description_TestMethodDescriptor;
hex_unittest_description_TestMethodDescriptor.__name__ = ["hex","unittest","description","TestMethodDescriptor"];
hex_unittest_description_TestMethodDescriptor.prototype = {
	methodName: null
	,isAsync: null
	,isIgnored: null
	,description: null
	,toString: function() {
		return hex_log_Stringifier.stringify(this) + (":[" + this.methodName + ", " + Std.string(this.isAsync) + ", " + Std.string(this.isIgnored) + ", " + this.description + "]");
	}
	,__class__: hex_unittest_description_TestMethodDescriptor
};
var hex_unittest_error_AssertException = function(message,posInfos) {
	hex_error_Exception.call(this,message,posInfos);
};
$hxClasses["hex.unittest.error.AssertException"] = hex_unittest_error_AssertException;
hex_unittest_error_AssertException.__name__ = ["hex","unittest","error","AssertException"];
hex_unittest_error_AssertException.__super__ = hex_error_Exception;
hex_unittest_error_AssertException.prototype = $extend(hex_error_Exception.prototype,{
	__class__: hex_unittest_error_AssertException
});
var hex_unittest_event_IMethodRunnerListener = function() { };
$hxClasses["hex.unittest.event.IMethodRunnerListener"] = hex_unittest_event_IMethodRunnerListener;
hex_unittest_event_IMethodRunnerListener.__name__ = ["hex","unittest","event","IMethodRunnerListener"];
hex_unittest_event_IMethodRunnerListener.__interfaces__ = [hex_event_IEventListener];
hex_unittest_event_IMethodRunnerListener.prototype = {
	onSuccess: null
	,onFail: null
	,onTimeout: null
	,__class__: hex_unittest_event_IMethodRunnerListener
};
var hex_unittest_event_ITestRunnerListener = function() { };
$hxClasses["hex.unittest.event.ITestRunnerListener"] = hex_unittest_event_ITestRunnerListener;
hex_unittest_event_ITestRunnerListener.__name__ = ["hex","unittest","event","ITestRunnerListener"];
hex_unittest_event_ITestRunnerListener.__interfaces__ = [hex_event_IEventListener];
hex_unittest_event_ITestRunnerListener.prototype = {
	onStartRun: null
	,onEndRun: null
	,onSuccess: null
	,onFail: null
	,onTimeout: null
	,onSuiteClassStartRun: null
	,onSuiteClassEndRun: null
	,onTestClassStartRun: null
	,onTestClassEndRun: null
	,__class__: hex_unittest_event_ITestRunnerListener
};
var hex_unittest_event_MethodRunnerEvent = function(type,target,descriptor,timeElapsed,error) {
	hex_event_BasicEvent.call(this,type,target);
	this._descriptor = descriptor;
	this._timeElapsed = timeElapsed;
	this._error = error;
};
$hxClasses["hex.unittest.event.MethodRunnerEvent"] = hex_unittest_event_MethodRunnerEvent;
hex_unittest_event_MethodRunnerEvent.__name__ = ["hex","unittest","event","MethodRunnerEvent"];
hex_unittest_event_MethodRunnerEvent.__super__ = hex_event_BasicEvent;
hex_unittest_event_MethodRunnerEvent.prototype = $extend(hex_event_BasicEvent.prototype,{
	_descriptor: null
	,_timeElapsed: null
	,_error: null
	,getRunner: function() {
		return this.target;
	}
	,getDescriptor: function() {
		return this._descriptor;
	}
	,getError: function() {
		return this._error;
	}
	,getTimeElapsed: function() {
		return this._timeElapsed;
	}
	,clone: function() {
		return new hex_unittest_event_MethodRunnerEvent(this.type,this.target,this._descriptor,this._timeElapsed,this._error);
	}
	,__class__: hex_unittest_event_MethodRunnerEvent
});
var hex_unittest_event_TestRunnerEvent = function(type,target,descriptor,timeElapsed,error) {
	hex_event_BasicEvent.call(this,type,target);
	this._descriptor = descriptor;
	this._timeElapsed = timeElapsed;
	this._error = error;
};
$hxClasses["hex.unittest.event.TestRunnerEvent"] = hex_unittest_event_TestRunnerEvent;
hex_unittest_event_TestRunnerEvent.__name__ = ["hex","unittest","event","TestRunnerEvent"];
hex_unittest_event_TestRunnerEvent.__super__ = hex_event_BasicEvent;
hex_unittest_event_TestRunnerEvent.prototype = $extend(hex_event_BasicEvent.prototype,{
	_descriptor: null
	,_error: null
	,_timeElapsed: null
	,getRunner: function() {
		return this.target;
	}
	,getDescriptor: function() {
		return this._descriptor;
	}
	,getError: function() {
		return this._error;
	}
	,getTimeElapsed: function() {
		return this._timeElapsed;
	}
	,clone: function() {
		return new hex_unittest_event_TestRunnerEvent(this.type,this.target,this._descriptor,this._timeElapsed,this._error);
	}
	,__class__: hex_unittest_event_TestRunnerEvent
});
var hex_unittest_metadata_MetadataList = function() { };
$hxClasses["hex.unittest.metadata.MetadataList"] = hex_unittest_metadata_MetadataList;
hex_unittest_metadata_MetadataList.__name__ = ["hex","unittest","metadata","MetadataList"];
var hex_unittest_metadata_MetadataParser = function() {
};
$hxClasses["hex.unittest.metadata.MetadataParser"] = hex_unittest_metadata_MetadataParser;
hex_unittest_metadata_MetadataParser.__name__ = ["hex","unittest","metadata","MetadataParser"];
hex_unittest_metadata_MetadataParser.prototype = {
	parse: function(type) {
		var descriptor = new hex_unittest_description_TestClassDescriptor(type);
		this._parse(descriptor);
		return descriptor;
	}
	,parseMethod: function(type,methodName) {
		var descriptor = new hex_unittest_description_TestClassDescriptor(type);
		this._parse(descriptor);
		descriptor.keepOnlyThisMethod(methodName);
		return descriptor;
	}
	,_parse: function(descriptor) {
		if(!this._isSuite(descriptor)) {
			var inherintanceChain = hex_util_ClassUtil.getInheritanceChain(descriptor.type);
			var metadata = this._collectMetadata(inherintanceChain);
			this._scanTestClass(descriptor,metadata);
		}
	}
	,_isSuite: function(descriptor) {
		var isSuiteClass = false;
		var metadata = haxe_rtti_Meta.getFields(descriptor.type);
		var instance = descriptor.instance;
		var fields = Reflect.fields(metadata);
		var _g = 0;
		while(_g < fields.length) {
			var fieldName = fields[_g];
			++_g;
			var f = Reflect.field(instance,fieldName);
			if(!Reflect.isFunction(f)) {
				var metadataField = Reflect.field(metadata,fieldName);
				if(Object.prototype.hasOwnProperty.call(metadataField,"Suite")) {
					if(!isSuiteClass) {
						var metadatas = Reflect.field(metadataField,"Suite");
						descriptor.setName(metadatas[0]);
						isSuiteClass = descriptor.isSuiteClass = true;
						descriptor.instance = Type.createInstance(descriptor.type,[]);
					}
					var suites = Reflect.field(descriptor.instance,fieldName);
					var _g1 = 0;
					while(_g1 < suites.length) {
						var testClass = suites[_g1];
						++_g1;
						var classDescriptor = new hex_unittest_description_TestClassDescriptor(testClass);
						descriptor.addTestClassDescriptor(classDescriptor);
						this._parse(classDescriptor);
					}
				}
			}
		}
		return isSuiteClass;
	}
	,_collectMetadata: function(inherintanceChain) {
		var meta = { };
		while(inherintanceChain.length > 0) {
			var clazz = inherintanceChain.pop();
			var newMeta = haxe_rtti_Meta.getFields(clazz);
			var markedFieldNames = Reflect.fields(newMeta);
			var _g = 0;
			while(_g < markedFieldNames.length) {
				var fieldName = markedFieldNames[_g];
				++_g;
				var recordedFieldTags = Reflect.field(meta,fieldName);
				var newFieldTags = Reflect.field(newMeta,fieldName);
				var newTagNames = Reflect.fields(newFieldTags);
				if(recordedFieldTags == null) {
					var tagsCopy = { };
					var _g1 = 0;
					while(_g1 < newTagNames.length) {
						var tagName = newTagNames[_g1];
						++_g1;
						Reflect.setField(tagsCopy,tagName,Reflect.field(newFieldTags,tagName));
					}
					meta[fieldName] = tagsCopy;
				} else {
					var ignored = false;
					var _g11 = 0;
					while(_g11 < newTagNames.length) {
						var tagName1 = newTagNames[_g11];
						++_g11;
						if(tagName1 == "Ignore") ignored = true;
						if(!ignored && (tagName1 == "Test" || tagName1 == "Async") && Object.prototype.hasOwnProperty.call(recordedFieldTags,"Ignore")) Reflect.deleteField(recordedFieldTags,"Ignore");
						var tagValue = Reflect.field(newFieldTags,tagName1);
						recordedFieldTags[tagName1] = tagValue;
					}
				}
			}
		}
		return meta;
	}
	,_scanTestClass: function(testDescriptor,fieldMeta) {
		var fieldNames = Reflect.fields(fieldMeta);
		var _g = 0;
		while(_g < fieldNames.length) {
			var fieldName = fieldNames[_g];
			++_g;
			var f = Reflect.field(testDescriptor.instance,fieldName);
			var funcMeta = Reflect.field(fieldMeta,fieldName);
			if(Reflect.isFunction(f)) this._searchForInstanceMetadata(testDescriptor,fieldName,f,funcMeta);
		}
		this._searchForStaticMetadata(testDescriptor);
	}
	,_searchForStaticMetadata: function(testDescriptor) {
		var staticMetadata = haxe_rtti_Meta.getStatics(testDescriptor.type);
		var fields = Reflect.fields(staticMetadata);
		var _g = 0;
		while(_g < fields.length) {
			var fieldName = fields[_g];
			++_g;
			var field = Reflect.field(staticMetadata,fieldName);
			if(Object.prototype.hasOwnProperty.call(field,"BeforeClass")) testDescriptor.beforeClassFieldName = fieldName;
			if(Object.prototype.hasOwnProperty.call(field,"AfterClass")) testDescriptor.afterClassFieldName = fieldName;
		}
	}
	,_searchForInstanceMetadata: function(testDescriptor,fieldName,func,funcMeta) {
		var _g = 0;
		var _g1 = hex_unittest_metadata_MetadataList.INSTANCE_METADATA;
		try {
			while(_g < _g1.length) {
				var tag = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(funcMeta,tag)) {
					var args = Reflect.field(funcMeta,tag);
					var description;
					if(args != null) description = args[0]; else description = "";
					var isIgnored = Object.prototype.hasOwnProperty.call(funcMeta,"Ignore");
					if(isIgnored) {
						args = Reflect.field(funcMeta,"Ignore");
						if(args != null) description = args[0]; else description = "";
					}
					switch(tag) {
					case "BeforeClass":
						testDescriptor.beforeClassFieldName = fieldName;
						throw "__break__";
						break;
					case "AfterClass":
						testDescriptor.afterClassFieldName = fieldName;
						throw "__break__";
						break;
					case "Before":
						testDescriptor.setUpFieldName = fieldName;
						throw "__break__";
						break;
					case "After":
						testDescriptor.tearDownFieldName = fieldName;
						throw "__break__";
						break;
					case "Test":
						testDescriptor.addTestMethodDescriptor(new hex_unittest_description_TestMethodDescriptor(fieldName,false,isIgnored,description));
						throw "__break__";
						break;
					case "Async":
						testDescriptor.addTestMethodDescriptor(new hex_unittest_description_TestMethodDescriptor(fieldName,true,isIgnored,description));
						break;
					}
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,__class__: hex_unittest_metadata_MetadataParser
};
var hex_unittest_notifier_BrowserUnitTestNotifier = function(targetId) {
	this._failedCount = 0;
	this._successfulCount = 0;
	this._tabs = 0;
	this.setConsole(targetId);
	this.setGlobalResultSuccess();
};
$hxClasses["hex.unittest.notifier.BrowserUnitTestNotifier"] = hex_unittest_notifier_BrowserUnitTestNotifier;
hex_unittest_notifier_BrowserUnitTestNotifier.__name__ = ["hex","unittest","notifier","BrowserUnitTestNotifier"];
hex_unittest_notifier_BrowserUnitTestNotifier.__interfaces__ = [hex_unittest_event_ITestRunnerListener];
hex_unittest_notifier_BrowserUnitTestNotifier.prototype = {
	_trace: null
	,_tabs: null
	,console: null
	,netTimeElapsed: null
	,_successfulCount: null
	,_failedCount: null
	,setConsole: function(targetId) {
		this.console = window.document.getElementById(targetId);
		this.console.style.backgroundColor = "#060606";
		this.console.style.whiteSpace = "pre";
		this.console.style.fontFamily = "Lucida Console";
		this.console.style.position = "relative";
		this.console.style.fontSize = "11px";
	}
	,_log: function(element) {
		element.style.marginLeft = this._tabs * 30 + "px";
		element.appendChild(window.document.createTextNode("\n"));
		this.console.appendChild(element);
		this.console.scrollTop = this.console.scrollHeight;
	}
	,_addTab: function() {
		this._tabs++;
	}
	,_removeTab: function() {
		this._tabs--;
	}
	,onStartRun: function(e) {
		this._successfulCount = 0;
		this._failedCount = 0;
		this._tabs = 0;
		this._log(this.createElement("[[[ Start " + e.getDescriptor().className + " tests run ]]]","yellow+bold+h3"));
		this._addTab();
		this.netTimeElapsed = 0;
	}
	,onEndRun: function(e) {
		this._removeTab();
		var beginning = this.createElement("[[[ Test runs finished :: ","yellow+bold+h3");
		var all = this.createElement(Std.string(_$UInt_UInt_$Impl_$.toFloat(this._successfulCount + this._failedCount)) + " overall :: ","white+bold+h3");
		var successfull = this.createElement(Std.string(_$UInt_UInt_$Impl_$.toFloat(this._successfulCount)) + " successul :: ","green+bold+h3");
		var failed = this.createElement(Std.string(_$UInt_UInt_$Impl_$.toFloat(this._failedCount)) + " failed :: ","red+bold+h3");
		var ending = this.createElement(" in " + this.netTimeElapsed + "ms :: ]]]","yellow+bold+h3");
		var list = [];
		list.push(beginning);
		list.push(all);
		if(_$UInt_UInt_$Impl_$.gt(this._successfulCount,0)) list.push(successfull);
		if(_$UInt_UInt_$Impl_$.gt(this._failedCount,0)) list.push(failed);
		list.push(ending);
		this._log(this.encapsulateElements(list));
		this.addRuler();
	}
	,onSuiteClassStartRun: function(e) {
		this._log(this.createElement(e.getDescriptor().getName() + ": '" + e.getDescriptor().className + "'","white+bold+h4"));
		this._addTab();
	}
	,onSuiteClassEndRun: function(e) {
		this._removeTab();
	}
	,onTestClassStartRun: function(e) {
		this._log(this.createElement("Test class: '" + e.getDescriptor().className + "'","darkwhite+h5+bold"));
		this._addTab();
	}
	,onTestClassEndRun: function(e) {
		this._removeTab();
	}
	,onSuccess: function(e) {
		this._successfulCount++;
		var success = this.createElement("✔ ","green");
		var methodDescriptor = e.getDescriptor().currentMethodDescriptor();
		var func = this.createElement(methodDescriptor.methodName + "() ","lightgrey");
		this.generateMessage(success,func,e);
	}
	,onFail: function(e) {
		this._failedCount++;
		var methodDescriptor = e.getDescriptor().currentMethodDescriptor();
		var func = this.createElement(methodDescriptor.methodName + "() ","red");
		var fail = this.createElement("✘ ","red");
		this.generateMessage(fail,func,e);
		this._addTab();
		this._addTab();
		this._log(this.createElement(e.getError().toString(),"red+bold"));
		this._log(this.createElement(e.getError().message + (Std["is"](e.getError(),hex_unittest_error_AssertException)?": " + hex_unittest_assertion_Assert.getLastAssertionLog():""),"red"));
		this._removeTab();
		this._removeTab();
		this.setGlobalResultFailed();
	}
	,onTimeout: function(e) {
		this.onFail(e);
	}
	,generateMessage: function(icon,func,e) {
		var description = e.getDescriptor().currentMethodDescriptor().description;
		var message = this.createElement((description.length > 0?description:"") + " [" + e.getTimeElapsed() + "ms]","darkgrey");
		this.netTimeElapsed += e.getTimeElapsed();
		this._log(this.encapsulateElements([icon,func,message]));
	}
	,createElement: function(message,color) {
		var result = "";
		var span;
		var _this = window.document;
		span = _this.createElement("span");
		span.textContent = message;
		this.setAttributes(span,color);
		return span;
	}
	,encapsulateElements: function(elementList) {
		var container;
		var _this = window.document;
		container = _this.createElement("span");
		var _g = 0;
		while(_g < elementList.length) {
			var element = elementList[_g];
			++_g;
			container.appendChild(element);
		}
		return container;
	}
	,setAttributes: function(element,color) {
		var colorAttributes = color.split("+");
		var _g = 0;
		while(_g < colorAttributes.length) {
			var attr = colorAttributes[_g];
			++_g;
			this.setAttribute(element,attr);
		}
	}
	,setAttribute: function(element,attr) {
		switch(attr) {
		case "bold":
			element.style.fontWeight = "bold";
			break;
		case "italic":
			element.style.fontStyle = "italic";
			break;
		case "underline":
			element.style.textDecoration = "underline";
			break;
		case "green":
			element.style.color = "#27fe11";
			break;
		case "red":
			element.style.color = "#e62323";
			break;
		case "blue":
			element.style.color = "#4999d4";
			break;
		case "yellow":
			element.style.color = "#ffcf18";
			break;
		case "darkgrey":
			element.style.color = "#727272";
			break;
		case "lightgrey":
			element.style.color = "#d9d9d9";
			break;
		case "darkwhite":
			element.style.color = "#e6e6e6";
			break;
		case "white":
			element.style.color = "#e2e2e2";
			break;
		case "h3":
			element.style.fontSize = "14px";
			element.style.lineHeight = "30px";
			break;
		case "h4":
			element.style.fontSize = "13px";
			element.style.lineHeight = "30px";
			break;
		case "h5":
			element.style.lineHeight = "25px";
			break;
		}
	}
	,setGlobalResultSuccess: function() {
		this.console.style.borderLeft = "50px solid #2f8a11";
	}
	,setGlobalResultFailed: function() {
		this.console.style.borderLeft = "50px solid #e62323";
	}
	,addRuler: function() {
		var ruler;
		var _this = window.document;
		ruler = _this.createElement("hr");
		ruler.style.border = "0";
		ruler.style.height = "10px";
		ruler.style.borderTop = "1px solid #555";
		ruler.style.margin = "15px 0px 15px 0px";
		this.console.appendChild(ruler);
	}
	,handleEvent: function(e) {
	}
	,__class__: hex_unittest_notifier_BrowserUnitTestNotifier
};
var hex_unittest_notifier_ConsoleNotifier = function(errorBubbling) {
	if(errorBubbling == null) errorBubbling = false;
	this._errorBubbling = errorBubbling;
	this._trace = Reflect.field(js_Boot,"__trace");
};
$hxClasses["hex.unittest.notifier.ConsoleNotifier"] = hex_unittest_notifier_ConsoleNotifier;
hex_unittest_notifier_ConsoleNotifier.__name__ = ["hex","unittest","notifier","ConsoleNotifier"];
hex_unittest_notifier_ConsoleNotifier.__interfaces__ = [hex_unittest_event_ITestRunnerListener];
hex_unittest_notifier_ConsoleNotifier.prototype = {
	_trace: null
	,_tabs: null
	,_errorBubbling: null
	,_log: function(message) {
		Reflect.callMethod(js_Boot,this._trace,[this._tabs + message]);
	}
	,_addTab: function() {
		this._tabs += "\t";
	}
	,_removeTab: function() {
		this._tabs = HxOverrides.substr(this._tabs,0,this._tabs.length - 1);
	}
	,onStartRun: function(e) {
		this._tabs = "";
		this._log(this.setColor("<<< Start " + e.getDescriptor().className + " tests run >>>","blue+bold+underline"));
		this._addTab();
	}
	,onEndRun: function(e) {
		this._removeTab();
		this._log(this.setColor("<<< End tests run >>>","blue+bold+underline"));
		this._log(this.setColor("Assertions passed: " + hex_unittest_assertion_Assert.getAssertionCount() + "\n","bold"));
		if(hex_unittest_assertion_Assert.getAssertionFailedCount() > 0) {
			this._log(this.setColor("Assertions failed: " + hex_unittest_assertion_Assert.getAssertionFailedCount() + "\n","red+bold"));
			throw new js__$Boot_HaxeError(new hex_error_Exception("Assertions failed: " + hex_unittest_assertion_Assert.getAssertionFailedCount(),{ fileName : "ConsoleNotifier.hx", lineNumber : 60, className : "hex.unittest.notifier.ConsoleNotifier", methodName : "onEndRun"}));
		}
	}
	,onSuiteClassStartRun: function(e) {
		this._log(this.setColor("Suite class '" + e.getDescriptor().getName() + "'","green+underline"));
		this._addTab();
	}
	,onSuiteClassEndRun: function(e) {
		this._removeTab();
	}
	,onTestClassStartRun: function(e) {
		this._log(this.setColor("Test class '" + e.getDescriptor().className + "'","green"));
		this._addTab();
	}
	,onTestClassEndRun: function(e) {
		this._removeTab();
	}
	,onSuccess: function(e) {
		var methodDescriptor = e.getDescriptor().currentMethodDescriptor();
		var description = methodDescriptor.description;
		var timeElapsed = this.setColor(" " + e.getTimeElapsed() + "ms","green+bold");
		var message;
		message = "* [" + methodDescriptor.methodName + "] " + (description.length > 0?description:"") + timeElapsed;
		this._log(this.setColor(message,"green"));
	}
	,onFail: function(e) {
		var methodDescriptor = e.getDescriptor().currentMethodDescriptor();
		var description = methodDescriptor.description;
		var message;
		message = "* [" + methodDescriptor.methodName + "] " + (description.length > 0?description:".");
		this._log(this.setColor(message,"red"));
		this._addTab();
		this._log(this.setColor(e.getError().toString(),"red+bold"));
		this._log(this.setColor(e.getError().message + ": " + (Std["is"](e.getError(),hex_unittest_error_AssertException)?": " + hex_unittest_assertion_Assert.getLastAssertionLog():""),"red"));
		this._removeTab();
		if(this._errorBubbling) throw new js__$Boot_HaxeError(e.getError());
	}
	,onTimeout: function(e) {
		var methodDescriptor = e.getDescriptor().currentMethodDescriptor();
		var description = methodDescriptor.description;
		var message;
		message = "* [" + methodDescriptor.methodName + "] " + (description.length > 0?description:".");
		this._log(this.setColor(message,"red"));
		this._addTab();
		this._log(this.setColor(e.getError().message,"red+bold"));
		this._removeTab();
	}
	,setColor: function(message,color) {
		if(color == null) return message;
		var result = "";
		var colorAttributes = color.split("+");
		var _g = 0;
		while(_g < colorAttributes.length) {
			var attr = colorAttributes[_g];
			++_g;
			result += "\x1B[" + this.getAnsiCode(attr) + "m";
		}
		result += message + "\x1B[" + this.getAnsiCode("off") + "m";
		return result;
	}
	,getAnsiCode: function(id) {
		switch(id) {
		case "off":
			return 0;
		case "bold":
			return 1;
		case "italic":
			return 3;
		case "underline":
			return 4;
		case "green":
			return 32;
		case "red":
			return 31;
		case "blue":
			return 34;
		}
		return 0;
	}
	,handleEvent: function(e) {
	}
	,__class__: hex_unittest_notifier_ConsoleNotifier
};
var hex_unittest_runner_IRunner = function() { };
$hxClasses["hex.unittest.runner.IRunner"] = hex_unittest_runner_IRunner;
hex_unittest_runner_IRunner.__name__ = ["hex","unittest","runner","IRunner"];
hex_unittest_runner_IRunner.prototype = {
	run: null
	,__class__: hex_unittest_runner_IRunner
};
var hex_unittest_runner_ITestRunner = function() { };
$hxClasses["hex.unittest.runner.ITestRunner"] = hex_unittest_runner_ITestRunner;
hex_unittest_runner_ITestRunner.__name__ = ["hex","unittest","runner","ITestRunner"];
hex_unittest_runner_ITestRunner.__interfaces__ = [hex_unittest_runner_IRunner];
hex_unittest_runner_ITestRunner.prototype = {
	addListener: null
	,removeListener: null
	,__class__: hex_unittest_runner_ITestRunner
};
var hex_unittest_runner_ExMachinaUnitCore = function() {
	this._dispatcher = new hex_event_LightweightListenerDispatcher();
	this._parser = new hex_unittest_metadata_MetadataParser();
	this._classDescriptors = [];
};
$hxClasses["hex.unittest.runner.ExMachinaUnitCore"] = hex_unittest_runner_ExMachinaUnitCore;
hex_unittest_runner_ExMachinaUnitCore.__name__ = ["hex","unittest","runner","ExMachinaUnitCore"];
hex_unittest_runner_ExMachinaUnitCore.__interfaces__ = [hex_unittest_event_ITestRunnerListener,hex_unittest_runner_ITestRunner];
hex_unittest_runner_ExMachinaUnitCore.prototype = {
	_dispatcher: null
	,_parser: null
	,_classDescriptors: null
	,_runner: null
	,_currentClassDescriptor: null
	,run: function() {
		this._currentClassDescriptor = 0;
		hex_unittest_assertion_Assert.resetAssertionLog();
		this._runNext();
	}
	,getTestLength: function() {
		var length = 0;
		var _g = 0;
		var _g1 = this._classDescriptors;
		while(_g < _g1.length) {
			var classDescriptor = _g1[_g];
			++_g;
			var b = classDescriptor.getTestLength();
			length = length + b;
		}
		return length;
	}
	,addTest: function(testableClass) {
		this._classDescriptors.push(this._parser.parse(testableClass));
	}
	,addTestCollection: function(collection) {
		var _g = 0;
		while(_g < collection.length) {
			var testableClass = collection[_g];
			++_g;
			this.addTest(testableClass);
		}
	}
	,addTestMethod: function(testableClass,methodName) {
		this._classDescriptors.push(this._parser.parseMethod(testableClass,methodName));
	}
	,toString: function() {
		return hex_log_Stringifier.stringify(this);
	}
	,handleEvent: function(e) {
	}
	,addListener: function(listener) {
		return this._dispatcher.addListener(listener);
	}
	,removeListener: function(listener) {
		return this._dispatcher.removeListener(listener);
	}
	,onStartRun: function(event) {
		this._dispatcher.dispatchEvent(event);
	}
	,onEndRun: function(event) {
		if(this._hasNextClassDescriptor()) {
			this._dispatcher.dispatchEvent(event);
			hex_unittest_assertion_Assert.resetAssertionLog();
			this._runner.removeListener(this);
			this._runNext();
		} else {
			this._dispatcher.dispatchEvent(event);
			hex_unittest_assertion_Assert.resetAssertionLog();
		}
	}
	,onSuiteClassStartRun: function(event) {
		this._dispatcher.dispatchEvent(event);
	}
	,onSuiteClassEndRun: function(event) {
		this._dispatcher.dispatchEvent(event);
	}
	,onTestClassStartRun: function(event) {
		this._dispatcher.dispatchEvent(event);
	}
	,onTestClassEndRun: function(event) {
		this._dispatcher.dispatchEvent(event);
	}
	,onSuccess: function(event) {
		this._dispatcher.dispatchEvent(event);
	}
	,onFail: function(event) {
		this._dispatcher.dispatchEvent(event);
	}
	,onTimeout: function(event) {
		this._dispatcher.dispatchEvent(event);
	}
	,_runNext: function() {
		this._runner = new hex_unittest_runner_TestRunner(this._nextClassDescriptor());
		this._runner.addListener(this);
		this._runner.run();
	}
	,_nextClassDescriptor: function() {
		return this._classDescriptors[this._currentClassDescriptor++];
	}
	,_hasNextClassDescriptor: function() {
		return this._currentClassDescriptor < this._classDescriptors.length;
	}
	,__class__: hex_unittest_runner_ExMachinaUnitCore
};
var hex_unittest_runner_MethodRunner = function(scope,methodDescriptor) {
	this._scope = scope;
	this._methodReference = Reflect.field(this._scope,methodDescriptor.methodName);
	this._methodDescriptor = methodDescriptor;
	this._dispatcher = new hex_event_EventDispatcher();
};
$hxClasses["hex.unittest.runner.MethodRunner"] = hex_unittest_runner_MethodRunner;
hex_unittest_runner_MethodRunner.__name__ = ["hex","unittest","runner","MethodRunner"];
hex_unittest_runner_MethodRunner.asyncHandler = function(methodReference,passThroughArgs,timeout) {
	if(timeout == null) timeout = 1500;
	try {
		hex_unittest_runner_MethodRunner._CURRENT_RUNNER.setCallback(methodReference,passThroughArgs,timeout);
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		throw new js__$Boot_HaxeError(new hex_error_IllegalStateException("Asynchronous test failed. Maybe you forgot to add '@Async' metadata to your test ?",{ fileName : "MethodRunner.hx", lineNumber : 121, className : "hex.unittest.runner.MethodRunner", methodName : "asyncHandler"}));
	}
	return hex_unittest_runner_MethodRunner._createAsyncCallbackHandler();
};
hex_unittest_runner_MethodRunner.registerAsyncMethodRunner = function(runner) {
	if(hex_unittest_runner_MethodRunner._CURRENT_RUNNER == null) hex_unittest_runner_MethodRunner._CURRENT_RUNNER = runner; else throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("MethodRunner.registerAsyncMethodRunner fails. '" + Std.string(hex_unittest_runner_MethodRunner._CURRENT_RUNNER) + "' was already registered.",{ fileName : "MethodRunner.hx", lineNumber : 135, className : "hex.unittest.runner.MethodRunner", methodName : "registerAsyncMethodRunner"}));
};
hex_unittest_runner_MethodRunner._createAsyncCallbackHandler = function() {
	var f = function(rest) {
		if(hex_unittest_runner_MethodRunner._CURRENT_RUNNER == null) throw new js__$Boot_HaxeError(new hex_error_IllegalStateException("AsyncHandler has been called after '@Async' test was released. Try to remove all your listeners in '@After' method to fix this error",{ fileName : "MethodRunner.hx", lineNumber : 165, className : "hex.unittest.runner.MethodRunner", methodName : "_createAsyncCallbackHandler"}));
		hex_unittest_runner_MethodRunner._CURRENT_RUNNER._timer.stop();
		hex_unittest_runner_MethodRunner._CURRENT_RUNNER._timer = null;
		var methodRunner = hex_unittest_runner_MethodRunner._CURRENT_RUNNER;
		var args = [];
		if(rest != null) args = args.concat(rest);
		if(methodRunner._passThroughArgs != null) args = args.concat(methodRunner._passThroughArgs);
		try {
			Reflect.callMethod(methodRunner._scope,methodRunner._callback,args);
			methodRunner._endTime = new Date().getTime();
			hex_unittest_runner_MethodRunner._CURRENT_RUNNER = null;
			methodRunner._dispatcher.dispatchEvent(new hex_unittest_event_MethodRunnerEvent("onSuccess",methodRunner,methodRunner._methodDescriptor,methodRunner.getTimeElapsed()));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,hex_error_Exception) ) {
				hex_unittest_runner_MethodRunner._CURRENT_RUNNER = null;
				methodRunner._dispatcher.dispatchEvent(new hex_unittest_event_MethodRunnerEvent("onFail",methodRunner,methodRunner._methodDescriptor,methodRunner.getTimeElapsed(),e));
			} else throw(e);
		}
	};
	return Reflect.makeVarArgs(f);
};
hex_unittest_runner_MethodRunner._fireTimeout = function() {
	hex_unittest_runner_MethodRunner._CURRENT_RUNNER._timer.stop();
	var methodRunner = hex_unittest_runner_MethodRunner._CURRENT_RUNNER;
	hex_unittest_runner_MethodRunner._CURRENT_RUNNER = null;
	methodRunner._dispatcher.dispatchEvent(new hex_unittest_event_MethodRunnerEvent("onTimeout",methodRunner,methodRunner._methodDescriptor,methodRunner.getTimeElapsed(),new hex_error_Exception("Test timeout",{ fileName : "MethodRunner.hx", lineNumber : 207, className : "hex.unittest.runner.MethodRunner", methodName : "_fireTimeout"})));
};
hex_unittest_runner_MethodRunner.prototype = {
	_scope: null
	,_methodReference: null
	,_methodDescriptor: null
	,_dispatcher: null
	,_startTime: null
	,_endTime: null
	,run: function() {
		this._startTime = new Date().getTime();
		if(!this._methodDescriptor.isAsync) try {
			Reflect.callMethod(this._scope,this._methodReference,[]);
			this._endTime = new Date().getTime();
			this._dispatcher.dispatchEvent(new hex_unittest_event_MethodRunnerEvent("onSuccess",this,this._methodDescriptor,this.getTimeElapsed()));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this._endTime = new Date().getTime();
			if(!js_Boot.__instanceof(e,hex_error_Exception)) {
				var err = new hex_error_Exception(e.toString(),e.posInfos);
				this._dispatcher.dispatchEvent(new hex_unittest_event_MethodRunnerEvent("onFail",this,this._methodDescriptor,this.getTimeElapsed(),err));
			} else this._dispatcher.dispatchEvent(new hex_unittest_event_MethodRunnerEvent("onFail",this,this._methodDescriptor,this.getTimeElapsed(),e));
		} else {
			try {
				hex_unittest_runner_MethodRunner.registerAsyncMethodRunner(this);
			} catch( e1 ) {
				if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
				if( js_Boot.__instanceof(e1,hex_error_IllegalArgumentException) ) {
					this._endTime = new Date().getTime();
					this._dispatcher.dispatchEvent(new hex_unittest_event_MethodRunnerEvent("onFail",this,this._methodDescriptor,this.getTimeElapsed(),e1));
					return;
				} else throw(e1);
			}
			try {
				Reflect.callMethod(this._scope,this._methodReference,[]);
			} catch( e2 ) {
				if (e2 instanceof js__$Boot_HaxeError) e2 = e2.val;
				this._endTime = new Date().getTime();
				this._dispatcher.dispatchEvent(new hex_unittest_event_MethodRunnerEvent("onFail",this,this._methodDescriptor,this.getTimeElapsed(),e2));
			}
		}
	}
	,addListener: function(listener) {
		return this._dispatcher.addListener(listener);
	}
	,removeListener: function(listener) {
		return this._dispatcher.removeListener(listener);
	}
	,getDescriptor: function() {
		return this._methodDescriptor;
	}
	,getTimeElapsed: function() {
		return this._endTime - this._startTime;
	}
	,_callback: null
	,_passThroughArgs: null
	,_timeout: null
	,_timer: null
	,setCallback: function(methodReference,passThroughArgs,timeout) {
		if(timeout == null) timeout = 1500;
		this._callback = methodReference;
		this._passThroughArgs = passThroughArgs;
		this._timeout = timeout;
		if(this._timer != null) this._timer.stop();
		this._timer = new haxe_Timer(timeout);
		this._timer.run = hex_unittest_runner_MethodRunner._fireTimeout;
	}
	,__class__: hex_unittest_runner_MethodRunner
};
var hex_unittest_runner_TestRunner = function(classDescriptor) {
	this._lastRender = 0;
	this._classDescriptors = new haxe_ds_GenericStack();
	this._dispatcher = new hex_event_LightweightListenerDispatcher();
	this._executedDescriptors = new haxe_ds_ObjectMap();
	this._classDescriptors.add(classDescriptor);
};
$hxClasses["hex.unittest.runner.TestRunner"] = hex_unittest_runner_TestRunner;
hex_unittest_runner_TestRunner.__name__ = ["hex","unittest","runner","TestRunner"];
hex_unittest_runner_TestRunner.__interfaces__ = [hex_unittest_event_IMethodRunnerListener,hex_unittest_runner_ITestRunner];
hex_unittest_runner_TestRunner.prototype = {
	_dispatcher: null
	,_classDescriptors: null
	,_executedDescriptors: null
	,_lastRender: null
	,run: function() {
		var classDescriptor = this._classDescriptors.first();
		this._dispatcher.dispatchEvent(new hex_unittest_event_TestRunnerEvent("onStartRun",this,classDescriptor));
		this._runClassDescriptor(this._classDescriptors.first());
	}
	,_runClassDescriptor: function(classDescriptor) {
		if(classDescriptor != null) {
			if(classDescriptor.isSuiteClass) {
				if(!(this._executedDescriptors.h.__keys__[classDescriptor.__id__] != null)) {
					this._dispatcher.dispatchEvent(new hex_unittest_event_TestRunnerEvent("onSuiteClassStartRun",this,classDescriptor));
					this._executedDescriptors.set(classDescriptor,true);
				}
				this._runSuiteClass(classDescriptor);
			} else {
				if(!(this._executedDescriptors.h.__keys__[classDescriptor.__id__] != null)) {
					this._dispatcher.dispatchEvent(new hex_unittest_event_TestRunnerEvent("onTestClassStartRun",this,classDescriptor));
					classDescriptor.instance = Type.createInstance(classDescriptor.type,[]);
					this._executedDescriptors.set(classDescriptor,true);
				}
				this._tryToRunBeforeClass(classDescriptor);
				this._runTestClass(classDescriptor);
			}
		} else this._dispatcher.dispatchEvent(new hex_unittest_event_TestRunnerEvent("onEndRun",this,classDescriptor));
	}
	,_runSuiteClass: function(classDescriptor) {
		if(classDescriptor.hasNextClass()) {
			classDescriptor = classDescriptor.nextClass();
			this._classDescriptors.add(classDescriptor);
			this._runClassDescriptor(classDescriptor);
		} else {
			this._dispatcher.dispatchEvent(new hex_unittest_event_TestRunnerEvent("onSuiteClassEndRun",this,classDescriptor));
			this._classDescriptors.pop();
			this._runClassDescriptor(this._classDescriptors.first());
		}
	}
	,_runTestClass: function(classDescriptor) {
		if(classDescriptor.hasNextMethod()) {
			this._tryToRunSetUp(classDescriptor);
			var methodRunner = new hex_unittest_runner_MethodRunner(classDescriptor.instance,classDescriptor.nextMethod());
			methodRunner.addListener(this);
			methodRunner.run();
		} else {
			this._dispatcher.dispatchEvent(new hex_unittest_event_TestRunnerEvent("onTestClassEndRun",this,classDescriptor));
			this._tryToRunAfterClass(classDescriptor);
			this._classDescriptors.pop();
			this._runClassDescriptor(this._classDescriptors.first());
		}
	}
	,_tryToRunSetUp: function(classDescriptor) {
		if(classDescriptor.setUpFieldName != null) Reflect.callMethod(classDescriptor.instance,Reflect.field(classDescriptor.instance,classDescriptor.setUpFieldName),[]);
	}
	,_tryToRunTearDown: function(classDescriptor) {
		if(classDescriptor.tearDownFieldName != null) Reflect.callMethod(classDescriptor.instance,Reflect.field(classDescriptor.instance,classDescriptor.tearDownFieldName),[]);
	}
	,_tryToRunBeforeClass: function(classDescriptor) {
		if(classDescriptor.beforeClassFieldName != null) Reflect.callMethod(classDescriptor.type,Reflect.field(classDescriptor.type,classDescriptor.beforeClassFieldName),[]);
	}
	,_tryToRunAfterClass: function(classDescriptor) {
		if(classDescriptor.afterClassFieldName != null) Reflect.callMethod(classDescriptor.type,Reflect.field(classDescriptor.type,classDescriptor.afterClassFieldName),[]);
	}
	,addListener: function(listener) {
		return this._dispatcher.addListener(listener);
	}
	,removeListener: function(listener) {
		return this._dispatcher.removeListener(listener);
	}
	,handleEvent: function(e) {
	}
	,onSuccess: function(e) {
		this._endTestMethodCall(e,"onSuccess");
	}
	,onFail: function(e) {
		this._endTestMethodCall(e,"onFail");
	}
	,onTimeout: function(e) {
		this._endTestMethodCall(e,"onTimeout");
	}
	,_endTestMethodCall: function(e,eventType) {
		var _g = this;
		var classDescriptor = this._classDescriptors.first();
		this._dispatcher.dispatchEvent(new hex_unittest_event_TestRunnerEvent(eventType,this,classDescriptor,e.getTimeElapsed(),e.getError()));
		this._tryToRunTearDown(classDescriptor);
		if(new Date().getTime() - this._lastRender > hex_unittest_runner_TestRunner.RENDER_DELAY) {
			this._lastRender = new Date().getTime();
			haxe_Timer.delay(function() {
				_g._runTestClass(classDescriptor);
			},1);
		} else this._runTestClass(classDescriptor);
	}
	,__class__: hex_unittest_runner_TestRunner
};
var hex_util_ClassUtil = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException("'" + hex_log_Stringifier.stringify(this) + "' class can't be instantiated.",{ fileName : "ClassUtil.hx", lineNumber : 15, className : "hex.util.ClassUtil", methodName : "new"}));
};
$hxClasses["hex.util.ClassUtil"] = hex_util_ClassUtil;
hex_util_ClassUtil.__name__ = ["hex","util","ClassUtil"];
hex_util_ClassUtil.getInheritanceChain = function(clazz) {
	var inherintanceChain = [clazz];
	while((clazz = Type.getSuperClass(clazz)) != null) inherintanceChain.push(clazz);
	return inherintanceChain;
};
hex_util_ClassUtil.getInheritanceChainFrom = function(instance) {
	var type = Type.getClass(instance);
	if(type != null) return hex_util_ClassUtil.getInheritanceChain(type); else return [];
};
hex_util_ClassUtil.classExtendsOrImplements = function(classOrClassName,superClass) {
	var actualClass = null;
	if(js_Boot.__instanceof(classOrClassName,Class)) actualClass = js_Boot.__cast(classOrClassName , Class); else if(typeof(classOrClassName) == "string") try {
		actualClass = Type.resolveClass(js_Boot.__cast(classOrClassName , String));
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		throw new js__$Boot_HaxeError("The class name " + Std.string(classOrClassName) + " is not valid because of " + Std.string(e) + "\n" + Std.string(e.getStackTrace()));
	}
	if(actualClass == null) throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("The parameter classOrClassName must be a Class or fully qualified class name.",{ fileName : "ClassUtil.hx", lineNumber : 56, className : "hex.util.ClassUtil", methodName : "classExtendsOrImplements"}));
	var classInstance = Type.createEmptyInstance(actualClass);
	return js_Boot.__instanceof(classInstance,superClass);
};
hex_util_ClassUtil.prototype = {
	__class__: hex_util_ClassUtil
};
var hex_view_IView = function() { };
$hxClasses["hex.view.IView"] = hex_view_IView;
hex_view_IView.__name__ = ["hex","view","IView"];
hex_view_IView.prototype = {
	get_visible: null
	,set_visible: null
	,__class__: hex_view_IView
	,__properties__: {set_visible:"set_visible",get_visible:"get_visible"}
};
var hex_view_viewhelper_IMainViewHelperManagerListener = function() { };
$hxClasses["hex.view.viewhelper.IMainViewHelperManagerListener"] = hex_view_viewhelper_IMainViewHelperManagerListener;
hex_view_viewhelper_IMainViewHelperManagerListener.__name__ = ["hex","view","viewhelper","IMainViewHelperManagerListener"];
hex_view_viewhelper_IMainViewHelperManagerListener.prototype = {
	onViewHelperManagerCreation: null
	,onViewHelperManagerRelease: null
	,__class__: hex_view_viewhelper_IMainViewHelperManagerListener
};
var hex_view_viewhelper_IViewHelper = function() { };
$hxClasses["hex.view.viewhelper.IViewHelper"] = hex_view_viewhelper_IViewHelper;
hex_view_viewhelper_IViewHelper.__name__ = ["hex","view","viewhelper","IViewHelper"];
hex_view_viewhelper_IViewHelper.prototype = {
	get_view: null
	,set_view: null
	,get_visible: null
	,set_visible: null
	,getOwner: null
	,setOwner: null
	,show: null
	,hide: null
	,release: null
	,addHandler: null
	,removeHandler: null
	,__class__: hex_view_viewhelper_IViewHelper
	,__properties__: {set_visible:"set_visible",get_visible:"get_visible",set_view:"set_view",get_view:"get_view"}
};
var hex_view_viewhelper_IViewHelperManagerListener = function() { };
$hxClasses["hex.view.viewhelper.IViewHelperManagerListener"] = hex_view_viewhelper_IViewHelperManagerListener;
hex_view_viewhelper_IViewHelperManagerListener.__name__ = ["hex","view","viewhelper","IViewHelperManagerListener"];
hex_view_viewhelper_IViewHelperManagerListener.prototype = {
	onViewHelperCreation: null
	,onViewHelperRelease: null
	,__class__: hex_view_viewhelper_IViewHelperManagerListener
};
var hex_view_viewhelper_MainViewHelperManagerMessage = function() {
};
$hxClasses["hex.view.viewhelper.MainViewHelperManagerMessage"] = hex_view_viewhelper_MainViewHelperManagerMessage;
hex_view_viewhelper_MainViewHelperManagerMessage.__name__ = ["hex","view","viewhelper","MainViewHelperManagerMessage"];
hex_view_viewhelper_MainViewHelperManagerMessage.prototype = {
	__class__: hex_view_viewhelper_MainViewHelperManagerMessage
};
var hex_view_viewhelper_ViewHelper = function() {
	this._isPreInitialized = false;
	this._isVisible = hex_view_viewhelper_ViewHelper.DEFAULT_VISIBLE;
	this._dispatcher = new hex_event_Dispatcher();
};
$hxClasses["hex.view.viewhelper.ViewHelper"] = hex_view_viewhelper_ViewHelper;
hex_view_viewhelper_ViewHelper.__name__ = ["hex","view","viewhelper","ViewHelper"];
hex_view_viewhelper_ViewHelper.__interfaces__ = [hex_view_viewhelper_IViewHelper];
hex_view_viewhelper_ViewHelper.prototype = {
	dispatcher: null
	,_dispatcher: null
	,_owner: null
	,_view: null
	,_isVisible: null
	,_isPreInitialized: null
	,_preInitialize: function() {
	}
	,_initialize: function() {
	}
	,_release: function() {
	}
	,get_view: function() {
		return this._view;
	}
	,set_view: function(view) {
		if(!this._isPreInitialized) this._preInitialize();
		if(this.get_view() != null || view == null) this._dispatcher.dispatch(hex_view_viewhelper_ViewHelperMessage.REMOVE_VIEW,[this,this._view]);
		this._view = view;
		if(view != null) {
			this._dispatcher.dispatch(hex_view_viewhelper_ViewHelperMessage.ATTACH_VIEW,[this,this._view]);
			if(view.get_visible()) {
				if(view.get_visible() != this._isVisible) view.set_visible(this._isVisible);
			} else this._isVisible = false;
			this._fireInitialisation();
		}
		return this._view;
	}
	,_fireInitialisation: function() {
		this._initialize();
		this._dispatcher.dispatch(hex_view_viewhelper_ViewHelperMessage.INIT,[this]);
	}
	,getOwner: function() {
		return this._owner;
	}
	,setOwner: function(owner) {
		this._owner = owner;
	}
	,show: function() {
		if(!this._isVisible) {
			this._isVisible = true;
			if(this._view != null) this._view.set_visible(true);
		}
	}
	,hide: function() {
		if(this._isVisible) {
			this._isVisible = false;
			if(this._view != null) this._view.set_visible(false);
		}
	}
	,get_visible: function() {
		return this._isVisible;
	}
	,set_visible: function(visible) {
		if(visible) this.show(); else this.hide();
		return this._isVisible;
	}
	,release: function() {
		this._dispatcher.dispatch(hex_view_viewhelper_ViewHelperMessage.RELEASE,[this]);
		this._view = null;
		this._dispatcher.removeAllListeners();
	}
	,addHandler: function(messageType,scope,callback) {
		this._dispatcher.addHandler(messageType,scope,callback);
	}
	,removeHandler: function(messageType,scope,callback) {
		this._dispatcher.removeHandler(messageType,scope,callback);
	}
	,__class__: hex_view_viewhelper_ViewHelper
	,__properties__: {set_visible:"set_visible",get_visible:"get_visible",set_view:"set_view",get_view:"get_view"}
};
var hex_view_viewhelper_ViewHelperManager = function(owner) {
	this._owner = owner;
	this._dispatcher = new hex_event_Dispatcher();
	this._viewHelpers = [];
};
$hxClasses["hex.view.viewhelper.ViewHelperManager"] = hex_view_viewhelper_ViewHelperManager;
hex_view_viewhelper_ViewHelperManager.__name__ = ["hex","view","viewhelper","ViewHelperManager"];
hex_view_viewhelper_ViewHelperManager.getInstance = function(owner) {
	var viewHelperManager = hex_view_viewhelper_ViewHelperManager._mInstances.h[owner.__id__];
	if(viewHelperManager == null) {
		viewHelperManager = new hex_view_viewhelper_ViewHelperManager(owner);
		hex_view_viewhelper_ViewHelperManager._mInstances.set(owner,viewHelperManager);
		hex_view_viewhelper_ViewHelperManager.notifyViewHelperManagerCreation(viewHelperManager);
	}
	return viewHelperManager;
};
hex_view_viewhelper_ViewHelperManager.release = function(owner) {
	var viewHelperManager = hex_view_viewhelper_ViewHelperManager._mInstances.h[owner.__id__];
	if(viewHelperManager != null) {
		hex_view_viewhelper_ViewHelperManager.notifyViewHelperManagerRelease(viewHelperManager);
		viewHelperManager.releaseAllViewHelpers();
		hex_view_viewhelper_ViewHelperManager._mInstances.remove(owner);
	}
};
hex_view_viewhelper_ViewHelperManager.addGlobalListener = function(listener) {
	hex_view_viewhelper_ViewHelperManager._DISPATCHER.addHandler(hex_view_viewhelper_MainViewHelperManagerMessage.VIEW_HELPER_MANAGER_CREATION,listener,$bind(listener,listener.onViewHelperManagerCreation));
	hex_view_viewhelper_ViewHelperManager._DISPATCHER.addHandler(hex_view_viewhelper_MainViewHelperManagerMessage.VIEW_HELPER_MANAGER_RELEASE,listener,$bind(listener,listener.onViewHelperManagerRelease));
};
hex_view_viewhelper_ViewHelperManager.removeGlobalListener = function(listener) {
	hex_view_viewhelper_ViewHelperManager._DISPATCHER.removeHandler(hex_view_viewhelper_MainViewHelperManagerMessage.VIEW_HELPER_MANAGER_CREATION,listener,$bind(listener,listener.onViewHelperManagerCreation));
	hex_view_viewhelper_ViewHelperManager._DISPATCHER.removeHandler(hex_view_viewhelper_MainViewHelperManagerMessage.VIEW_HELPER_MANAGER_RELEASE,listener,$bind(listener,listener.onViewHelperManagerRelease));
};
hex_view_viewhelper_ViewHelperManager.notifyViewHelperManagerCreation = function(viewHelperManager) {
	hex_view_viewhelper_ViewHelperManager._DISPATCHER.dispatch(hex_view_viewhelper_MainViewHelperManagerMessage.VIEW_HELPER_MANAGER_CREATION,[viewHelperManager]);
};
hex_view_viewhelper_ViewHelperManager.notifyViewHelperManagerRelease = function(viewHelperManager) {
	hex_view_viewhelper_ViewHelperManager._DISPATCHER.dispatch(hex_view_viewhelper_MainViewHelperManagerMessage.VIEW_HELPER_MANAGER_RELEASE,[viewHelperManager]);
};
hex_view_viewhelper_ViewHelperManager.prototype = {
	_owner: null
	,_dispatcher: null
	,_viewHelpers: null
	,getOwner: function() {
		return this._owner;
	}
	,releaseAllViewHelpers: function() {
		var len = this._viewHelpers.length;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			var viewHelper = this._viewHelpers[len - i - 1];
			this._viewHelpers.splice(len - i - 1,1);
			viewHelper.removeHandler(hex_view_viewhelper_ViewHelperMessage.RELEASE,this,$bind(this,this._onViewHelperRelease));
			viewHelper.release();
			this._notifyViewHelperRelease(viewHelper);
		}
	}
	,buildViewHelper: function(injector,clazz,view) {
		var viewHelper = injector.instantiateUnmapped(clazz);
		if(viewHelper != null) {
			this._notifyViewHelperCreation(viewHelper);
			injector.mapToValue(clazz,viewHelper);
			viewHelper.setOwner(this._owner);
			viewHelper.set_view(view);
			viewHelper.addHandler(hex_view_viewhelper_ViewHelperMessage.RELEASE,this,$bind(this,this._onViewHelperRelease));
			this._viewHelpers.push(viewHelper);
		}
		return viewHelper;
	}
	,size: function() {
		return this._viewHelpers.length;
	}
	,_onViewHelperRelease: function(viewHelper) {
		this._notifyViewHelperRelease(viewHelper);
		var index = HxOverrides.indexOf(this._viewHelpers,viewHelper,0);
		if(index != -1) this._viewHelpers.splice(index,1);
	}
	,addListener: function(listener) {
		this._dispatcher.addHandler(hex_view_viewhelper_ViewHelperManagerMessage.VIEW_HELPER_CREATION,listener,$bind(listener,listener.onViewHelperCreation));
		this._dispatcher.addHandler(hex_view_viewhelper_ViewHelperManagerMessage.VIEW_HELPER_RELEASE,listener,$bind(listener,listener.onViewHelperRelease));
	}
	,removeListener: function(listener) {
		this._dispatcher.removeHandler(hex_view_viewhelper_ViewHelperManagerMessage.VIEW_HELPER_CREATION,listener,$bind(listener,listener.onViewHelperCreation));
		this._dispatcher.removeHandler(hex_view_viewhelper_ViewHelperManagerMessage.VIEW_HELPER_RELEASE,listener,$bind(listener,listener.onViewHelperRelease));
	}
	,_notifyViewHelperCreation: function(viewHelper) {
		this._dispatcher.dispatch(hex_view_viewhelper_ViewHelperManagerMessage.VIEW_HELPER_CREATION,[viewHelper]);
	}
	,_notifyViewHelperRelease: function(viewHelper) {
		this._dispatcher.dispatch(hex_view_viewhelper_ViewHelperManagerMessage.VIEW_HELPER_RELEASE,[viewHelper]);
	}
	,__class__: hex_view_viewhelper_ViewHelperManager
};
var hex_view_viewhelper_ViewHelperManagerMessage = function() {
};
$hxClasses["hex.view.viewhelper.ViewHelperManagerMessage"] = hex_view_viewhelper_ViewHelperManagerMessage;
hex_view_viewhelper_ViewHelperManagerMessage.__name__ = ["hex","view","viewhelper","ViewHelperManagerMessage"];
hex_view_viewhelper_ViewHelperManagerMessage.prototype = {
	__class__: hex_view_viewhelper_ViewHelperManagerMessage
};
var hex_view_viewhelper_ViewHelperMessage = function() {
};
$hxClasses["hex.view.viewhelper.ViewHelperMessage"] = hex_view_viewhelper_ViewHelperMessage;
hex_view_viewhelper_ViewHelperMessage.__name__ = ["hex","view","viewhelper","ViewHelperMessage"];
hex_view_viewhelper_ViewHelperMessage.prototype = {
	__class__: hex_view_viewhelper_ViewHelperMessage
};
var hex_viewhelper_MVCViewHelperSuite = function() {
	this.list = [hex_viewhelper_ViewHelperManagerTest];
};
$hxClasses["hex.viewhelper.MVCViewHelperSuite"] = hex_viewhelper_MVCViewHelperSuite;
hex_viewhelper_MVCViewHelperSuite.__name__ = ["hex","viewhelper","MVCViewHelperSuite"];
hex_viewhelper_MVCViewHelperSuite.prototype = {
	list: null
	,__class__: hex_viewhelper_MVCViewHelperSuite
};
var hex_viewhelper_ViewHelperManagerTest = function() { };
$hxClasses["hex.viewhelper.ViewHelperManagerTest"] = hex_viewhelper_ViewHelperManagerTest;
hex_viewhelper_ViewHelperManagerTest.__name__ = ["hex","viewhelper","ViewHelperManagerTest"];
hex_viewhelper_ViewHelperManagerTest.prototype = {
	testGetInstance: function() {
		var listener = new hex_viewhelper__$ViewHelperManagerTest_MainViewHelperManagerListener();
		hex_view_viewhelper_ViewHelperManager.addGlobalListener(listener);
		var module = new hex_module_MockModule();
		var viewHelperManager = hex_view_viewhelper_ViewHelperManager.getInstance(module);
		hex_unittest_assertion_Assert.isNotNull(viewHelperManager,"viewHelperManager shouldn't be null",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 28, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testGetInstance"});
		hex_unittest_assertion_Assert.equals(1,listener.onViewHelperManagerCreationCallbackCount,"creation event should be dispatched once",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 29, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testGetInstance"});
		hex_unittest_assertion_Assert.equals(viewHelperManager,listener.lastViewHelperManager,"viewHelperManager should be the same",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 30, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testGetInstance"});
		hex_unittest_assertion_Assert.equals(viewHelperManager,hex_view_viewhelper_ViewHelperManager.getInstance(module),"viewHelperManager should be the same",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 32, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testGetInstance"});
		hex_unittest_assertion_Assert.equals(1,listener.onViewHelperManagerCreationCallbackCount,"creation event shouldn't be dispatched again",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 33, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testGetInstance"});
		hex_unittest_assertion_Assert.equals(module,viewHelperManager.getOwner(),"owner should be the same",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 35, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testGetInstance"});
	}
	,testRelease: function() {
		var listener = new hex_viewhelper__$ViewHelperManagerTest_MainViewHelperManagerListener();
		hex_view_viewhelper_ViewHelperManager.addGlobalListener(listener);
		var module = new hex_module_MockModule();
		var viewHelperManager = hex_view_viewhelper_ViewHelperManager.getInstance(module);
		var viewHelper = viewHelperManager.buildViewHelper(new hex_MockDependencyInjector(),hex_view_viewhelper_ViewHelper,new hex_viewhelper__$ViewHelperManagerTest_MockView());
		hex_unittest_assertion_Assert.equals(1,viewHelperManager.size(),"size should return 1",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 47, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testRelease"});
		hex_view_viewhelper_ViewHelperManager.release(module);
		hex_unittest_assertion_Assert.equals(0,viewHelperManager.size(),"size should return 0",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 49, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.equals(1,listener.onViewHelperManagerReleaseCallbackCount,"release event should be dispatched once",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 51, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.equals(viewHelperManager,listener.lastViewHelperManager,"viewHelperManager should be the same",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 52, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testRelease"});
		hex_view_viewhelper_ViewHelperManager.release(module);
		hex_unittest_assertion_Assert.equals(1,listener.onViewHelperManagerReleaseCallbackCount,"release event shouldn't be dispatched again",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 55, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testRelease"});
		hex_unittest_assertion_Assert.equals(0,viewHelperManager.size(),"size should return 0",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 56, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testRelease"});
	}
	,testBuildViewHelper: function() {
		var listener = new hex_viewhelper__$ViewHelperManagerTest_ViewHelperManagerListener();
		var module = new hex_module_MockModule();
		var viewHelperManager = hex_view_viewhelper_ViewHelperManager.getInstance(module);
		viewHelperManager.addListener(listener);
		var viewHelper = viewHelperManager.buildViewHelper(new hex_MockDependencyInjector(),hex_view_viewhelper_ViewHelper,new hex_viewhelper__$ViewHelperManagerTest_MockView());
		hex_unittest_assertion_Assert.isNotNull(viewHelper,"viewHelper shouldn't be null",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 70, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.isInstanceOf(viewHelper,hex_view_viewhelper_ViewHelper,"viewHelper should be an instance of ViewHelper",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 71, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.equals(module,viewHelper.getOwner(),"owner should be the same",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 72, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.equals(1,viewHelperManager.size(),"size should return 1",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 74, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.equals(1,listener.onViewHelperCreationCallbackCount,"creation event should be dispatched once",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 76, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.equals(viewHelper,listener.lastViewHelper,"viewHelper should be the same",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 77, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		var anotherViewHelper = viewHelperManager.buildViewHelper(new hex_MockDependencyInjector(),hex_view_viewhelper_ViewHelper,new hex_viewhelper__$ViewHelperManagerTest_MockView());
		hex_unittest_assertion_Assert.isNotNull(anotherViewHelper,"viewHelper shouldn't be null",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 80, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.isInstanceOf(anotherViewHelper,hex_view_viewhelper_ViewHelper,"viewHelper should be an instance of ViewHelper",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 81, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.equals(module,anotherViewHelper.getOwner(),"owner should be the same",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 82, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.equals(2,viewHelperManager.size(),"size should return 2",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 84, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.equals(2,listener.onViewHelperCreationCallbackCount,"creation event should be dispatched once",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 86, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.equals(anotherViewHelper,listener.lastViewHelper,"viewHelper should be the same",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 87, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.notEquals(viewHelper,anotherViewHelper,"viewHelpers shouldn't be the same",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 89, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		viewHelper.release();
		hex_unittest_assertion_Assert.equals(1,viewHelperManager.size(),"size should return 1",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 92, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.equals(1,listener.onViewHelperReleaseCallbackCount,"release event should be dispatched once",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 94, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.equals(viewHelper,listener.lastViewHelper,"viewHelper should be the same",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 95, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		anotherViewHelper.release();
		hex_unittest_assertion_Assert.equals(0,viewHelperManager.size(),"size should return 0",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 98, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.equals(2,listener.onViewHelperReleaseCallbackCount,"release event should be dispatched one more time",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 100, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
		hex_unittest_assertion_Assert.equals(anotherViewHelper,listener.lastViewHelper,"viewHelper should be the same",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 101, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testBuildViewHelper"});
	}
	,testReleaseViewHelpers: function() {
		var listener = new hex_viewhelper__$ViewHelperManagerTest_ViewHelperManagerListener();
		var module = new hex_module_MockModule();
		var viewHelperManager = hex_view_viewhelper_ViewHelperManager.getInstance(module);
		viewHelperManager.addListener(listener);
		var viewHelper = viewHelperManager.buildViewHelper(new hex_MockDependencyInjector(),hex_view_viewhelper_ViewHelper,new hex_viewhelper__$ViewHelperManagerTest_MockView());
		var anotherViewHelper = viewHelperManager.buildViewHelper(new hex_MockDependencyInjector(),hex_view_viewhelper_ViewHelper,new hex_viewhelper__$ViewHelperManagerTest_MockView());
		viewHelperManager.releaseAllViewHelpers();
		hex_unittest_assertion_Assert.equals(0,viewHelperManager.size(),"size should return 0",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 118, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testReleaseViewHelpers"});
		hex_unittest_assertion_Assert.equals(2,listener.onViewHelperReleaseCallbackCount,"release event should be dispatched one more time",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 120, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testReleaseViewHelpers"});
		hex_unittest_assertion_Assert.equals(viewHelper,listener.lastViewHelper,"viewHelper should be the same",{ fileName : "ViewHelperManagerTest.hx", lineNumber : 121, className : "hex.viewhelper.ViewHelperManagerTest", methodName : "testReleaseViewHelpers"});
	}
	,__class__: hex_viewhelper_ViewHelperManagerTest
};
var hex_viewhelper__$ViewHelperManagerTest_ViewHelperManagerListener = function() {
	this.onViewHelperCreationCallbackCount = 0;
	this.onViewHelperReleaseCallbackCount = 0;
};
$hxClasses["hex.viewhelper._ViewHelperManagerTest.ViewHelperManagerListener"] = hex_viewhelper__$ViewHelperManagerTest_ViewHelperManagerListener;
hex_viewhelper__$ViewHelperManagerTest_ViewHelperManagerListener.__name__ = ["hex","viewhelper","_ViewHelperManagerTest","ViewHelperManagerListener"];
hex_viewhelper__$ViewHelperManagerTest_ViewHelperManagerListener.__interfaces__ = [hex_view_viewhelper_IViewHelperManagerListener];
hex_viewhelper__$ViewHelperManagerTest_ViewHelperManagerListener.prototype = {
	onViewHelperCreationCallbackCount: null
	,onViewHelperReleaseCallbackCount: null
	,lastViewHelper: null
	,onViewHelperCreation: function(viewHelper) {
		this.onViewHelperCreationCallbackCount++;
		this.lastViewHelper = viewHelper;
	}
	,onViewHelperRelease: function(viewHelper) {
		this.onViewHelperReleaseCallbackCount++;
		this.lastViewHelper = viewHelper;
	}
	,__class__: hex_viewhelper__$ViewHelperManagerTest_ViewHelperManagerListener
};
var hex_viewhelper__$ViewHelperManagerTest_MainViewHelperManagerListener = function() {
	this.onViewHelperManagerCreationCallbackCount = 0;
	this.onViewHelperManagerReleaseCallbackCount = 0;
};
$hxClasses["hex.viewhelper._ViewHelperManagerTest.MainViewHelperManagerListener"] = hex_viewhelper__$ViewHelperManagerTest_MainViewHelperManagerListener;
hex_viewhelper__$ViewHelperManagerTest_MainViewHelperManagerListener.__name__ = ["hex","viewhelper","_ViewHelperManagerTest","MainViewHelperManagerListener"];
hex_viewhelper__$ViewHelperManagerTest_MainViewHelperManagerListener.__interfaces__ = [hex_view_viewhelper_IMainViewHelperManagerListener];
hex_viewhelper__$ViewHelperManagerTest_MainViewHelperManagerListener.prototype = {
	onViewHelperManagerCreationCallbackCount: null
	,onViewHelperManagerReleaseCallbackCount: null
	,lastViewHelperManager: null
	,onViewHelperManagerCreation: function(viewHelperManager) {
		this.onViewHelperManagerCreationCallbackCount++;
		this.lastViewHelperManager = viewHelperManager;
	}
	,onViewHelperManagerRelease: function(viewHelperManager) {
		this.onViewHelperManagerReleaseCallbackCount++;
		this.lastViewHelperManager = viewHelperManager;
	}
	,__class__: hex_viewhelper__$ViewHelperManagerTest_MainViewHelperManagerListener
};
var hex_viewhelper__$ViewHelperManagerTest_MockView = function() {
};
$hxClasses["hex.viewhelper._ViewHelperManagerTest.MockView"] = hex_viewhelper__$ViewHelperManagerTest_MockView;
hex_viewhelper__$ViewHelperManagerTest_MockView.__name__ = ["hex","viewhelper","_ViewHelperManagerTest","MockView"];
hex_viewhelper__$ViewHelperManagerTest_MockView.__interfaces__ = [hex_view_IView];
hex_viewhelper__$ViewHelperManagerTest_MockView.prototype = {
	visible: null
	,get_visible: function() {
		return false;
	}
	,set_visible: function(visible) {
		return visible;
	}
	,__class__: hex_viewhelper__$ViewHelperManagerTest_MockView
	,__properties__: {set_visible:"set_visible",get_visible:"get_visible"}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") return new XMLHttpRequest();
	if(typeof ActiveXObject != "undefined") return new ActiveXObject("Microsoft.XMLHTTP");
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var virrealyclient_VirrealyClientMainTest = function() { };
$hxClasses["virrealyclient.VirrealyClientMainTest"] = virrealyclient_VirrealyClientMainTest;
virrealyclient_VirrealyClientMainTest.__name__ = ["virrealyclient","VirrealyClientMainTest"];
virrealyclient_VirrealyClientMainTest.main = function() {
	var emu = new hex_unittest_runner_ExMachinaUnitCore();
	emu.addListener(new hex_unittest_notifier_ConsoleNotifier(false));
	emu.addListener(new hex_unittest_notifier_BrowserUnitTestNotifier("console"));
	emu.addTest(virrealyclient_VirrealyClientSuite);
	emu.run();
};
var virrealyclient_VirrealyClientSuite = function() {
	this.list = [MachinaSuite];
};
$hxClasses["virrealyclient.VirrealyClientSuite"] = virrealyclient_VirrealyClientSuite;
virrealyclient_VirrealyClientSuite.__name__ = ["virrealyclient","VirrealyClientSuite"];
virrealyclient_VirrealyClientSuite.prototype = {
	list: null
	,__class__: virrealyclient_VirrealyClientSuite
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "serviceConfiguration", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8cm9vdD4NCgk8IS0tIFNFUlZJQ0VTIC0tPg0KCQkNCjwvcm9vdD4"},{ name : "moduleConfiguration", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8cm9vdD4NCgk8IS0tIE1PRFVMRVMgLS0+DQoJDQoJPG1vZHVsZSBpZD0ibGF5b3V0TW9kdWxlIiB0eXBlPSJ2aXJyZWFseWNsaWVudC5tb2R1bGUubGF5b3V0LkxheW91dE1vZHVsZSIgbWFwLXR5cGU9InZpcnJlYWx5Y2xpZW50Lm1vZHVsZS5sYXlvdXQuSUxheW91dE1vZHVsZSI+DQoJCTxhcmd1bWVudCByZWY9ImxheW91dFZpZXciLz4NCgk8L21vZHVsZT4NCgkNCjwvcm9vdD4"},{ name : "orderConfiguration", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8cm9vdD4NCgk8IS0tIE9SREVSIC0tPg0KCQ0KCTxzdGF0ZSBpZD0iYXNzZW1ibGluZ0VuZCIgcmVmPSJ2aXJyZWFseUNsaWVudC5zdGF0ZS5BU1NFTUJMSU5HX0VORCI+DQoJCTxlbnRlciBjb21tYW5kLWNsYXNzPSJ2aXJyZWFseWNsaWVudC5vcmRlci5ib290c3RyYXAuQm9vdHN0cmFwTWFjcm8iIGZpcmUtb25jZT0idHJ1ZSIvPg0KCTwvc3RhdGU+DQoJDQoJPHRyaWdnZXIgaWQ9Im9yZGVyTGlzdCIgdHlwZT0iT2JqZWN0Ij4NCgkJPCEtLTxsaXN0ZW4gcmVmPSJzYW1wbGVTZXJ2aWNlIj4NCgkJCTxldmVudCBzdGF0aWMtcmVmPSJ2aXJyZWFseWNsaWVudC5zYW1wbGVwYWNrYWdlLnNhbXBsZWNsYXNzLlNBTVBMRV9TVEFUSUNfUFJPUEVSVFkiIHN0cmF0ZWd5PSJ2aXJyZWFseWNsaWVudC5vcmRlci5ib290c3RyYXAuQm9vdHN0cmFwTWFjcm8iLz4NCgkJPC9saXN0ZW4+LS0+DQoJPC90cmlnZ2VyPg0KCQ0KCQ0KCQ0KPC9yb290Pg"},{ name : "viewConfigurationJS", data : "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8cm9vdD4NCgk8IS0tIFZJRVcgLS0+DQoJDQoJPHZpZXcgaWQ9ImxheW91dFZpZXciIHR5cGU9InZpcnJlYWx5Y2xpZW50Lm1vZHVsZS5sYXlvdXQudmlldy5MYXlvdXRWaWV3SlMiPg0KCQk8YXJndW1lbnQgcmVmPSJyb290IiAvPg0KCTwvdmlldz4NCjwvcm9vdD4"}];
var __map_reserved = {}
var ArrayBuffer = (Function("return typeof ArrayBuffer != 'undefined' ? ArrayBuffer : null"))() || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = (Function("return typeof DataView != 'undefined' ? DataView : null"))() || js_html_compat_DataView;
var Uint8Array = (Function("return typeof Uint8Array != 'undefined' ? Uint8Array : null"))() || js_html_compat_Uint8Array._new;
MachinaSuite.__meta__ = { fields : { list : { Suite : ["Machina suite"]}}};
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) h.setReserved("lt","<"); else h.h["lt"] = "<";
	if(__map_reserved.gt != null) h.setReserved("gt",">"); else h.h["gt"] = ">";
	if(__map_reserved.amp != null) h.setReserved("amp","&"); else h.h["amp"] = "&";
	if(__map_reserved.quot != null) h.setReserved("quot","\""); else h.h["quot"] = "\"";
	if(__map_reserved.apos != null) h.setReserved("apos","'"); else h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
hex_HexCoreSuite.__meta__ = { fields : { list : { Suite : ["HexCore"]}}};
hex_HexInjectSuite.__meta__ = { fields : { list : { Suite : ["HexInject suite"]}}};
hex_HexIoCSuite.__meta__ = { fields : { list : { Suite : ["HexIoC suite"]}}};
hex_HexMVCSuite.__meta__ = { fields : { list : { Suite : ["HexMVC"]}}};
hex_HexServiceSuite.__meta__ = { fields : { list : { Suite : ["HexService"]}}};
hex_HexUnitSuite.__meta__ = { fields : { list : { Suite : ["HexUnit suite"]}}};
hex_collection_CoreCollectionSuite.__meta__ = { fields : { list : { Suite : ["Collection"]}}};
hex_collection_HashMapTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testIsEmpty : { Test : ["Test 'isEmpty' behavior"]}, testClear : { Test : ["Test 'clear' behavior"]}, testPutAndGet : { Test : ["Test 'put' and 'get' behaviors"]}, testRemove : { Test : ["Test 'remove' behavior"]}, testSize : { Test : ["Test 'size' behavior"]}, testContainsKey : { Test : ["Test 'containsKey' behavior"]}, testContainsValue : { Test : ["Test 'containsValue' behavior"]}, testGetKeysAndGetValues : { Test : ["Test 'getKeys' and 'getValues' behaviors"]}, testClassKey : { Test : ["Test with Class key"]}}};
hex_collection_LocatorMessage.REGISTER = new hex_event_MessageType("onRegister");
hex_collection_LocatorMessage.UNREGISTER = new hex_event_MessageType("onUnregister");
hex_collection_LocatorTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testRegisterKeyString : { Test : ["Test building a locator with String keys"]}, testIsEmpty : { Test : ["Test 'isEmpty' behavior"]}}};
hex_config_MVCConfigSuite.__meta__ = { fields : { list : { Suite : ["Config"]}}};
hex_config_stateful_MVCStatefulConfigSuite.__meta__ = { fields : { list : { Suite : ["Stateful"]}}};
hex_config_stateful_ServiceLocatorTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testConfigureWithInstanceOfNotAStatefulService : { Test : ["Test configure with instance of not a stateful service"]}, testGetServiceWithStatelessServiceUnnamed : { Test : ["Test getService with stateless service unnamed"]}, testGetServiceWithStatelessServiceNamed : { Test : ["Test getService with stateless service named"]}, testConfigureWithStatelessServiceUnnamed : { Test : ["Test configure with stateless service unnnamed"]}, testConfigureWithStatelessServiceNamed : { Test : ["Test configure with stateless service named"]}, testGetServiceWithStatefulServiceUnnamed : { Test : ["Test getService with stateful service unnamed"]}, testGetServiceWithStatefulServiceNamed : { Test : ["Test getService with stateful service named"]}, testConfigureWithStatefulServiceUnnamed : { Test : ["Test configure with stateful service unnnamed"]}, testConfigureWithStatefulServiceNamed : { Test : ["Test configure with stateful service named"]}}};
hex_service_AbstractService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.service.AbstractService\",\"methods\":[]}"]}, fields : { createConfiguration : { postConstruct : null}}};
hex_service_stateful_StatefulService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.service.stateful.StatefulService\",\"methods\":[]}"]}};
hex_config_stateful__$ServiceLocatorTest_MockStatefulService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.config.stateful.ServiceLocatorTest\",\"methods\":[]}"]}};
hex_config_stateful_StatefulCommandConfig.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.config.stateful.StatefulCommandConfig\",\"methods\":[]}"]}};
hex_config_stateful_StatefulCommandConfigTest.__meta__ = { fields : { testConfigureThrowsInjectorMissingMappingError : { Test : ["Test 'configure' throws 'InjectorMissingMappingError'"]}, testMapBehavior : { Test : ["Test 'map' behavior"]}}};
hex_control_FrontControllerTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testMap : { Test : ["Test map"]}, testUnmap : { Test : ["Test unmap"]}, testRequestHandling : { Test : ["Functional test of request handling"]}}};
hex_control__$FrontControllerTest_MockCommand.executeCallCount = 0;
hex_control_MVCControlSuite.__meta__ = { fields : { list : { Suite : ["Control"]}}};
hex_control_async_AsyncCommand.WAS_NEVER_USED = "WAS_NEVER_USED";
hex_control_async_AsyncCommand.IS_RUNNING = "IS_RUNNING";
hex_control_async_AsyncCommand.IS_COMPLETED = "IS_COMPLETED";
hex_control_async_AsyncCommand.IS_FAILED = "IS_FAILED";
hex_control_async_AsyncCommand.IS_CANCELLED = "IS_CANCELLED";
hex_control_async_AsyncCommand._POOL = new haxe_ds_ObjectMap();
hex_control_async_AsyncCommandMessage.COMPLETE = new hex_event_MessageType("onAsyncCommandComplete");
hex_control_async_AsyncCommandMessage.FAIL = new hex_event_MessageType("onAsyncCommandFail");
hex_control_async_AsyncCommandMessage.CANCEL = new hex_event_MessageType("onAsyncCommandCancel");
hex_control_async_AsyncCommandTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testCallPreExecuteTwice : { Test : ["Test preExecute"]}, testGetResult : { Test : ["Test get result"]}, testGetOwner : { Test : ["Test owner"]}, testExecute : { Test : ["Test execute"]}, testCancel : { Test : ["Test cancel"]}, testComplete : { Test : ["Test complete"]}, testFail : { Test : ["Test fail"]}}};
hex_control_async_AsyncCommandUtilTest.__meta__ = { fields : { testAddListenersToAsyncCommand : { Test : ["Test addListenersToAsyncCommand"]}}};
hex_control_async_MVCAsyncSuite.__meta__ = { fields : { list : { Suite : ["Async"]}}};
hex_control_command_CommandExecutorTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, textExecuteCommand : { Test : ["Test command execution"]}, textExecuteCommandWithMappingResults : { Test : ["Test command execution with mapping results"]}}};
hex_control_command__$CommandExecutorTest_MockCommandUsingMappingResults.__meta__ = { fields : { value : { Inject : null}}};
hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.executeCallCount = 0;
hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.preExecuteCallCount = 0;
hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.completeHandlers = [];
hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.failHandlers = [];
hex_control_command__$CommandExecutorTest_MockAsyncCommandForTestingExecution.cancelHandlers = [];
hex_control_command_CommandMappingTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testGetCommandClass : { Test : ["Test getCommandClass"]}, testGuards : { Test : ["Test guards"]}, testIsFireOnce : { Test : ["Test isFiredOnce"]}, testPayloads : { Test : ["Test payloads"]}, testCompleteHandlers : { Test : ["Test complete handlers"]}, testFailHandlers : { Test : ["Test fail handlers"]}, testCancelHandlers : { Test : ["Test cancel handlers"]}, testMappingResults : { Test : ["Test mappingResults"]}, testSetLastCommandInstance : { Test : ["Test setLastCommandInstance"]}}};
hex_log_LogLevel._ALL = new hex_log_LogLevel(0);
hex_log_LogLevel._DEBUG = new hex_log_LogLevel(10000);
hex_log_LogLevel._INFO = new hex_log_LogLevel(20000);
hex_log_LogLevel._WARN = new hex_log_LogLevel(30000);
hex_log_LogLevel._ERROR = new hex_log_LogLevel(40000);
hex_log_LogLevel._FATAL = new hex_log_LogLevel(50000);
hex_log_LogLevel._OFF = new hex_log_LogLevel(60000);
js_Boot.__toStr = {}.toString;
hex_control_command__$CommandMappingTest_MockCommand.returnedExecutionPayload = [new hex_control_payload_ExecutionPayload("s",String)];
hex_control_command_MVCCommandSuite.__meta__ = { fields : { list : { Suite : ["Command"]}}};
hex_control_guard_GuardUtilTest.__meta__ = { fields : { testGuardClassApproveWithoutInjector : { Test : ["Test guard-class approval without injector"]}, testGuardClassApproveWithInjector : { Test : ["Test guard-class approval with injector"]}}};
hex_control_macro_MVCMacroSuite.__meta__ = { fields : { list : { Suite : ["Macro"]}}};
hex_control_macro_Macro.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"macroExecutor\",\"type\":\"hex.control.macro.IMacroExecutor\",\"key\":\"\"}],\"name\":\"hex.control.macro.Macro\",\"methods\":[]}"]}};
hex_control_macro_MacroExecutor.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"injector\",\"type\":\"hex.di.IBasicInjector\",\"key\":\"\"}],\"name\":\"hex.control.macro.MacroExecutor\",\"methods\":[]}"]}};
hex_control_macro_MacroExecutorTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testCommandIndex : { Test : ["Test commandIndex"]}, testHasNextCommandMapping : { Test : ["Test hasNextCommandMapping"]}, testHasRunEveryCommand : { Async : ["Test hasRunEveryCommand"]}, testExecuteNextCommand : { Test : ["Test executeNextCommand"]}, testAsyncCommandCalled : { Test : ["Test asyncCommandCalled"]}, testAdd : { Test : ["Test add"]}, testAddMapping : { Test : ["Test add mapping"]}, testExecuteCommand : { Test : ["Test command execution"]}, testExecuteCommandWithApprovedGuards : { Test : ["Test command execution with approved guards"]}, testExecuteCommandWithRefusedGuards : { Test : ["Test command execution with refused guards"]}, textExecuteCommandWithMappingResults : { Test : ["Test command execution with mapping results"]}}};
hex_control_macro__$MacroExecutorTest_MockCommandUsingMappingResults.__meta__ = { fields : { value : { Inject : null}}};
hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.executeCallCount = 0;
hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.preExecuteCallCount = 0;
hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.completeHandlers = [];
hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.failHandlers = [];
hex_control_macro__$MacroExecutorTest_MockAsyncCommandForTestingExecution.cancelHandlers = [];
hex_control_macro_MacroTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testIsAtomic : { Test : ["Test atomic property"]}, testParallelAndSequenceModes : { Test : ["Test parallel and sequence modes"]}, testPreExecute : { Test : ["Test preExecute without overriding prepare"]}, testAddCommand : { Test : ["Test addComand"]}, testAddMapping : { Test : ["Test addMapping"]}, testExecuteEmptyMacro : { Test : ["Test execute empty macro"]}, testExecuteTriggersHandleComplet : { Test : ["Test execute triggers 'handleComplete'"]}, testWithGuardsApproved : { Test : ["Test with guards approved"]}, testWithGuardsRefused : { Test : ["Test with guards refused"]}, testParallelMode : { Test : ["Test parallel mode"]}, testSequenceMode : { Async : ["Test sequence mode"]}, testAddCommandAfterFirstRun : { Async : ["Test add command after first run"]}}};
hex_control_macro__$MacroTest_MockCommand.executeCallCount = 0;
hex_control_macro__$MacroTest_MockEmptyMacro.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"macroExecutor\",\"type\":\"hex.control.macro.IMacroExecutor\",\"key\":\"\"}],\"name\":\"hex.control.macro.MacroTest\",\"methods\":[]}"]}};
hex_control_macro__$MacroTest_MockEmptyMacroWithPrepareOverriden.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"macroExecutor\",\"type\":\"hex.control.macro.IMacroExecutor\",\"key\":\"\"}],\"name\":\"hex.control.macro.MacroTest\",\"methods\":[]}"]}};
hex_control_macro__$MacroTest_MockMacro.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"macroExecutor\",\"type\":\"hex.control.macro.IMacroExecutor\",\"key\":\"\"}],\"name\":\"hex.control.macro.MacroTest\",\"methods\":[]}"]}};
hex_control_macro__$MacroTest_MockMacroWithHandler.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"macroExecutor\",\"type\":\"hex.control.macro.IMacroExecutor\",\"key\":\"\"}],\"name\":\"hex.control.macro.MacroTest\",\"methods\":[]}"]}};
hex_control_payload_ExecutionPayloadTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testConstructor : { Test : ["Test constructor"]}, testConstructorNullException : { Test : ["Test constructor null exception"]}, testConstructorThrowsIllegalArgumentException : { Test : ["Test constructor throws IllegalArgumentException"]}, testOverwritingType : { Test : ["Test overwriting type property"]}, testOverwritingName : { Test : ["Test overwriting name property"]}, testNoNameParameterToConstructor : { Test : ["Test passing no name parameter to constructor"]}}};
hex_control_payload_MVCPayloadSuite.__meta__ = { fields : { list : { Suite : ["Payload"]}}};
hex_control_payload_PayloadUtilTest.__meta__ = { fields : { testMapping : { Test : ["Test mapping"]}, testUnmapping : { Test : ["Test unmapping"]}}};
hex_core_CoreCoreSuite.__meta__ = { fields : { list : { Suite : ["Core"]}}};
hex_core_HashCodeFactory._nKEY = 0;
hex_core_HashCodeFactory._M = new haxe_ds_ObjectMap();
hex_core_HashCodeFactoryTest.__meta__ = { fields : { testConstructorNullException : { Test : ["Test constructor can't be called"]}, testGetNextKey : { Test : ["Test 'getNextKEY' and 'previewKey' behaviors"]}, testGetKey : { Test : ["Test 'getKEY' behavior"]}}};
hex_di_CoreDiSuite.__meta__ = { fields : { list : { Suite : ["Di"]}}};
hex_di_DISuite.__meta__ = { fields : { list : { Suite : ["DI suite"]}}};
hex_di_InjectionEvent.POST_INSTANTIATE = "onPostInstantiate";
hex_di_InjectionEvent.PRE_CONSTRUCT = "onPreConstruct";
hex_di_InjectionEvent.POST_CONSTRUCT = "onPostConstruct";
hex_di_InjectionEventTest.__meta__ = { fields : { testType : { Test : ["Test 'type' parameter passed to constructor"]}, testTarget : { Test : ["Test 'target' parameter passed to constructor"]}, testClone : { Test : ["Test clone method"]}, testParameters : { Test : ["Test parameters passed to constructor"]}}};
hex_di_InjectorTest.__meta__ = { fields : { runBeforeEachTest : { Before : null}, teardown : { After : null}, testUnmapRemovesExistingMapping : { Test : ["Test 'unmap' remvoves existing mapping"]}, testMapToValueWithClassParameter : { Test : ["Test 'mapToValue' with class parameter"]}, testMapToValueWithInterfaceParameter : { Test : ["Test 'mapToValue' with interface parameter"]}, testMapToValueWithNamedClassParameter : { Test : ["Test 'mapToValue' with named class parameter"]}, testMapToValueWithNamedInterfaceParameter : { Test : ["Test 'mapToValue' with named interface parameter"]}, testMapToValueWithEmptyStringValue : { Test : ["Test 'mapToValue' with empty String value"]}, testMappedValueIsNotInjectedIntoRecursively : { Test : ["Test mapped value is not injected into recursively"]}, testMapMultipleInterfacesToOneSingletonClass : { Test : ["Test map multiple interfacs to one singleton class"]}, testMapClassToTypeCreatesNewInstance : { Test : ["Test map class to type creates a new instance"]}, testMapClassToTypeProduceNewInstancesInjectedInto : { Test : ["Test map class to type produce new instances injected into"]}, testMapInterfaceToType : { Test : ["Test map interface to type"]}, testMapClassToTypeByName : { Test : ["Test map class to type by name"]}, testMapInterfaceToTypeByName : { Test : ["Test map interface to type by name"]}, mapClassToSingletonProvideUniqueInstance : { Test : ["Test map class to singleton provide unique instance"]}, testMapInterfaceToSingletonProvideUniqueInstance : { Test : ["Test map interface to singleton provide unique instance"]}, testMapSameInterfaceWithDifferentNamesToDifferentSingletonsProvideDifferentInstances : { Test : ["Test map same interface with different names to different singletons provide different instances"]}, testSetterInjectionFulfillsDependency : { Ignore : ["Test setter injection fulfills dependency"]}, testOneParameterMethodInjection : { Test : ["Test one parameter method injection"]}, testOneNamedParameterMethodInjection : { Test : ["Test one named parameter method injection"]}, testTwoParametersMethodInjection : { Test : ["Test two parameters method injection"]}, testTwoNamedParametersMethodInjection : { Test : ["Test two named parameters method injection"]}, testNamedAndUnnamedParametersMethodInjection : { Test : ["Test named and unnamed parameters method injection"]}, testGetMappingResultWithoutProviderThrowsAnException : { Test : ["Test get mapping result without provider throws an exception"]}, testOneParameterConstructorInjection : { Test : ["Test one parameter constructor injection"]}, testTwoParametersConstructorInjection : { Test : ["Test two parameters constructor injection"]}, testOneNamedParameterConstructorInjection : { Test : ["Test one named parameter constructor injection"]}, testTwoNamedParametersConstructorInjection : { Test : ["Test two named parameters constructor injection"]}, testNamedAndUnnamedParametersConstructorInjection : { Test : ["Test named and unnamed parameters constructor injection"]}, testNamedArrayInjection : { Test : ["Test named Array injection"]}, testInjectXmlValue : { Test : ["Test inject Xml value"]}, testMissingInterfaceMappingThrowsAnException : { Test : ["Test missing interface mapping throws an exception"]}, testMissingClassMappingThrowsAnException : { Test : ["Test missing class mapping throws an exception"]}, testMissingNamedClassMappingThrowsAnException : { Test : ["Test missing named class mapping throws an exception"]}, testPostConstructMethodIsCalled : { Test : ["Test posConstruct method is called"]}, testPostConstructMethodWithArgIsCalled : { Test : ["Test posConstruct method with arg is called"]}, testPostConstructMethodAreCalledInTheRightOrder : { Test : ["Test posConstruct method with arg are called in the right order"]}, testSatisfiesReturnsFalseForUnmappedAndUnnamedInterface : { Test : ["Test 'satisfies' returns false for unmapped and unnamed interface"]}, testSatisfiesReturnsFalseForUnmappedAndUnnamedClass : { Test : ["Test 'satisfies' returns false for unmapped and unnamed class"]}, testSatisfiesReturnsFalseForUnmappedAndNamedClass : { Test : ["Test 'satisfies' returns false for unmapped and named class"]}, testSatisfiesReturnsTrueForMappedAndUnnamedClass : { Test : ["Test 'satisfies' returns true for mapped and unnamed class"]}, testSatisfiesReturnsTrueForMappedAndNamedClass : { Test : ["Test 'satisfies' returns true for mapped and named class"]}, testGetInstanceThrowsAnErrorForUnmappedClass : { Test : ["Test 'getInstance' throws an error for unmapped class"]}, testInstantiateUnmappedWorksWithUnmappedClass : { Test : ["Test 'instantiateUnmapped' works with unmapped class"]}, testGetInstanceThrowsAnErrorForUnmappedAndNamedClass : { Test : ["Test 'getInstance' throws an error for unmapped and named class"]}, testGetInstanceReturnsMappedValueForMappedAndUnnamedClass : { Test : ["Test 'getInstance' returns mapped value for mapped and unnamed class"]}, testGetInstanceReturnsMappedValueForMappedAndNamedClass : { Test : ["Test 'getInstance' returns mapped value for mapped and named class"]}, testMapToSingletonTwiceTargetsTheSameInstance : { Test : ["Test map to singleton twice targets the same instance"]}, testUnmapSingletonRemovesTheSingletonInstance : { Test : ["Test unmap singleton removes the singleton instance"]}, testGetInstanceOnUmappedInterfaceThrowsException : { Test : null}, testInstantiateClassWithOptionalProperty : { Test : ["Test instantiate class with optional property"]}, testInstantiateClassWithOptionalMethodArgument : { Test : ["Test instantiate class with optional method argument"]}, testInjectorDispatchesPostInstantiateEvent : { Test : ["Test injector dispatches POST_INSTANTIATE event"]}, testInjectorDispatchesPreConstructEvent : { Test : ["Test injector dispatches PRE_CONSTRUCT event"]}, testInjectorDispatchesPostConstructEvent : { Test : ["Test injector dispatches POST_CONSTRUCT event"]}, testInjectorEventsContainsInstanceReference : { Test : ["Test injector events contain instance reference"]}, testInjectIntoDispatchesPreConstructEvent : { Test : ["Test 'injectInto' dispatches PRE_CONSTRUCT event"]}, testInjectIntoDispatchesPostConstructEvent : { Test : ["Test 'injectInto' dispatches POST_CONSTRUCT event"]}, testUnmapSingletonProviderInvokesPredestroyMethodsOnSingleton : { Test : ["Test unmap singleton provider invokes PreDestroy methods on singleton"]}, testDestroyInstanceInvokesPredestroyMethodsOnInstance : { Test : ["Test 'destroyIntance' invoke PreDestroy methods on instance"]}, testTeardownDestroyAllSingletons : { Test : ["Test 'teardown' destroy all singletons"]}, testTeardownDestroysAllInstancesInjectedInto : { Test : ["Test 'teardown' destroys all instances injected into"]}, testStatisfiesReturnsFalseForUnmappedCommonBaseTypes : { Test : ["Test satisfies returns false for unmapped common base types"]}, testMapInjectorToValue : { Test : ["Test map injector to value"]}, testInstantiateUnmappedReturnsNewInstanceWhenMappedInstanceExists : { Test : ["Test 'instantiateUnmapped' returns new instance when mapped instance exists"]}, testHasMappingReturnsTrueForParentMapping : { Test : ["Test hasMapping returns true for parent mapping"]}, testHasMappingReturnsFalseWhenMappingDoesntExist : { Test : ["Test 'hasMapping' returns false when mapping doesn't exist"]}, testHasDirectMappingReturnsFalseForParentMapping : { Test : ["Test 'hasDirectMapping' returns false for parent mapping"]}, hasMappingReturnsTrueForTypeLocalMapping : { Test : ["Test 'hasMapping' returns true for type local mapping"]}, hasMappingReturnsTrueForValueLocalMapping : { Test : ["Test 'hasMapping' returns true for value local mapping"]}, hasDirectMappingReturnsTrueForLocalMapping : { Test : ["Test 'hasDirectMapping' returns true for local mapping"]}, testGetOrCreateNewInstanceProvidesMappedValue : { Test : ["Test 'getOrCreateNewInstance' provides mapped value"]}, testGetOrCreateNewInstanceInstantiatesWhenNoMappingWasFound : { Test : ["Test 'getOrCreateNewInstance' instantiates when no mapping was found"]}, testGetOrCreateNewInstanceInstantiatesEachTimeWhenNoMappingWasFound : { Test : ["Test 'getOrCreateNewInstance' instantiates each time when no mapping was found"]}, testTwoParamConstructorInjectionWithConstructorInjectedDependencies : { Test : ["Test two params constructor injection with constructor injected dependencies"]}}};
hex_di_annotation_AnnotationReaderTest.__meta__ = { statics : { beforeClass : { BeforeClass : null}, afterClass : { AfterClass : null}}, fields : { testGetAnnotationDataWithClassName : { Test : ["test get annotation data with class name"]}, testGetPropertyAnnotation : { Test : ["test get property annotation"]}, testGetConstructorAnnotation : { Test : ["test get constructor annotation"]}, testGetMethodAnnotation : { Test : ["test get method annotation"]}}};
hex_di_annotation_AnnotationSuite.__meta__ = { fields : { list : { Suite : ["Annotation suite"]}}};
hex_di_annotation_mock_MockInjectorContainer.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[{\"isOpt\":false,\"type\":\"hex.log.ILogger\",\"key\":\"name0\"},{\"isOpt\":false,\"type\":\"hex.domain.Domain\",\"key\":\"\"},{\"isOpt\":true,\"type\":\"String\",\"key\":\"name2\"}],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"property0\",\"type\":\"hex.log.ILogger\",\"key\":\"name0\"},{\"isOpt\":false,\"name\":\"property1\",\"type\":\"hex.domain.Domain\",\"key\":\"\"},{\"isOpt\":true,\"name\":\"property2\",\"type\":\"String\",\"key\":\"name2\"}],\"name\":\"hex.di.annotation.mock.MockInjectorContainer\",\"methods\":[{\"args\":[],\"isPre\":false,\"name\":\"beforeInit\",\"isPost\":true,\"order\":2},{\"args\":[{\"isOpt\":false,\"type\":\"hex.domain.Domain\",\"key\":\"\"}],\"isPre\":false,\"name\":\"preInit\",\"isPost\":true,\"order\":0},{\"args\":[{\"isOpt\":false,\"type\":\"hex.log.ILogger\",\"key\":\"name0\"},{\"isOpt\":false,\"type\":\"hex.domain.Domain\",\"key\":\"\"},{\"isOpt\":true,\"type\":\"String\",\"key\":\"name2\"}],\"isPre\":false,\"name\":\"init\",\"isPost\":true,\"order\":1},{\"args\":[{\"isOpt\":false,\"type\":\"hex.log.ILogger\",\"key\":\"\"}],\"isPre\":false,\"name\":\"setLogger\",\"isPost\":false,\"order\":0},{\"args\":[{\"isOpt\":false,\"type\":\"hex.domain.Domain\",\"key\":\"name\"}],\"isPre\":false,\"name\":\"setDomain\",\"isPost\":false,\"order\":0},{\"args\":[],\"isPre\":true,\"name\":\"beforeDestroy\",\"isPost\":false,\"order\":2},{\"args\":[{\"isOpt\":false,\"type\":\"hex.domain.Domain\",\"key\":\"\"}],\"isPre\":true,\"name\":\"preDestroy\",\"isPost\":false,\"order\":1},{\"args\":[{\"isOpt\":false,\"type\":\"hex.log.ILogger\",\"key\":\"name0\"},{\"isOpt\":false,\"type\":\"hex.domain.Domain\",\"key\":\"\"},{\"isOpt\":true,\"type\":\"String\",\"key\":\"name2\"}],\"isPre\":true,\"name\":\"destroy\",\"isPost\":false,\"order\":0},{\"args\":[],\"isPre\":true,\"name\":\"testDestroy\",\"isPost\":false,\"order\":0},{\"args\":[],\"isPre\":false,\"name\":\"testConstruct\",\"isPost\":true,\"order\":0}]}"]}};
hex_di_mock_injectees_ClassInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"property\",\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"\"}],\"name\":\"hex.di.mock.injectees.ClassInjectee\",\"methods\":[{\"args\":[],\"isPre\":false,\"name\":\"doSomeStuff\",\"isPost\":true,\"order\":1}]}"]}};
hex_di_mock_injectees_ComplexClassInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"property\",\"type\":\"hex.di.mock.types.ComplexClazz\",\"key\":\"\"}],\"name\":\"hex.di.mock.injectees.ComplexClassInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_InjectorInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"injector\",\"type\":\"hex.di.IDependencyInjector\",\"key\":\"\"}],\"name\":\"hex.di.mock.injectees.InjectorInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_InterfaceInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"property\",\"type\":\"hex.di.mock.types.Interface\",\"key\":\"\"}],\"name\":\"hex.di.mock.injectees.InterfaceInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_MixedParametersConstructorInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"namedDep\"},{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"\"},{\"isOpt\":false,\"type\":\"hex.di.mock.types.Interface\",\"key\":\"namedDep2\"}],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.MixedParametersConstructorInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_MixedParametersMethodInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.MixedParametersMethodInjectee\",\"methods\":[{\"args\":[{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"namedDep\"},{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"\"},{\"isOpt\":false,\"type\":\"hex.di.mock.types.Interface\",\"key\":\"namedDep2\"}],\"isPre\":false,\"name\":\"setDependencies\",\"isPost\":false,\"order\":0}]}"]}};
hex_di_mock_injectees_MultipleSingletonsOfSameClassInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"property1\",\"type\":\"hex.di.mock.types.Interface\",\"key\":\"\"},{\"isOpt\":false,\"name\":\"property2\",\"type\":\"hex.di.mock.types.Interface2\",\"key\":\"\"}],\"name\":\"hex.di.mock.injectees.MultipleSingletonsOfSameClassInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_NamedArrayCollectionInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"ac\",\"type\":\"Array\",\"key\":\"namedCollection\"}],\"name\":\"hex.di.mock.injectees.NamedArrayCollectionInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_NamedClassInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"property\",\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"Name\"}],\"name\":\"hex.di.mock.injectees.NamedClassInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_NamedClassInjectee.NAME = "Name";
hex_di_mock_injectees_NamedInterfaceInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"property\",\"type\":\"hex.di.mock.types.Interface\",\"key\":\"Name\"}],\"name\":\"hex.di.mock.injectees.NamedInterfaceInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_NamedInterfaceInjectee.NAME = "Name";
hex_di_mock_injectees_OneNamedParameterConstructorInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"namedDependency\"}],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.OneNamedParameterConstructorInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_OneNamedParameterMethodInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.OneNamedParameterMethodInjectee\",\"methods\":[{\"args\":[{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"namedDep\"}],\"isPre\":false,\"name\":\"setDependency\",\"isPost\":false,\"order\":0}]}"]}};
hex_di_mock_injectees_OneParameterConstructorInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"\"}],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.OneParameterConstructorInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_OneParameterMethodInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.OneParameterMethodInjectee\",\"methods\":[{\"args\":[{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"\"}],\"isPre\":false,\"name\":\"setDependency\",\"isPost\":false,\"order\":0}]}"]}};
hex_di_mock_injectees_OptionalClassInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":true,\"name\":\"property\",\"type\":\"hex.di.mock.types.Interface\",\"key\":\"\"}],\"name\":\"hex.di.mock.injectees.OptionalClassInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_OptionalOneRequiredParameterMethodInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.OptionalOneRequiredParameterMethodInjectee\",\"methods\":[{\"args\":[{\"isOpt\":true,\"type\":\"hex.di.mock.types.Interface\",\"key\":\"\"}],\"isPre\":false,\"name\":\"setDependency\",\"isPost\":false,\"order\":0}]}"]}};
hex_di_mock_injectees_OrderedPostConstructInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.OrderedPostConstructInjectee\",\"methods\":[{\"args\":[],\"isPre\":false,\"name\":\"methodTwo\",\"isPost\":true,\"order\":2},{\"args\":[],\"isPre\":false,\"name\":\"methodFour\",\"isPost\":true,\"order\":8},{\"args\":[],\"isPre\":false,\"name\":\"methodThree\",\"isPost\":true,\"order\":5},{\"args\":[],\"isPre\":false,\"name\":\"methodOne\",\"isPost\":true,\"order\":1}]}"]}};
hex_di_mock_injectees_PostConstructWithArgInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.PostConstructWithArgInjectee\",\"methods\":[{\"args\":[{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"\"}],\"isPre\":false,\"name\":\"doSomeStuff\",\"isPost\":true,\"order\":0}]}"]}};
hex_di_mock_injectees_RecursiveInterfaceInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"interfaceInjectee\",\"type\":\"hex.di.mock.injectees.InterfaceInjectee\",\"key\":\"\"}],\"name\":\"hex.di.mock.injectees.RecursiveInterfaceInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_SetterInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.SetterInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_StringInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"property\",\"type\":\"String\",\"key\":\"\"}],\"name\":\"hex.di.mock.injectees.StringInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_TwoNamedInterfaceFieldsInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"property1\",\"type\":\"hex.di.mock.types.Interface\",\"key\":\"Name1\"},{\"isOpt\":false,\"name\":\"property2\",\"type\":\"hex.di.mock.types.Interface\",\"key\":\"Name2\"}],\"name\":\"hex.di.mock.injectees.TwoNamedInterfaceFieldsInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_TwoNamedParametersConstructorInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"namedDependency\"},{\"isOpt\":false,\"type\":\"String\",\"key\":\"namedDependency2\"}],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.TwoNamedParametersConstructorInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_TwoNamedParametersMethodInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.TwoNamedParametersMethodInjectee\",\"methods\":[{\"args\":[{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"namedDep\"},{\"isOpt\":false,\"type\":\"hex.di.mock.types.Interface\",\"key\":\"namedDep2\"}],\"isPre\":false,\"name\":\"setDependencies\",\"isPost\":false,\"order\":0}]}"]}};
hex_di_mock_injectees_TwoParametersConstructorInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"\"},{\"isOpt\":false,\"type\":\"String\",\"key\":\"\"}],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.TwoParametersConstructorInjectee\",\"methods\":[]}"]}};
hex_di_mock_injectees_TwoParametersConstructorInjecteeWithConstructorInjectedDependencies.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[{\"isOpt\":false,\"type\":\"hex.di.mock.injectees.OneParameterConstructorInjectee\",\"key\":\"\"},{\"isOpt\":false,\"type\":\"hex.di.mock.injectees.TwoParametersConstructorInjectee\",\"key\":\"\"}],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.TwoParametersConstructorInjecteeWithConstructorInjectedDependencies\",\"methods\":[]}"]}};
hex_di_mock_injectees_TwoParametersMethodInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.injectees.TwoParametersMethodInjectee\",\"methods\":[{\"args\":[{\"isOpt\":false,\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"\"},{\"isOpt\":false,\"type\":\"hex.di.mock.types.Interface\",\"key\":\"\"}],\"isPre\":false,\"name\":\"setDependencies\",\"isPost\":false,\"order\":0}]}"]}};
hex_di_mock_injectees_XMLInjectee.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"property\",\"type\":\"Xml\",\"key\":\"\"}],\"name\":\"hex.di.mock.injectees.XMLInjectee\",\"methods\":[]}"]}};
hex_di_mock_types_Clazz.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.di.mock.types.Clazz\",\"methods\":[{\"args\":[],\"isPre\":true,\"name\":\"preDestroy\",\"isPost\":false,\"order\":0}]}"]}};
hex_di_mock_types_ComplexClazz.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"value\",\"type\":\"hex.di.mock.types.Clazz\",\"key\":\"\"}],\"name\":\"hex.di.mock.types.ComplexClazz\",\"methods\":[]}"]}};
hex_domain_Domain._domainNames = new haxe_ds_StringMap();
hex_domain_DomainUtil._domain = new haxe_ds_StringMap();
hex_domain_TopLevelDomain.DOMAIN = hex_domain_DomainUtil.getDomain("TopLevelDomain",hex_domain_TopLevelDomain);
hex_domain_ApplicationDomainDispatcher._Instance = new hex_domain_ApplicationDomainDispatcher();
hex_domain_CoreDomainSuite.__meta__ = { fields : { list : { Suite : ["Domain"]}}};
hex_domain_DefaultDomain.DOMAIN = hex_domain_DomainUtil.getDomain("DefaultDomain",hex_domain_DefaultDomain);
hex_domain_DomainExpert._Instance = new hex_domain_DomainExpert();
hex_domain_DomainExpert._DomainIndex = 0;
hex_domain_DomainTest.__meta__ = { fields : { testConstructor : { Test : ["Test 'name' property passed to constructor"]}, testConstructorNullException : { Test : ["Test null 'name' value passed to constructor"]}, testConstructorWithNameValues : { Test : ["Test using twice the same 'name' value"]}}};
hex_domain_NoDomain.DOMAIN = hex_domain_DomainUtil.getDomain("NoDomain",hex_domain_NoDomain);
hex_event_BasicEventTest.__meta__ = { fields : { testType : { Test : ["Test 'type' parameter passed to constructor"]}, testTarget : { Test : ["Test 'target' parameter passed to constructor"]}, testClone : { Test : ["Test clone method"]}}};
hex_event_CallbackAdapterTest.__meta__ = { fields : { testGetCallbackAdapter : { Test : ["Test getCallbackAdapter"]}}};
hex_event_ClassAdapterTest.__meta__ = { fields : { testSimpleCallToGetCallbackAdapter : { Test : ["Test simple call to getCallbackAdapter"]}, testCallToGetCallbackAdapterWithFactory : { Test : ["Test call to getCallbackAdapter with factory"]}, testCallToGetCallbackAdapterWithAdapterMacro : { Test : ["Test call to getCallbackAdapter with MacroAdapterStrategy"]}}};
hex_event_MacroAdapterStrategy.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"macroExecutor\",\"type\":\"hex.control.macro.IMacroExecutor\",\"key\":\"\"}],\"name\":\"hex.event.MacroAdapterStrategy\",\"methods\":[]}"]}};
hex_event__$ClassAdapterTest_MockMacroAdapterStrategy.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"macroExecutor\",\"type\":\"hex.control.macro.IMacroExecutor\",\"key\":\"\"}],\"name\":\"hex.event.ClassAdapterTest\",\"methods\":[]}"]}};
hex_event__$ClassAdapterTest_MockAsyncCommand.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"data\",\"type\":\"hex.event._ClassAdapterTest.MockValueObject\",\"key\":\"\"}],\"name\":\"hex.event.ClassAdapterTest\",\"methods\":[]}"]}};
hex_event_CompositeClosureDispatcherTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}}};
hex_event_CoreEventSuite.__meta__ = { fields : { list : { Suite : ["Event"]}}};
hex_event_DispatcherTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testAddListener : { Test : ["Test 'addListener' behavior"]}, testRemoveListener : { Test : ["Test 'removeListener' behavior"]}, testAddHandler : { Test : ["Test 'addHandler' behavior"]}, testRemoveHandler : { Test : ["Test 'removeHandler' behavior"]}, testIsEmptyWithAddHandler : { Test : ["Test 'isEmpty' behavior with 'addHandler'"]}, testIsEmptyWithAddListener : { Test : ["Test 'isEmpty' behavior with 'addListener'"]}, testDispatch : { Test : ["Test 'dispatch' behavior"]}, testRemoveAllListeners : { Test : ["Test 'removeAllListeners' behavior"]}, testIsRegistered : { Test : ["Test 'isRegistered' behavior"]}, testHasHandler : { Test : ["Test 'hasHandler' behavior"]}, testSealActivationOnRemoveListener : { Test : ["Test seal activation on 'removeListener' during dispatching"]}, testSealActivationOnAddListener : { Test : ["Test seal activation on 'addListener' during dispatching"]}, testSealActivationOnRemoveHandler : { Test : ["Test seal activation on 'removeHandler' during dispatching"]}, testSealActivationOnAddHandler : { Test : ["Test seal activation on 'addHandler' during dispatching"]}, testSealActivationOnRemoveAllListeners : { Test : ["Test seal activation on 'removeAllListeners' during dispatching"]}, testDispatchWithHandleMessageCallback : { Test : ["Test 'dispatch' behavior with 'handleMessage' callback"]}}};
hex_event_EventDispatcherTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testAddListener : { Test : ["Test 'addListener' behavior"]}, testRemoveListener : { Test : ["Test 'removeListener' behavior"]}, testAddEventListener : { Test : ["Test 'addEventListener' behavior"]}, testRemoveEventListener : { Test : ["Test 'removeEventListener' behavior"]}, testIsEmptyWithAddEventListener : { Test : ["Test 'isEmpty' behavior with 'addEventListener'"]}, testIsEmptyWithAddListener : { Test : ["Test 'isEmpty' behavior with 'addListener'"]}, testDispatchEvent : { Test : ["Test 'dispatchEvent' behavior"]}, testRemoveAllListeners : { Test : ["Test 'removeAllListeners' behavior"]}, testIsRegistered : { Test : ["Test 'isRegistered' behavior"]}, testHasEventListener : { Test : ["Test 'hasEventListener' behavior"]}, testSealActivationOnRemoveListener : { Test : ["Test seal activation on 'removeListener' during dispatching"]}, testSealActivationOnAddListener : { Test : ["Test seal activation on 'addListener' during dispatching"]}, testSealActivationOnRemoveEventListener : { Test : ["Test seal activation on 'removeEventListener' during dispatching"]}, testSealActivationOnAddEventListener : { Test : ["Test seal activation on 'addEventListener' during dispatching"]}, testSealActivationOnRemoveAllListeners : { Test : ["Test seal activation on 'removeAllListeners' during dispatching"]}}};
hex_event_EventProxyTest.__meta__ = { fields : { testEventProxyconstructor : { Test : ["Test EventProxy constructor"]}, testEventProxyHandlingCallback : { Test : ["Test EventProxy handling callback"]}}};
hex_event_EventSuite.__meta__ = { fields : { list : { Suite : ["Event suite"]}}};
hex_event_LightweightClosureDispatcherTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testAddListener : { Test : ["Test 'addListener' behavior"]}, testRemoveListener : { Test : ["Test 'removeListener' behavior"]}, testAddEventListener : { Test : ["Test 'addEventListener' behavior"]}, testRemoveEventListener : { Test : ["Test 'removeEventListener' behavior"]}, testIsEmptyWithAddEventListener : { Test : ["Test 'isEmpty' behavior with 'addEventListener'"]}, testDispatchEvent : { Test : ["Test 'dispatchEvent' behavior"]}, testRemoveAllListeners : { Test : ["Test 'removeAllListeners' behavior"]}, testIsRegistered : { Test : ["Test 'isRegistered' behavior"]}, testHasEventListener : { Test : ["Test 'hasEventListener' behavior"]}, testSealActivationOnRemoveEventListener : { Test : ["Test seal activation on 'removeEventListener' during dispatching"]}, testSealActivationOnAddEventListener : { Test : ["Test seal activation on 'addEventListener' during dispatching"]}, testSealActivationOnRemoveAllListeners : { Test : ["Test seal activation on 'removeAllListeners' during dispatching"]}}};
hex_event_LightweightListenerDispatcherTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testAddListener : { Test : ["Test 'addListener' behavior"]}, testRemoveListener : { Test : ["Test 'removeListener' behavior"]}, testAddEventListener : { Test : ["Test 'addEventListener' behavior"]}, testRemoveEventListener : { Test : ["Test 'removeEventListener' behavior"]}, testIsEmptyWithAddListener : { Test : ["Test 'isEmpty' behavior with 'addListener'"]}, testDispatchEvent : { Test : ["Test 'dispatchEvent' behavior"]}, testRemoveAllListeners : { Test : ["Test 'removeAllListeners' behavior"]}, testIsRegistered : { Test : ["Test 'isRegistered' behavior"]}, testHasEventListener : { Test : ["Test 'hasEventListener' behavior"]}, testSealActivationOnRemoveListener : { Test : ["Test seal activation on 'removeListener' during dispatching"]}, testSealActivationOnAddListener : { Test : ["Test seal activation on 'addListener' during dispatching"]}, testSealActivationOnRemoveAllListeners : { Test : ["Test seal activation on 'removeAllListeners' during dispatching"]}}};
hex_event_MVCEventSuite.__meta__ = { fields : { list : { Suite : ["event"]}}};
hex_event_MethodRunnerEventTest.__meta__ = { fields : { testType : { Test : ["Test 'type' parameter passed to constructor"]}, testTarget : { Test : ["Test 'target' parameter passed to constructor"]}, testClone : { Test : ["Test clone method"]}, testAccessors : { Test : ["Test parameters passed to constructor with accessors"]}}};
hex_event_TestRunnerEventTest.__meta__ = { fields : { testType : { Test : ["Test 'type' parameter passed to constructor"]}, testTarget : { Test : ["Test 'target' parameter passed to constructor"]}, testClone : { Test : ["Test clone method"]}, testAccessors : { Test : ["Test parameters passed to constructor with accessors"]}}};
hex_ioc_IOCSuite.__meta__ = { fields : { list : { Suite : ["IOC"]}}};
hex_ioc_assembler_ApplicationAssemblerMessage.CONTEXT_PARSED = new hex_event_MessageType("onContextParsed");
hex_ioc_assembler_ApplicationAssemblerMessage.ASSEMBLING_START = new hex_event_MessageType("onAssemblingStart");
hex_ioc_assembler_ApplicationAssemblerMessage.STATE_TRANSITIONS_BUILT = new hex_event_MessageType("onStateTransitionsBuilt");
hex_ioc_assembler_ApplicationAssemblerMessage.OBJECTS_BUILT = new hex_event_MessageType("onObjectsBuilt");
hex_ioc_assembler_ApplicationAssemblerMessage.METHODS_CALLED = new hex_event_MessageType("onMethodsCalled");
hex_ioc_assembler_ApplicationAssemblerMessage.DOMAIN_LISTENERS_ASSIGNED = new hex_event_MessageType("onDomainListenersAssigned");
hex_ioc_assembler_ApplicationAssemblerMessage.MODULES_INITIALIZED = new hex_event_MessageType("onModulesInitialized");
hex_ioc_assembler_ApplicationAssemblerMessage.ASSEMBLING_END = new hex_event_MessageType("onAssemblingEnd");
hex_ioc_assembler_ApplicationAssemblerTest.__meta__ = { fields : { testAddConditionalProperty : { Test : ["Test addConditionalProperty behavior"]}, testStrictMode : { Test : ["Test strict mode"]}}};
hex_ioc_assembler_ApplicationContextTest.__meta__ = { fields : { testAccessors : { Test : ["Test accessors"]}, testChildren : { Test : ["Test children"]}}};
hex_ioc_assembler_IoCAssemblerSuite.__meta__ = { fields : { list : { Suite : ["Assembler"]}}};
hex_ioc_control_BuildArrayCommandTest.__meta__ = { fields : { testExecute : { Test : ["Test executet"]}, testExecuteWithNoArgumentArray : { Test : ["Test execute with no argument array"]}, testExecuteWithEmptyArgumentArray : { Test : ["Test execute with empty argument array"]}, testExecuteWithNullArgument : { Test : ["Test execute with null argument"]}}};
hex_ioc_control_BuildBooleanCommandTest.__meta__ = { fields : { testExecuteWithTrueArgument : { Test : ["Test execute with true argument"]}, testExecuteWithFalseArgument : { Test : ["Test execute with false argument"]}, testExecuteWithInvalidArgument : { Test : ["Test execute with invalid argument"]}, testExecuteWithNoArgumentArray : { Test : ["Test execute with no argument array"]}, testExecuteWithEmptyArgumentArray : { Test : ["Test execute with empty argument array"]}, testExecuteWithNullArgument : { Test : ["Test execute with null argument"]}}};
hex_ioc_control_BuildClassCommandTest.__meta__ = { fields : { testExecute : { Test : ["Test execute"]}, testExecuteWithInvalidArgument : { Test : ["Test execute with invalid argument"]}, testExecuteWithNoArgumentArray : { Test : ["Test execute with no argument array"]}, testExecuteWithEmptyArgumentArray : { Test : ["Test execute with empty argument array"]}, testExecuteWithNullArgument : { Test : ["Test execute with null argument"]}}};
hex_ioc_control_BuildFloatCommandTest.__meta__ = { fields : { testExecuteWithPositiveValue : { Test : ["Test execute with positive value"]}, testExecuteWithNegativeValue : { Test : ["Test execute with negative value"]}, testExecuteWithInvalidArgument : { Test : ["Test execute with invalid argument"]}, testExecuteWithNoArgumentArray : { Test : ["Test execute with no argument array"]}, testExecuteWithEmptyArgumentArray : { Test : ["Test execute with empty argument array"]}, testExecuteWithNullArgument : { Test : ["Test execute with null argument"]}}};
hex_ioc_control_BuildIntcommandTest.__meta__ = { fields : { testExecuteWithPositiveValue : { Test : ["Test execute with positive value"]}, testExecuteWithNegativeValue : { Test : ["Test execute with negative value"]}, testExecuteWithInvalidArgument : { Test : ["Test execute with invalid argument"]}, testExecuteWithNoArgumentArray : { Test : ["Test execute with no argument array"]}, testExecuteWithEmptyArgumentArray : { Test : ["Test execute with empty argument array"]}, testExecuteWithNullArgument : { Test : ["Test execute with null argument"]}}};
hex_ioc_control_BuildNullCommandTest.__meta__ = { fields : { testExecute : { Test : ["Test execute"]}}};
hex_ioc_control_BuildStringCommandTest.__meta__ = { fields : { testExecute : { Test : ["Test execute"]}, testExecuteWithNoArgumentArray : { Test : ["Test execute with no argument array"]}, testExecuteWithEmptyArgumentArray : { Test : ["Test execute with empty argument array"]}, testExecuteWithNullArgument : { Test : ["Test execute with null argument"]}, testExecuteWithArgumentZeroLength : { Test : ["Test execute with argument zero length"]}}};
hex_ioc_control_BuildUIntCommandTest.__meta__ = { fields : { testExecute : { Test : ["Test execute"]}, testExecuteWithNegativeArgumentValue : { Ignore : ["Test execute with negative argument value"]}, testExecuteWithInvalidArgument : { Test : ["Test execute with invalid argument"]}, testExecuteWithNoArgumentArray : { Test : ["Test execute with no argument array"]}, testExecuteWithEmptyArgumentArray : { Test : ["Test execute with empty argument array"]}, testExecuteWithNullArgument : { Test : ["Test execute with null argument"]}}};
hex_ioc_control_IoCControlSuite.__meta__ = { fields : { list : { Suite : ["Control"]}}};
hex_ioc_core_ContextAttributeList.ID = "id";
hex_ioc_core_ContextAttributeList.TYPE = "type";
hex_ioc_core_ContextAttributeList.NAME = "name";
hex_ioc_core_ContextAttributeList.REF = "ref";
hex_ioc_core_ContextAttributeList.VALUE = "value";
hex_ioc_core_ContextAttributeList.FACTORY = "factory";
hex_ioc_core_ContextAttributeList.SINGLETON_ACCESS = "singleton-access";
hex_ioc_core_ContextAttributeList.INJECT_INTO = "inject-into";
hex_ioc_core_ContextAttributeList.METHOD = "method";
hex_ioc_core_ContextAttributeList.PARSER_CLASS = "parser-class";
hex_ioc_core_ContextAttributeList.LOCATOR = "locator";
hex_ioc_core_ContextAttributeList.MAP_TYPE = "map-type";
hex_ioc_core_ContextAttributeList.MAP_NAME = "map-name";
hex_ioc_core_ContextAttributeList.STRATEGY = "strategy";
hex_ioc_core_ContextAttributeList.INJECTED_IN_MODULE = "injectedInModule";
hex_ioc_core_ContextAttributeList.STATIC_REF = "static-ref";
hex_ioc_core_ContextAttributeList.COMMAND_CLASS = "command-class";
hex_ioc_core_ContextAttributeList.FIRE_ONCE = "fire-once";
hex_ioc_core_ContextAttributeList.CONTEXT_OWNER = "context-owner";
hex_ioc_core_ContextAttributeList.IF = "if";
hex_ioc_core_ContextAttributeList.IF_NOT = "if-not";
hex_ioc_core_ContextNameList.PROPERTY = "property";
hex_ioc_core_ContextNameList.ARGUMENT = "argument";
hex_ioc_core_ContextNameList.METHOD_CALL = "method-call";
hex_ioc_core_ContextNameList.LISTEN = "listen";
hex_ioc_core_ContextNameList.ITEM = "item";
hex_ioc_core_ContextNameList.KEY = "key";
hex_ioc_core_ContextNameList.VALUE = "value";
hex_ioc_core_ContextNameList.MAP_NAME = "map-name";
hex_ioc_core_ContextNameList.EVENT = "event";
hex_ioc_core_ContextNameList.ENTER = "enter";
hex_ioc_core_ContextNameList.EXIT = "exit";
hex_ioc_core_ContextNameList.ROOT = "root";
hex_ioc_core_ContextTypeList.ARRAY = "Array";
hex_ioc_core_ContextTypeList.BOOLEAN = "Bool";
hex_ioc_core_ContextTypeList.INSTANCE = "Instance";
hex_ioc_core_ContextTypeList.INT = "Int";
hex_ioc_core_ContextTypeList.NULL = "null";
hex_ioc_core_ContextTypeList.FLOAT = "Float";
hex_ioc_core_ContextTypeList.OBJECT = "Object";
hex_ioc_core_ContextTypeList.STRING = "String";
hex_ioc_core_ContextTypeList.UINT = "UInt";
hex_ioc_core_ContextTypeList.DEFAULT = "Default";
hex_ioc_core_ContextTypeList.HASHMAP = "hex.collection.HashMap";
hex_ioc_core_ContextTypeList.SERVICE_LOCATOR = "hex.config.stateful.ServiceLocator";
hex_ioc_core_ContextTypeList.CLASS = "Class";
hex_ioc_core_ContextTypeList.XML = "XML";
hex_ioc_core_ContextTypeList.FUNCTION = "Function";
hex_ioc_core_CoreFactory._fastEvalMethod = hex_util_FastEval.fromTarget;
hex_ioc_core_CoreFactoryTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testRegister : { Test : ["Test register"]}, testUnregisterWithKey : { Test : ["Test unregisterWithKey"]}, testUnregister : { Test : ["Test unregister"]}, testGetKeyOfInstance : { Test : ["Test getKeyOfInstance"]}, testGetClassReference : { Test : ["Test getClassReference"]}, testGetStaticReference : { Test : ["Test getStaticReference"]}, testBuildInstanceWithArguments : { Test : ["Test buildInstance with arguments"]}, testBuildInstanceWithSingletonAccess : { Test : ["Test buildInstance with singleton access"]}, testBuildInstanceWithFactoryAccess : { Test : ["Test buildInstance with factory access"]}, testBuildInstanceWithFactoryAndSingletonAccess : { Test : ["Test buildInstance with factory and singleton access"]}, testBuildInstanceWithInjector : { Test : ["Test buildInstance with injector"]}}};
hex_ioc_core_CoreFactoryTest.STATIC_REF = "static_ref";
hex_ioc_core_IoCCoreSuite.__meta__ = { fields : { list : { Suite : ["Core"]}}};
hex_ioc_parser_AbstractParserCommand.__meta__ = { fields : { execute : { 'final' : null}, setApplicationAssembler : { 'final' : null}, getApplicationAssembler : { 'final' : null}, getContextData : { 'final' : null}}};
hex_ioc_parser_IoCParserSuite.__meta__ = { fields : { list : { Suite : ["Parser"]}}};
hex_ioc_parser_xml_AbstractXMLParser.__meta__ = { fields : { getApplicationContext : { 'final' : null}, setContextData : { 'final' : null}, getXMLContext : { 'final' : null}}};
hex_ioc_parser_xml_IoCXmlSuite.__meta__ = { fields : { list : { Suite : ["Xml"]}}};
hex_ioc_parser_xml_ObjectXMLParserTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testBuildingString : { Test : ["test building String"]}, testBuildingAnonymousObject : { Test : ["test building anonymous object"]}, testBuildingSimpleInstanceWithArguments : { Test : ["test building simple instance with arguments"]}, testBuildingMultipleInstancesWithReferences : { Test : ["test building multiple instances with references"]}, testBuildingMultipleInstancesWithMethodCall : { Test : ["test building multiple instances with method calls"]}, testBuildingInstanceWithSingletonMethod : { Test : ["test building instance with singleton method"]}, testBuildingInstanceWithFactoryStaticMethod : { Test : ["test building instance with factory static method"]}, testFactoryWithFactorySingletonMethod : { Test : ["test building instance with factory singleton method"]}, testInjectIntoAttribute : { Test : ["test 'inject-into' attribute"]}, testBuildingXMLWithParserClass : { Test : ["test building XML with parser class"]}, testBuildingArrayFilledWithReferences : { Test : ["test building Array filled with references"]}, testBuildingMapFilledWithReferences : { Test : ["test building Map filled with references"]}, testBuildingTwoModulesListeningEachOther : { Test : ["test building two modules listening each other"]}, testBuildingTwoModulesListeningEachOtherWithAdapter : { Test : ["test building two modules listening each other with adapter"]}, testBuildingTwoModulesListeningEachOtherWithAdapterAndInjection : { Test : ["test building two modules listening each other with adapter and injection"]}, testDomainDispatchAfterModuleInitialisation : { Test : ["test domain dispatch after module initialisation"]}, testBuildingDifferentApplicationContext : { Ignore : ["test building different applicationContext"]}, testTargetSubProperty : { Test : ["test target sub property"]}, testBuildingClassReference : { Test : ["test building class reference"]}, testBuildingServiceLocator : { Test : ["test building serviceLocator"]}, testBuildingServiceLocatorWithMapNames : { Test : ["test building serviceLocator with map names"]}, testParsingTwice : { Test : ["test parsing twice"]}, testModuleListeningService : { Test : ["test module listening service"]}, testModuleListeningServiceWithStrategyAndModuleInjection : { Test : ["test module listening service with strategy and module injection"]}, testModuleListeningServiceWithStrategyAndContextInjection : { Test : ["test module listening service with strategy and context injection"]}, testStaticRef : { Test : ["test static-ref"]}, testEventProxy : { Async : ["test EventProxy"]}, testEventTrigger : { Async : ["test EventTrigger"]}, testMapTypeAttribute : { Test : ["test map-type attribute"]}, testIfAttribute : { Test : ["test if attribute"]}, testFilePreprocessor : { Test : ["test file preprocessor"]}, testAnotherFilePreprocessor : { Test : ["test file preprocessor"]}}};
hex_ioc_parser_xml_XMLFileReader._includeMatcher = new EReg("<include.*?file=(\"|')([^\"']+)\\1.*?(?:(?:/>)|(?:>[\\W\\w\t\r\n]*?</include *>))","g");
hex_ioc_parser_xml_XMLFileReader._headerMatcher = new EReg("(?:<\\?xml[^>]+>\\s*)<([a-zA-Z0-9-_:]+)[^>]*>([\\s\\S]*)</\\1\\s*>","");
hex_ioc_parser_xml_XMLFileReader._rootFolder = "";
hex_ioc_parser_xml_XMLFileReader._primType = ["String","Int","UInt","Float","Bool","null","Object","XML","Class","Function","Array"];
hex_ioc_parser_xml_XmlParserUtilTest.__meta__ = { fields : { testGetArgumentsWithListOfArguments : { Test : ["test getArguments with list of arguments"]}, testGetArgumentsWithSingleArgument : { Test : ["test getArguments with single argument"]}, testGetEventArguments : { Test : ["test getEventArguments"]}}};
hex_ioc_parser_xml_assembler_ApplicationAssemblerStateTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testBuildingStateTransitions : { Test : ["test building state transitions"]}, testExtendingStateTransitions : { Test : ["test extending state transitions"]}}};
hex_ioc_parser_xml_assembler_mock_MockStateCommand.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"context\",\"type\":\"hex.ioc.assembler.ApplicationContext\",\"key\":\"\"}],\"name\":\"hex.ioc.parser.xml.assembler.mock.MockStateCommand\",\"methods\":[]}"]}};
hex_ioc_parser_xml_assembler_mock_MockStateCommand.callCount = 0;
hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"module\",\"type\":\"hex.module.IModule\",\"key\":\"\"}],\"name\":\"hex.ioc.parser.xml.assembler.mock.MockStateCommandWithModule\",\"methods\":[]}"]}};
hex_ioc_parser_xml_assembler_mock_MockStateCommandWithModule.callCount = 0;
hex_ioc_parser_xml_assembler_mock_MockStateContextMessage.APPLICATION_INIT = new hex_event_MessageType("onApplicationInit");
hex_ioc_parser_xml_assembler_mock_MockStateContextMessage.SWITCH_STATE = new hex_event_MessageType("onSwitchState");
hex_ioc_parser_xml_assembler_mock_MockStateContextMessage.SWITCH_BACK = new hex_event_MessageType("onSwitchBack");
hex_ioc_parser_xml_context_ApplicationContextBuildingTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testApplicationContextBuilding : { Test : ["test applicationContext building"]}}};
hex_service_stateless_StatelessService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.service.stateless.StatelessService\",\"methods\":[]}"]}};
hex_service_stateless_StatelessService.WAS_NEVER_USED = "WAS_NEVER_USED";
hex_service_stateless_StatelessService.IS_RUNNING = "IS_RUNNING";
hex_service_stateless_StatelessService.IS_COMPLETED = "IS_COMPLETED";
hex_service_stateless_StatelessService.IS_FAILED = "IS_FAILED";
hex_service_stateless_StatelessService.IS_CANCELLED = "IS_CANCELLED";
hex_ioc_parser_xml_mock_AnotherMockAmazonService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.ioc.parser.xml.mock.AnotherMockAmazonService\",\"methods\":[{\"args\":[],\"isPre\":false,\"name\":\"createConfiguration\",\"isPost\":true,\"order\":0}]}"]}};
hex_ioc_parser_xml_mock_MockAmazonService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.ioc.parser.xml.mock.MockAmazonService\",\"methods\":[{\"args\":[],\"isPre\":false,\"name\":\"createConfiguration\",\"isPost\":true,\"order\":0}]}"]}};
hex_ioc_parser_xml_mock_MockChatAdapterStrategyMacro.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"macroExecutor\",\"type\":\"hex.control.macro.IMacroExecutor\",\"key\":\"\"},{\"isOpt\":false,\"name\":\"module\",\"type\":\"hex.ioc.parser.xml.mock.MockReceiverModule\",\"key\":\"receiver\"}],\"name\":\"hex.ioc.parser.xml.mock.MockChatAdapterStrategyMacro\",\"methods\":[]}"]}};
hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyCommand.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"parser\",\"type\":\"hex.ioc.parser.xml.mock.IMockMessageParserModule\",\"key\":\"parser\"},{\"isOpt\":false,\"name\":\"message\",\"type\":\"String\",\"key\":\"\"}],\"name\":\"hex.ioc.parser.xml.mock.MockChatEventAdapterStrategyCommand\",\"methods\":[]}"]}};
hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyMacro.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"macroExecutor\",\"type\":\"hex.control.macro.IMacroExecutor\",\"key\":\"\"}],\"name\":\"hex.ioc.parser.xml.mock.MockChatEventAdapterStrategyMacro\",\"methods\":[]}"]}};
hex_ioc_parser_xml_mock_MockChatEventAdapterStrategyWithInjection.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"parser\",\"type\":\"hex.ioc.parser.xml.mock.IMockMessageParserModule\",\"key\":\"parser\"}],\"name\":\"hex.ioc.parser.xml.mock.MockChatEventAdapterStrategyWithInjection\",\"methods\":[]}"]}};
hex_ioc_parser_xml_mock_MockChatModule.TEXT_INPUT = new hex_event_MessageType("onTextInput");
hex_ioc_parser_xml_mock_MockClassWithInjectedProperty.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"property\",\"type\":\"String\",\"key\":\"\"}],\"name\":\"hex.ioc.parser.xml.mock.MockClassWithInjectedProperty\",\"methods\":[]}"]}};
hex_ioc_parser_xml_mock_MockFacebookService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.ioc.parser.xml.mock.MockFacebookService\",\"methods\":[]}"]}, fields : { createConfiguration : { postConstruct : null}}};
hex_ioc_parser_xml_mock_MockIntDividerEventAdapterStrategy.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"helper\",\"type\":\"hex.ioc.parser.xml.mock.IMockDividerHelper\",\"key\":\"mockDividerHelper\"}],\"name\":\"hex.ioc.parser.xml.mock.MockIntDividerEventAdapterStrategy\",\"methods\":[]}"]}};
hex_ioc_parser_xml_mock_MockStubStatefulService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.ioc.parser.xml.mock.MockStubStatefulService\",\"methods\":[]}"]}, fields : { createConfiguration : { postConstruct : null}}};
hex_ioc_parser_xml_mock_MockStubStatefulService.INT_VO_UPDATE = new hex_event_MessageType("onIntVOUpdate");
hex_ioc_parser_xml_mock_MockStubStatefulService.BOOLEAN_VO_UPDATE = new hex_event_MessageType("onBooleanVOUpdate");
hex_ioc_parser_xml_mock_MockTranslationModule.TRANSLATION = new hex_event_MessageType("onTranslation");
hex_ioc_parser_xml_state_StatefulStateMachineConfigTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testStateMachineConfiguration : { Test : ["test statemachine configuration"]}}};
hex_ioc_parser_xml_state_mock_MockStateEnum.INITIAL_STATE = new hex_state_State("initial");
hex_ioc_parser_xml_state_mock_MockStateEnum.NEXT_STATE = new hex_state_State("nextState");
hex_ioc_parser_xml_state_mock_MockStateMessage.TRIGGER_NEXT_STATE = new hex_event_MessageType("triggerNextState");
hex_ioc_vo_IoCVOSuite.__meta__ = { fields : { list : { Suite : ["VO"]}}};
hex_log_LoggerMessage.LOG = new hex_event_MessageType("onLog");
hex_log_LoggerMessage.CLEAR = new hex_event_MessageType("onClear");
hex_metadata_AnnotationProvider._Instance = new hex_metadata_AnnotationProvider();
hex_metadata_AnnotationProvider._Domains = new haxe_ds_ObjectMap();
hex_metadata_AnnotationProvider._META_DATA = new hex_collection_HashMap();
hex_metadata_AnnotationProviderTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testRegisterBeforeParsing : { Test : ["Test register before parsing"]}, testRegisterAfterParsing : { Test : ["Test register after parsing"]}, testWithModule : { Test : ["Test with module"]}, testClearMethod : { Test : ["Test clear method"]}}};
hex_metadata_MVCMetadataSuite.__meta__ = { fields : { list : { Suite : ["Metadata"]}}};
hex_metadata_MockObjectWithAnnotation.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.metadata.MockObjectWithAnnotation\",\"methods\":[]}"]}, fields : { colorTest : { color : ["white"]}, languageTest : { language : ["welcome"]}}};
hex_metadata_MockWithoutIAnnotationParsableImplementation.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.metadata.MockWithoutIAnnotationParsableImplementation\",\"methods\":[]}"]}, fields : { languageTest : { language : ["welcome"]}}};
hex_module_MVCModuleSuite.__meta__ = { fields : { list : { Suite : ["Module"]}}};
hex_module_ModuleMessage.INITIALIZED = new hex_event_MessageType("onModuleInitialisation");
hex_module_ModuleMessage.RELEASED = new hex_event_MessageType("onModuleRelease");
hex_module_ModuleTest.__meta__ = { fields : { testconstructor : { Test : ["Test constructor"]}, testAddStatefulConfig : { Test : ["Test _addStatefulConfigs protected method"]}, testAddStatelessConfig : { Test : ["Test _addStatelessConfigClasses protected method"]}, testRuntimeDependencies : { Test : ["Test runtime dependencies"]}, testGetBasicInjector : { Test : ["Test getBasicInjector behavior"]}, testInitialize : { Test : ["Test initialize"]}, testRelease : { Test : ["Test release"]}}};
hex_module__$ModuleTest_MockStatelessConfig.wasInstantiated = 0;
hex_module__$ModuleTest_MockStatelessConfig.configureWasCalled = 0;
hex_service_AbstractServiceTest.__meta__ = { fields : { testGetConfiguration : { Test : ["Test 'getConfiguration' accessor"]}, testVirtualMethods : { Test : ["Test virtual methods"]}}};
hex_service_MockService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.service.MockService\",\"methods\":[]}"]}};
hex_service__$AbstractServiceTest_MockServiceWithConfigurationSetter.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.service.AbstractServiceTest\",\"methods\":[]}"]}};
hex_service_ServiceConfigurationTest.__meta__ = { fields : { testDefaultServiceTimeout : { Test : ["Test 'serviceTimeout' default value from constructor"]}, testServiceTimeout : { Test : ["Test 'serviceTimeout' parameter passed to constructor"]}}};
hex_service_ServiceServiceSuite.__meta__ = { fields : { list : { Suite : ["Service"]}}};
hex_service_ServiceURLConfigurationTest.__meta__ = { fields : { testServiceURL : { Test : ["Test 'serviceURL' parameter passed to constructor"]}}};
hex_service_monitor_BasicServiceMonitor.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.service.monitor.BasicServiceMonitor\",\"methods\":[]}"]}};
hex_service_monitor_MVCMonitorSuite.__meta__ = { fields : { list : { Suite : ["Monitor"]}}};
hex_service_monitor_ServiceMonitorMessage.ERROR = new hex_event_MessageType("onServiceMonitorError");
hex_service_monitor_ServiceMonitorMessage.FATAL = new hex_event_MessageType("onFatalServiceMonitorError");
hex_service_stateless_AsyncStatelessService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.service.stateless.AsyncStatelessService\",\"methods\":[]}"]}};
hex_service_stateless_AsyncStatelessService.HAS_TIMEOUT = "HAS_TIMEOUT";
hex_service_stateless_AsyncStatelessService._POOL = new hex_collection_HashMap();
hex_service_stateless_http_HTTPService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.service.stateless.http.HTTPService\",\"methods\":[]}"]}};
hex_service_monitor_http_AnotherMockHTTPService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"serviceMonitor\",\"type\":\"hex.service.monitor.IServiceMonitor\",\"key\":\"\"}],\"name\":\"hex.service.monitor.http.AnotherMockHTTPService\",\"methods\":[]}"]}};
hex_service_monitor_http_AnotherMockHTTPService.serviceCallCount = 0;
hex_service_monitor_http_BasicHTTPServiceErrorStrategyTest.__meta__ = { fields : { testStrategyRetry : { Async : ["Test that BasicHTTPServiceErrorStrategy instance recalls service 3 times"]}, testTwoStrategyRetryAtTheSameTime : { Async : ["Test two different BasicHTTPServiceErrorStrategy instances at the same time"]}}};
hex_service_monitor_http_MockHTTPService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"serviceMonitor\",\"type\":\"hex.service.monitor.IServiceMonitor\",\"key\":\"\"}],\"name\":\"hex.service.monitor.http.MockHTTPService\",\"methods\":[]}"]}};
hex_service_monitor_http_MockHTTPService.serviceCallCount = 0;
hex_service_stateful_MVCStatefulServiceSuite.__meta__ = { fields : { list : { Suite : [" Stateful"]}}};
hex_service_stateful_StatefulServiceTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testSetConfiguration : { Test : ["Test 'setConfiguration' method"]}, testLockAndRelease : { Test : ["Test 'lock' and 'release' behavior"]}, testAddAndRemoveHandler : { Test : ["Test event subscription"]}, testRemoveAllListeners : { Test : ["Test removeAllListeners"]}}};
hex_service_stateful__$StatefulServiceTest_MockStatefulService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.service.stateful.StatefulServiceTest\",\"methods\":[]}"]}};
hex_service_stateful__$StatefulServiceTest_MockMessage.ON_SAMPLE = new hex_event_MessageType("onSample");
hex_service_stateless_AsyncStatelessServiceMessage.TIMEOUT = new hex_event_MessageType("onServiceTimeout");
hex_service_stateless_AsyncStatelessServiceTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testResult : { Test : ["test result accessors"]}, testResultWithParser : { Test : ["test result accessors with parser"]}, testConfigurationAccessors : { Test : ["Test configuration accessors"]}, testTimeoutDurationAccessors : { Test : ["Test timeoutDuration accessors"]}, testCall : { Test : ["test call"]}, testRelease : { Test : ["test release"]}, testHandleCancel : { Test : ["Test handleCancel"]}, testHandleComplete : { Test : ["Test handleComplete"]}, testHandleFail : { Test : ["Test handleFail"]}, testTimeout : { Test : ["test timeout"]}, test_getRemoteArgumentsCall : { Test : ["Test _getRemoteArguments call without override"]}, test_resetCall : { Test : ["Test _reset call"]}}};
hex_service_stateless_MVCStatelessServiceSuite.__meta__ = { fields : { list : { Suite : ["Stateless"]}}};
hex_service_stateless_MockAsyncStatelessService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.service.stateless.MockAsyncStatelessService\",\"methods\":[]}"]}};
hex_service_stateless_MockStatelessService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.service.stateless.MockStatelessService\",\"methods\":[]}"]}};
hex_service_stateless_StatelessServiceMessage.COMPLETE = new hex_event_MessageType("onServiceComplete");
hex_service_stateless_StatelessServiceMessage.FAIL = new hex_event_MessageType("onServiceFail");
hex_service_stateless_StatelessServiceMessage.CANCEL = new hex_event_MessageType("onServiceCancel");
hex_service_stateless_StatelessServiceTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testGetConfiguration : { Test : ["Test 'getConfiguration' accessor"]}, testResult : { Test : ["test result accessors"]}, testResultWithParser : { Test : ["test result accessors with parser"]}, testCall : { Test : ["test call"]}, testRelease : { Test : ["test release"]}, testHandleCancel : { Test : ["Test handleCancel"]}, testHandleComplete : { Test : ["Test handleComplete"]}, testHandleFail : { Test : ["Test handleFail"]}, test_getRemoteArgumentsCall : { Test : ["Test _getRemoteArguments call without override"]}, test_resetCall : { Test : ["Test _reset call"]}}};
hex_service_stateless_http_DefaultHTTPServiceParameterFactoryTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testSetParameters : { Ignore : ["Test normal parameter passing"]}, testSetParameters_withExludedParams : { Ignore : ["Test mapping with excluded params"]}, testSetParameters_withNullParam : { Ignore : ["Test if a null parameter converted to emty string"]}}};
hex_service_stateless_http_HTTPServiceTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testResult : { Test : ["test result accessors"]}, testResultWithParser : { Test : ["test result accessors with parser"]}, testConfigurationAccessors : { Test : ["Test configuration accessors"]}, testTimeoutDurationAccessors : { Test : ["Test timeoutDuration accessors"]}, testCall : { Test : ["test call"]}, testErrorThrownWithServiceCall : { Test : ["test error thrown with service call"]}, testRelease : { Test : ["test release"]}, testHandleCancel : { Test : ["Test handleCancel"]}, testHandleComplete : { Test : ["Test handleComplete"]}, testHandleFail : { Test : ["Test handleFail"]}, testTimeout : { Ignore : ["test timeout"]}, test_getRemoteArgumentsCall : { Test : ["Test _getRemoteArguments call without override"]}, test_resetCall : { Test : ["Test _reset call"]}}};
hex_service_stateless_http_HTTPSuite.__meta__ = { fields : { list : { Suite : ["HTTP suite"]}}};
hex_service_stateless_http_MockHTTPService.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[],\"name\":\"hex.service.stateless.http.MockHTTPService\",\"methods\":[]}"]}, fields : { createConfiguration : { postConstruct : null}}};
hex_state_HexStateSuite.__meta__ = { fields : { list : { Suite : ["HexState"]}}};
hex_state_StateMachineTest.__meta__ = { fields : { setUp : { Before : null}, tearDown : { After : null}, testGetStates : { Test : ["Test 'getStates' behavior"]}, testAddResetMessageType : { Test : ["Test 'addResetMessageType' behavior"]}, testStateController : { Test : ["Test StateController"]}, testMessagesTriggerStateChangeWithInjection : { Test : ["Test messages trigger state change with injection"]}, testMessagesAreIgnoredWhenThereIsNoTransition : { Test : ["Test messages are ignored when there is no transition"]}, testAsyncTransitionsWithHandlers : { Async : ["Test asynchronous transitions with handlers"]}, testStateChangeWithPayload : { Test : ["Test state change with payload"]}, testStateChangeWithModuleCallback : { Test : ["Test state change with module callback"]}, testStateChangeWithGuards : { Test : ["Test state change with module guards"]}}};
hex_state_control_StateChangeMacro.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"macroExecutor\",\"type\":\"hex.control.macro.IMacroExecutor\",\"key\":\"\"}],\"name\":\"hex.state.control.StateChangeMacro\",\"methods\":[]}"]}};
hex_state_mock_AnotherMockCommandWithRequest.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"logger\",\"type\":\"hex.state.mock.IMockCommandLogger\",\"key\":\"\"},{\"isOpt\":false,\"name\":\"parser\",\"type\":\"hex.data.IParser\",\"key\":\"\"}],\"name\":\"hex.state.mock.AnotherMockCommandWithRequest\",\"methods\":[]}"]}};
hex_state_mock_DeleteAllCookiesMockCommand.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"logger\",\"type\":\"hex.state.mock.IMockCommandLogger\",\"key\":\"\"}],\"name\":\"hex.state.mock.DeleteAllCookiesMockCommand\",\"methods\":[]}"]}};
hex_state_mock_DisplayAddBannerMockCommand.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"logger\",\"type\":\"hex.state.mock.IMockCommandLogger\",\"key\":\"\"}],\"name\":\"hex.state.mock.DisplayAddBannerMockCommand\",\"methods\":[]}"]}};
hex_state_mock_DisplayWelcomeMessageMockCommand.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"logger\",\"type\":\"hex.state.mock.IMockCommandLogger\",\"key\":\"\"}],\"name\":\"hex.state.mock.DisplayWelcomeMessageMockCommand\",\"methods\":[]}"]}};
hex_state_mock_GetAdminPrivilegesMockCommand.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"logger\",\"type\":\"hex.state.mock.IMockCommandLogger\",\"key\":\"\"}],\"name\":\"hex.state.mock.GetAdminPrivilegesMockCommand\",\"methods\":[]}"]}};
hex_state_mock_InviteForRegisterMockCommand.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"logger\",\"type\":\"hex.state.mock.IMockCommandLogger\",\"key\":\"\"}],\"name\":\"hex.state.mock.InviteForRegisterMockCommand\",\"methods\":[]}"]}};
hex_state_mock_MockCommandWithRequest.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"logger\",\"type\":\"hex.state.mock.IMockCommandLogger\",\"key\":\"\"},{\"isOpt\":false,\"name\":\"parser\",\"type\":\"hex.data.IParser\",\"key\":\"\"}],\"name\":\"hex.state.mock.MockCommandWithRequest\",\"methods\":[]}"]}};
hex_state_mock_MockCommandWithStringInjection.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"module\",\"type\":\"hex.module.IModule\",\"key\":\"\"},{\"isOpt\":false,\"name\":\"name\",\"type\":\"String\",\"key\":\"\"}],\"name\":\"hex.state.mock.MockCommandWithStringInjection\",\"methods\":[]}"]}};
hex_state_mock_PrepareUserInfosMockCommand.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"logger\",\"type\":\"hex.state.mock.IMockCommandLogger\",\"key\":\"\"}],\"name\":\"hex.state.mock.PrepareUserInfosMockCommand\",\"methods\":[]}"]}};
hex_state_mock_RemoveAdminPrivilegesMockCommand.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"logger\",\"type\":\"hex.state.mock.IMockCommandLogger\",\"key\":\"\"}],\"name\":\"hex.state.mock.RemoveAdminPrivilegesMockCommand\",\"methods\":[]}"]}};
hex_state_mock_StoreUserActivityMockCommand.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"logger\",\"type\":\"hex.state.mock.IMockCommandLogger\",\"key\":\"\"}],\"name\":\"hex.state.mock.StoreUserActivityMockCommand\",\"methods\":[]}"]}};
hex_unittest_assertion_Assert._assertCount = 0;
hex_unittest_assertion_Assert._assertFailedCount = 0;
hex_unittest_assertion_Assert._lastAssertionLog = "";
hex_unittest_assertion_Assert._assertionLogs = [];
hex_unittest_event_MethodRunnerEvent.SUCCESS = "onSuccess";
hex_unittest_event_MethodRunnerEvent.FAIL = "onFail";
hex_unittest_event_MethodRunnerEvent.TIMEOUT = "onTimeout";
hex_unittest_event_MethodRunnerEvent.START_RUN = "onStartRun";
hex_unittest_event_MethodRunnerEvent.END_RUN = "onEndRun";
hex_unittest_event_TestRunnerEvent.SUCCESS = "onSuccess";
hex_unittest_event_TestRunnerEvent.FAIL = "onFail";
hex_unittest_event_TestRunnerEvent.TIMEOUT = "onTimeout";
hex_unittest_event_TestRunnerEvent.START_RUN = "onStartRun";
hex_unittest_event_TestRunnerEvent.END_RUN = "onEndRun";
hex_unittest_event_TestRunnerEvent.SUITE_CLASS_START_RUN = "onSuiteClassStartRun";
hex_unittest_event_TestRunnerEvent.SUITE_CLASS_END_RUN = "onSuiteClassEndRun";
hex_unittest_event_TestRunnerEvent.TEST_CLASS_START_RUN = "onTestClassStartRun";
hex_unittest_event_TestRunnerEvent.TEST_CLASS_END_RUN = "onTestClassEndRun";
hex_unittest_metadata_MetadataList.BEFORE_CLASS = "BeforeClass";
hex_unittest_metadata_MetadataList.AFTER_CLASS = "AfterClass";
hex_unittest_metadata_MetadataList.BEFORE = "Before";
hex_unittest_metadata_MetadataList.AFTER = "After";
hex_unittest_metadata_MetadataList.TEST = "Test";
hex_unittest_metadata_MetadataList.ASYNC = "Async";
hex_unittest_metadata_MetadataList.IGNORE = "Ignore";
hex_unittest_metadata_MetadataList.SUITE = "Suite";
hex_unittest_metadata_MetadataList.INSTANCE_METADATA = ["Before","After","Test","Async"];
hex_unittest_metadata_MetadataList.STATIC_METADATA = ["BeforeClass","AfterClass"];
hex_unittest_notifier_BrowserUnitTestNotifier._TRACE = haxe_Log.trace;
hex_unittest_notifier_ConsoleNotifier._TRACE = haxe_Log.trace;
hex_unittest_runner_TestRunner.RENDER_DELAY = 50;
hex_view_viewhelper_MainViewHelperManagerMessage.VIEW_HELPER_MANAGER_CREATION = new hex_event_MessageType("onViewHelperManagerCreation");
hex_view_viewhelper_MainViewHelperManagerMessage.VIEW_HELPER_MANAGER_RELEASE = new hex_event_MessageType("onViewHelperManagerRelease");
hex_view_viewhelper_ViewHelper.__meta__ = { obj : { 'hex.di.IInjectorContainer' : ["{\"ctor\":{\"args\":[],\"isPre\":false,\"name\":\"new\",\"isPost\":false,\"order\":0},\"props\":[{\"isOpt\":false,\"name\":\"dispatcher\",\"type\":\"hex.event.IDispatcher\",\"key\":\"\"}],\"name\":\"hex.view.viewhelper.ViewHelper\",\"methods\":[]}"]}};
hex_view_viewhelper_ViewHelper.DEFAULT_VISIBLE = true;
hex_view_viewhelper_ViewHelperManager._mInstances = new haxe_ds_ObjectMap();
hex_view_viewhelper_ViewHelperManager._DISPATCHER = new hex_event_Dispatcher();
hex_view_viewhelper_ViewHelperManagerMessage.VIEW_HELPER_CREATION = new hex_event_MessageType("onViewHelperCreation");
hex_view_viewhelper_ViewHelperManagerMessage.VIEW_HELPER_RELEASE = new hex_event_MessageType("onViewHelperRelease");
hex_view_viewhelper_ViewHelperMessage.INIT = new hex_event_MessageType("onInit");
hex_view_viewhelper_ViewHelperMessage.RELEASE = new hex_event_MessageType("onRelease");
hex_view_viewhelper_ViewHelperMessage.ATTACH_VIEW = new hex_event_MessageType("onAttachView");
hex_view_viewhelper_ViewHelperMessage.REMOVE_VIEW = new hex_event_MessageType("onRemoveView");
hex_viewhelper_MVCViewHelperSuite.__meta__ = { fields : { list : { Suite : ["ViewHelper"]}}};
hex_viewhelper_ViewHelperManagerTest.__meta__ = { fields : { testGetInstance : { Test : ["test getInstance"]}, testRelease : { Test : ["test release"]}, testBuildViewHelper : { Test : ["test buildViewHelper"]}, testReleaseViewHelpers : { Test : ["test releaseViewHelper"]}}};
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
virrealyclient_VirrealyClientSuite.__meta__ = { fields : { list : { Suite : ["VirrealyClientSuite"]}}};
virrealyclient_VirrealyClientMainTest.main();
})(typeof console != "undefined" ? console : {log:function(){}});

//# sourceMappingURL=VirrealyClientTest.js.map